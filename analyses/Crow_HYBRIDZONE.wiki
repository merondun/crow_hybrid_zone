= ~~ Analysis, 250 BP ~~  =

Run this on your bismark coverage files to generate a bed file that appends a CpG island ID to each 5mC position: 

<pre class="">for i in $(ls *.CpG_5mC.cov.gz | sed 's/\..*//g'); do 
zcat ${i}.CpG_5mC.cov.gz | bedtools intersect -a - -b cgis.bed -wa -wb | awk '{OFS=&quot;\t&quot;}{print $7, $2, $3, $4, $5, $6, $10}' &gt; ${i}.CGI.bed
done</pre>
Will look like this:

<pre class="">head D_Ba_H21_BL_CHK_M.CGI.bed
chr10   10032081        10032081        11.1111111111111        1       8       cgi1545
chr10   10032088        10032088        0       0       18      cgi1545
chr10   10032089        10032089        18.1818181818182        4       18      cgi1545
chr10   10032094        10032094        11.1111111111111        2       16      cgi1545
chr10   10032095        10032095        9.09090909090909        2       20      cgi1545</pre>
I prefer to work with dplyr for filtering and calculate averages, because it is very fast. I create a template for the 'tab &lt;- ' command in excel and then substitute the ID across formulas. I organize my metadata in excel, and prefer this to R loops for handling the 'raw' data since I can manually inspect all the code. 

== CG  ==

=== Bin by CGI, GLMM ===

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/CG/dplyr/&quot;)

#import all the data and average by CGI
tab &lt;- read.table('D_Ko_C29_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C29_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C29_ADL_F) &lt;- c('site','chr','start','end','numCs1','numTs1','Sites1');C29_ADL_F$C29_ADL_F &lt;- (C29_ADL_F$numCs1/(C29_ADL_F$numCs1+C29_ADL_F$numTs1))
tab &lt;- read.table('D_Ko_C29_BL_CHK_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C29_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C29_CHK_F) &lt;- c('site','chr','start','end','numCs2','numTs2','Sites2');C29_CHK_F$C29_CHK_F &lt;- (C29_CHK_F$numCs2/(C29_CHK_F$numCs2+C29_CHK_F$numTs2))
tab &lt;- read.table('D_Ko_C29_BL_YRL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C29_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C29_YRL_F) &lt;- c('site','chr','start','end','numCs3','numTs3','Sites3');C29_YRL_F$C29_YRL_F &lt;- (C29_YRL_F$numCs3/(C29_YRL_F$numCs3+C29_YRL_F$numTs3))
tab &lt;- read.table('D_Ko_C31_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C31_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C31_ADL_M) &lt;- c('site','chr','start','end','numCs4','numTs4','Sites4');C31_ADL_M$C31_ADL_M &lt;- (C31_ADL_M$numCs4/(C31_ADL_M$numCs4+C31_ADL_M$numTs4))
tab &lt;- read.table('D_Ko_C31_BL_YRL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C31_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C31_YRL_M) &lt;- c('site','chr','start','end','numCs5','numTs5','Sites5');C31_YRL_M$C31_YRL_M &lt;- (C31_YRL_M$numCs5/(C31_YRL_M$numCs5+C31_YRL_M$numTs5))
tab &lt;- read.table('D_Ko_C36_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C36_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C36_ADL_M) &lt;- c('site','chr','start','end','numCs6','numTs6','Sites6');C36_ADL_M$C36_ADL_M &lt;- (C36_ADL_M$numCs6/(C36_ADL_M$numCs6+C36_ADL_M$numTs6))
tab &lt;- read.table('D_Ko_C36_BL_CHK_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C36_CHK_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C36_CHK_M) &lt;- c('site','chr','start','end','numCs7','numTs7','Sites7');C36_CHK_M$C36_CHK_M &lt;- (C36_CHK_M$numCs7/(C36_CHK_M$numCs7+C36_CHK_M$numTs7))
tab &lt;- read.table('D_Ko_C36_BL_YRL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C36_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C36_YRL_M) &lt;- c('site','chr','start','end','numCs8','numTs8','Sites8');C36_YRL_M$C36_YRL_M &lt;- (C36_YRL_M$numCs8/(C36_YRL_M$numCs8+C36_YRL_M$numTs8))
tab &lt;- read.table('D_Ko_C45_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_ADL_F) &lt;- c('site','chr','start','end','numCs9','numTs9','Sites9');C45_ADL_F$C45_ADL_F &lt;- (C45_ADL_F$numCs9/(C45_ADL_F$numCs9+C45_ADL_F$numTs9))
tab &lt;- read.table('D_Ko_C45_BL_CHK_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_CHK_F) &lt;- c('site','chr','start','end','numCs10','numTs10','Sites10');C45_CHK_F$C45_CHK_F &lt;- (C45_CHK_F$numCs10/(C45_CHK_F$numCs10+C45_CHK_F$numTs10))
tab &lt;- read.table('D_Ko_C45_BL_YRL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_YRL_F) &lt;- c('site','chr','start','end','numCs11','numTs11','Sites11');C45_YRL_F$C45_YRL_F &lt;- (C45_YRL_F$numCs11/(C45_YRL_F$numCs11+C45_YRL_F$numTs11))
tab &lt;- read.table('S_Up_H59_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_ADL_M) &lt;- c('site','chr','start','end','numCs12','numTs12','Sites12');H59_ADL_M$H59_ADL_M &lt;- (H59_ADL_M$numCs12/(H59_ADL_M$numCs12+H59_ADL_M$numTs12))
tab &lt;- read.table('S_Up_H59_BL_CHK_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_CHK_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_CHK_M) &lt;- c('site','chr','start','end','numCs13','numTs13','Sites13');H59_CHK_M$H59_CHK_M &lt;- (H59_CHK_M$numCs13/(H59_CHK_M$numCs13+H59_CHK_M$numTs13))
tab &lt;- read.table('S_Up_H59_BL_YRL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_YRL_M) &lt;- c('site','chr','start','end','numCs14','numTs14','Sites14');H59_YRL_M$H59_YRL_M &lt;- (H59_YRL_M$numCs14/(H59_YRL_M$numCs14+H59_YRL_M$numTs14))
tab &lt;- read.table('S_Up_H60_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_ADL_F) &lt;- c('site','chr','start','end','numCs15','numTs15','Sites15');H60_ADL_F$H60_ADL_F &lt;- (H60_ADL_F$numCs15/(H60_ADL_F$numCs15+H60_ADL_F$numTs15))
tab &lt;- read.table('S_Up_H60_BL_CHK_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_CHK_F) &lt;- c('site','chr','start','end','numCs16','numTs16','Sites16');H60_CHK_F$H60_CHK_F &lt;- (H60_CHK_F$numCs16/(H60_CHK_F$numCs16+H60_CHK_F$numTs16))
tab &lt;- read.table('S_Up_H60_BL_YRL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_YRL_F) &lt;- c('site','chr','start','end','numCs17','numTs17','Sites17');H60_YRL_F$H60_YRL_F &lt;- (H60_YRL_F$numCs17/(H60_YRL_F$numCs17+H60_YRL_F$numTs17))
tab &lt;- read.table('S_Up_H65_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H65_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H65_ADL_F) &lt;- c('site','chr','start','end','numCs18','numTs18','Sites18');H65_ADL_F$H65_ADL_F &lt;- (H65_ADL_F$numCs18/(H65_ADL_F$numCs18+H65_ADL_F$numTs18))
tab &lt;- read.table('S_Up_H65_BL_CHK_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H65_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H65_CHK_F) &lt;- c('site','chr','start','end','numCs19','numTs19','Sites19');H65_CHK_F$H65_CHK_F &lt;- (H65_CHK_F$numCs19/(H65_CHK_F$numCs19+H65_CHK_F$numTs19))
tab &lt;- read.table('S_Up_H65_BL_YRL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H65_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H65_YRL_F) &lt;- c('site','chr','start','end','numCs20','numTs20','Sites20');H65_YRL_F$H65_YRL_F &lt;- (H65_YRL_F$numCs20/(H65_YRL_F$numCs20+H65_YRL_F$numTs20))
tab &lt;- read.table('S_Up_H75_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H75_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H75_ADL_M) &lt;- c('site','chr','start','end','numCs21','numTs21','Sites21');H75_ADL_M$H75_ADL_M &lt;- (H75_ADL_M$numCs21/(H75_ADL_M$numCs21+H75_ADL_M$numTs21))
tab &lt;- read.table('S_Up_H75_BL_CHK_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H75_CHK_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H75_CHK_M) &lt;- c('site','chr','start','end','numCs22','numTs22','Sites22');H75_CHK_M$H75_CHK_M &lt;- (H75_CHK_M$numCs22/(H75_CHK_M$numCs22+H75_CHK_M$numTs22))
tab &lt;- read.table('S_Up_H75_BL_YRL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H75_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H75_YRL_M) &lt;- c('site','chr','start','end','numCs23','numTs23','Sites23');H75_YRL_M$H75_YRL_M &lt;- (H75_YRL_M$numCs23/(H75_YRL_M$numCs23+H75_YRL_M$numTs23))

head(H75_YRL_M)

master &lt;- Reduce(function(x,y) merge(x = x, y = y, by=c('site','chr','start','end')),
                 list(C29_ADL_F,C29_CHK_F,C29_YRL_F,C31_ADL_M,C31_YRL_M,C36_ADL_M,C36_CHK_M,C36_YRL_M,C45_ADL_F,C45_CHK_F,C45_YRL_F,H59_ADL_M,H59_CHK_M,H59_YRL_M,H60_ADL_F,H60_CHK_F,H60_YRL_F,H65_ADL_F,H65_CHK_F,H65_YRL_F,H75_ADL_M,H75_CHK_M,H75_YRL_M))
head(master)

#calculate coverage and CpGs
cov &lt;- master %&gt;% mutate(minsite1 = ifelse(Sites1 &lt; 3, NA, Sites1),
                         minsite2 = ifelse(Sites2 &lt; 3, NA, Sites2),
                         minsite3 = ifelse(Sites3 &lt; 3, NA, Sites3),
                         minsite4 = ifelse(Sites4 &lt; 3, NA, Sites4),
                         minsite5 = ifelse(Sites5 &lt; 3, NA, Sites5),
                         minsite6 = ifelse(Sites6 &lt; 3, NA, Sites6),
                         minsite7 = ifelse(Sites7 &lt; 3, NA, Sites7),
                         minsite8 = ifelse(Sites8 &lt; 3, NA, Sites8),
                         minsite9 = ifelse(Sites9 &lt; 3, NA, Sites9),
                         minsite10 = ifelse(Sites10 &lt; 3, NA, Sites10),
                         minsite11 = ifelse(Sites11 &lt; 3, NA, Sites11),
                         minsite12 = ifelse(Sites12 &lt; 3, NA, Sites12),
                         minsite13 = ifelse(Sites13 &lt; 3, NA, Sites13),
                         minsite14 = ifelse(Sites14 &lt; 3, NA, Sites14),
                         minsite15 = ifelse(Sites15 &lt; 3, NA, Sites15),
                         minsite16 = ifelse(Sites16 &lt; 3, NA, Sites16),
                         minsite17 = ifelse(Sites17 &lt; 3, NA, Sites17),
                         minsite18 = ifelse(Sites18 &lt; 3, NA, Sites18),
                         minsite19 = ifelse(Sites19 &lt; 3, NA, Sites19),
                         minsite20 = ifelse(Sites20 &lt; 3, NA, Sites20),
                         minsite21 = ifelse(Sites21 &lt; 3, NA, Sites21),
                         minsite22 = ifelse(Sites22 &lt; 3, NA, Sites22),
                         minsite23 = ifelse(Sites23 &lt; 3, NA, Sites23))

#count NAs
colSums(is.na(cov))

#filter according to missingness
sitedat &lt;- cov[rowSums(is.na(cov[grepl('^minsite', names(cov))])) &lt;= 4, ]
nrow(sitedat)

master &lt;- sitedat

#define groups
master$MALE &lt;- rowMeans(master[grepl('_M$', names(master))],na.rm=TRUE) #0=F  
master$FEMALE &lt;- rowMeans(master[grepl('_F$', names(master))],na.rm=TRUE) #1=M
master$ADULT &lt;- rowMeans(master[grepl('_ADL|_YRL', names(master))],na.rm=TRUE) #0=A
master$CHICK &lt;- rowMeans(master[grepl('_CHK_', names(master))],na.rm=TRUE) #1=C
master$HOODED &lt;- rowMeans(master[grepl('^H', names(master))],na.rm=TRUE) #1=C
master$CARRION &lt;- rowMeans(master[grepl('^C', names(master))],na.rm=TRUE) #0=H
compare &lt;- master[,c(1,(ncol(master)-4-1):ncol(master))]
head(compare)
#now we must do pairwise comparisons between our 3 treatments for % 5mC
compare[8] &lt;- compare[2]-compare[3]
compare[9] &lt;- compare[4]-compare[5]
compare[10] &lt;- compare[6]-compare[7]
head(compare)
win_diff &lt;- compare[,c(8,9,10)]

#merge the total percent diff with the original frame
master_meth &lt;- cbind(master,win_diff)
colnames(master_meth)[colnames(master_meth) == 'MALE.1'] &lt;- 'sex_M.F'
colnames(master_meth)[colnames(master_meth) == 'ADULT.1'] &lt;- 'stage_ADL.CHK'
colnames(master_meth)[colnames(master_meth) == 'HOODED.1'] &lt;- 'species_H.C'
nrow(master_meth)
names(master_meth)


#now subset for GLMM # C=1 H=0 / F=0 M=1 / ADL+YRL=0 CHK=1
IND1 &lt;- as.data.frame(c(master_meth[1],&quot;C29_ADL_F&quot;,master_meth[5], master_meth[6],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND2 &lt;- as.data.frame(c(master_meth[1],&quot;C29_CHK_F&quot;,master_meth[9], master_meth[10],&quot;1&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND3 &lt;- as.data.frame(c(master_meth[1],&quot;C29_YRL_F&quot;,master_meth[13], master_meth[14],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND4 &lt;- as.data.frame(c(master_meth[1],&quot;C31_ADL_M&quot;,master_meth[17], master_meth[18],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND5 &lt;- as.data.frame(c(master_meth[1],&quot;C31_YRL_M&quot;,master_meth[21], master_meth[22],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND6 &lt;- as.data.frame(c(master_meth[1],&quot;C36_ADL_M&quot;,master_meth[25], master_meth[26],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND7 &lt;- as.data.frame(c(master_meth[1],&quot;C36_CHK_M&quot;,master_meth[29], master_meth[30],&quot;1&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND8 &lt;- as.data.frame(c(master_meth[1],&quot;C36_YRL_M&quot;,master_meth[33], master_meth[34],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND9 &lt;- as.data.frame(c(master_meth[1],&quot;C45_ADL_F&quot;,master_meth[37], master_meth[38],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND10 &lt;- as.data.frame(c(master_meth[1],&quot;C45_CHK_F&quot;,master_meth[41], master_meth[42],&quot;1&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND11 &lt;- as.data.frame(c(master_meth[1],&quot;C45_YRL_F&quot;,master_meth[45], master_meth[46],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND12 &lt;- as.data.frame(c(master_meth[1],&quot;H59_ADL_M&quot;,master_meth[49], master_meth[50],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND13 &lt;- as.data.frame(c(master_meth[1],&quot;H59_CHK_M&quot;,master_meth[53], master_meth[54],&quot;0&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND14 &lt;- as.data.frame(c(master_meth[1],&quot;H59_YRL_M&quot;,master_meth[57], master_meth[58],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND15 &lt;- as.data.frame(c(master_meth[1],&quot;H60_ADL_F&quot;,master_meth[61], master_meth[62],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND16 &lt;- as.data.frame(c(master_meth[1],&quot;H60_CHK_F&quot;,master_meth[65], master_meth[66],&quot;0&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND17 &lt;- as.data.frame(c(master_meth[1],&quot;H60_YRL_F&quot;,master_meth[69], master_meth[70],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND18 &lt;- as.data.frame(c(master_meth[1],&quot;H65_ADL_F&quot;,master_meth[73], master_meth[74],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND19 &lt;- as.data.frame(c(master_meth[1],&quot;H65_CHK_F&quot;,master_meth[77], master_meth[78],&quot;0&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND20 &lt;- as.data.frame(c(master_meth[1],&quot;H65_YRL_F&quot;,master_meth[81], master_meth[82],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND21 &lt;- as.data.frame(c(master_meth[1],&quot;H75_ADL_M&quot;,master_meth[85], master_meth[86],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND22 &lt;- as.data.frame(c(master_meth[1],&quot;H75_CHK_M&quot;,master_meth[89], master_meth[90],&quot;0&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND23 &lt;- as.data.frame(c(master_meth[1],&quot;H75_YRL_M&quot;,master_meth[93], master_meth[94],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))

head(IND4)
head(IND23)

#Bind them all together and order it by window
datmeth &lt;- rbind(IND1,IND2,IND3,IND4,IND5,IND6,IND7,IND8,IND9,IND10,IND11,IND12,IND13,IND14,IND15,IND16,IND17,IND18,IND19,IND20,IND21,IND22,IND23)
datmeth &lt;- datmeth[order(datmeth$CGI),]

head(datmeth)

#sanity check 
nrow(datmeth)/23

#save some files we might need later 
write.csv(datmeth,file=&quot;CG_GLMM_Input.csv&quot;,row.names=FALSE)
write.csv(master_meth,file=&quot;CG_FULL.csv&quot;,row.names=FALSE)

#now we can start here 
datmeth &lt;- read.csv(&quot;CG_GLMM_Input.csv&quot;,header=TRUE)
head(datmeth)
nrow(datmeth)/23
#set these as factor variables 
datmeth$Species &lt;- as.factor(datmeth$Species)
datmeth$Stage &lt;- as.factor(datmeth$Stage)
datmeth$Sex &lt;- as.factor(datmeth$Sex)
datmeth$ID &lt;- as.factor(datmeth$ID)

##### MODEL #####
DMA_GLMM_pValues &lt;- NULL
DMA_GLMM_Estimates &lt;- NULL
DMA_GLMM_SEs &lt;- NULL
DMA_GLMM_RandomEffect_Var &lt;- NULL
DMA_GLMM_DispersionStat &lt;- NULL
DMA_GLMM_Singular &lt;- NULL

for (i in seq(1, nrow(datmeth), by = 23)) {
  tryCatch({
    cat('\n Running model for CpG site: ',((i-1)/23))
    # model each site
    CpGsite &lt;- datmeth[i:(i + 22), ]
    # run the model and get the contrasts between sex, stage, species
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Sex + Stage + Species + (1 | ID / CGI) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+08)))
    DMA_GLMM_Singularf &lt;- isSingular(glmm_CpG)
    sum_mod &lt;- summary(glmm_CpG)
    
    ## 1 random effects ( (1 | ID) )
    GLMM_RandomEffect_Var &lt;- as.data.frame(VarCorr(glmm_CpG))$sdcor
    
    # calculate dispersion statistic (following AF Zuur, JM Hilbe
    # &amp; EN Ieno. A beginner’s guide to GLM and GLMM with R - a
    # frequentist and Bayesian perspective for
    # ecologists(Highland Statistics Ltd., 2013).)
    E1 &lt;- residuals(glmm_CpG)
    # number of parameters: fixed effects + 1 random effect
    p1 &lt;- length(fixef(glmm_CpG)) + 1
    GLMM_DispersionStat &lt;- sum(E1^2)/(nrow(CpGsite) - p1)
    # format estimates to add estimates for each loop to
    # estimates from previous loops
    
    # TO GET THE COLUMN HEADERS WITH THE CONTRASTS, check the excel file. First I look at the glmm_CpG_contrast object, which lists the models in order of 1-8, for this comparison. From here, make the 28 pairwise comparison charts, and substitute the 0 and 1 with your variables
    GLMM_Estimates_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,1], Stage1 = sum_mod$coefficients[3,1], Species1 = sum_mod$coefficients[4,1])
    GLMM_SEs_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,2], Stage1 = sum_mod$coefficients[3,2], Species1 = sum_mod$coefficients[4,2])
    GLMM_pValues_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,4], Stage1 = sum_mod$coefficients[3,4], Species1 = sum_mod$coefficients[4,4])
    GLMM_RandomEffect_Var_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                      1]), ID = GLMM_RandomEffect_Var[1])
    GLMM_DispersionStat_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                    1]), DispStat = GLMM_DispersionStat)
    # add estimates for each loop to estimates from previous
    # loops
    DMA_GLMM_pValues &lt;- rbind(DMA_GLMM_pValues, GLMM_pValues_f)
    DMA_GLMM_Estimates &lt;- rbind(DMA_GLMM_Estimates, GLMM_Estimates_f)
    DMA_GLMM_SEs &lt;- rbind(DMA_GLMM_SEs, GLMM_SEs_f)
    DMA_GLMM_RandomEffect_Var &lt;- rbind(DMA_GLMM_RandomEffect_Var,GLMM_RandomEffect_Var_f)
    DMA_GLMM_DispersionStat &lt;- rbind(DMA_GLMM_DispersionStat,GLMM_DispersionStat_f)
    DMA_GLMM_Singular &lt;- rbind(DMA_GLMM_Singular,DMA_GLMM_Singularf)
    
    #Save errors to this output
  }, error=function(e){cat(unique(CpGsite[,1]), &quot;\n&quot;)
    
  }
  )
}

# 3. Save loop results
save(DMA_GLMM_pValues, DMA_GLMM_Estimates, DMA_GLMM_SEs, DMA_GLMM_RandomEffect_Var,
     DMA_GLMM_DispersionStat,DMA_GLMM_Singular, file = &quot;CG_DMA_CrowResults.RData&quot;)

#should be the samem otherwise we have models that didn't converge 
nrow(DMA_GLMM_pValues)
nrow(datmeth)/23
</pre>
==== Volcanos ====

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(LICORS)
library(matrixStats)
library(viridis)
library(RColorBrewer)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/CG/dplyr&quot;)

load(&quot;CG_DMA_CrowResults.RData&quot;)

#check out some of the data
head(DMA_GLMM_Estimates)
dim(DMA_GLMM_Estimates)
head(DMA_GLMM_pValues)
head(DMA_GLMM_SEs)
head(DMA_GLMM_Singular)


#let's check out the distributio of 5mC contrasts
multi.hist(DMA_GLMM_Estimates[,2:4],nrow=1,ncol=NULL,breaks=21)

#plot dispersion boxplot, we will exclude any sites outside the 95% interval
disp_limits &lt;- hdi(DMA_GLMM_DispersionStat$DispStat,credMass = 0.95)
disp_limits

# lower     upper 
# 0.0251642 1.3674338 

jpeg(&quot;plots/CG_dispersion_plot.jpg&quot;,units=&quot;in&quot;,res=300, height=6, width=5)
theme_set(theme_classic(base_size = 16))
dplot &lt;- ggplot(DMA_GLMM_DispersionStat,aes(y=DispStat,x=0))+geom_violin()+theme_classic(base_size = 16)+
  geom_jitter(width=0.1)+
  geom_text(aes(y = (disp_limits[2]+0.05),x=0.2, label = &quot;Upper Limit&quot;))+
  geom_hline(yintercept = disp_limits[2],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  geom_text(aes(y = (disp_limits[1]+0.05),x=0.2, label = &quot;Lower Limit&quot;))+
  geom_hline(yintercept = disp_limits[1],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  xlab(&quot;&quot;)+ylab(&quot;Dispersion Statistic&quot;)+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
grid.arrange(dplot)
dev.off()

#subset bad sites
bad_sites &lt;- subset(DMA_GLMM_DispersionStat,DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2])
nrow(bad_sites)

# calculate 10% differences, now we care about direction so we re-do this, since before it was absolute value 
meth &lt;- read.csv(&quot;CG_FULL.csv&quot;,header=TRUE)
head(meth)

names(DMA_GLMM_pValues) &lt;- c('site','pSex','pStage','pSpecies')
names(DMA_GLMM_Estimates) &lt;- c('site','eSex','eStage','eSpecies')
names(DMA_GLMM_SEs) &lt;- c('site','sSex','sStage','sSpecies')
DMA_RF_S &lt;- cbind(DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular)
names(DMA_RF_S) &lt;- c('site','RandomEffect','IsSingular')
master_meth1 &lt;- merge(meth, DMA_GLMM_pValues, by='site')
master_meth2 &lt;- merge(master_meth1, DMA_GLMM_Estimates, by='site')
master_meth3 &lt;- merge(master_meth2, DMA_GLMM_SEs, by='site')
master_meth4 &lt;- merge(master_meth3, DMA_GLMM_DispersionStat, by='site')
master_meth &lt;- merge(master_meth4, DMA_RF_S, by='site')
head(master_meth)
nrow(master_meth)

#### Volcano with bonferonni
pthresh &lt;- (0.05/nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(pSex &lt; pthresh &amp; abs(sex_M.F) &gt; 0.1 &amp; pSpecies &gt; pthresh &amp; pStage &gt; pthresh, &quot;SEX&quot;, 
                                                   ifelse(pSpecies &lt; pthresh &amp; abs(species_H.C) &gt; 0.1 &amp; pSex &gt; pthresh &amp; pStage &gt; pthresh,&quot;SPECIES&quot;,
                                                          ifelse(pStage &lt; pthresh &amp; abs(stage_ADL.CHK) &gt; 0.1 &amp; pSex &gt; pthresh &amp; pSpecies &gt; pthresh ,&quot;STAGE&quot;,
                                                                 ifelse(pSex &lt; pthresh &amp; pSpecies &lt; pthresh &amp; abs(sex_M.F) &gt; 0.1 &amp; abs(species_H.C) &gt; 0.1 &amp; pStage &gt; pthresh ,&quot;SEX_SPECIES&quot;, &quot;OTHER&quot;)))))
master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
#master_meth &lt;- subset(master_meth, SING == 'OKAY' &amp; OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

### Or with FDR
master_meth$fSex &lt;- p.adjust(master_meth$pSex,method='BH',n=nrow(master_meth))
master_meth$fStage &lt;- p.adjust(master_meth$pStage,method='BH',n=nrow(master_meth))
master_meth$fSpecies &lt;- p.adjust(master_meth$pSpecies,method='BH',n=nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(fSex &lt; 0.01 &amp; abs(sex_M.F) &gt; 0.1 &amp; fSpecies &gt; 0.01 &amp; fStage &gt; 0.01, &quot;SEX&quot;, 
                                                   ifelse(fSpecies &lt; 0.01 &amp; abs(species_H.C) &gt; 0.1 &amp; fSex &gt; 0.01 &amp; fStage &gt; 0.01,&quot;SPECIES&quot;,
                                                          ifelse(fStage &lt; 0.01 &amp; abs(stage_ADL.CHK) &gt; 0.1 &amp; fSex &gt; 0.01 &amp; fSpecies &gt; 0.01 ,&quot;STAGE&quot;,
                                                                 ifelse(fSex &lt; 0.01 &amp; fSpecies &lt; 0.01 &amp; abs(sex_M.F) &gt; 0.1 &amp; abs(species_H.C) &gt; 0.1 &amp; fStage &gt; 0.01 ,&quot;SEX_SPECIES&quot;, &quot;OTHER&quot;)))))


master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
master_meth &lt;- subset(master_meth, SING == 'OKAY' &amp; OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

#save for manhattan
write.csv(master_meth,file='CG_Manhattan.csv')

#hunt for colors
#display.brewer.all(colorblindFriendly=TRUE) 
cols &lt;- brewer.pal(5,'Dark2')
#cols &lt;- inferno(5)
shapes &lt;- c(1,15,16,17,18)

#plot
p1 &lt;- ggplot(master_meth, aes(x=sex_M.F,y=threshold(-log10(pSex),max=quantile(-log10(pSex),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;OTHER&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;STAGE&quot;=cols[2]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.1,0.1),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Sex&quot;)+
  ylab('-log10(p)')
p1

p2 &lt;- ggplot(master_meth, aes(x=stage_ADL.CHK,y=threshold(-log10(pStage),max=quantile(-log10(pStage),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR), size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;OTHER&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;STAGE&quot;=cols[2]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.1,0.1),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Stage&quot;)+
  ylab('-log10(p)')
p2

p3 &lt;- ggplot(master_meth, aes(x=species_H.C,y=threshold(-log10(pSpecies),max=quantile(-log10(pSpecies),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR), size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;OTHER&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;STAGE&quot;=cols[2]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.1,0.1),lwd=1.5,col=&quot;black&quot;)+
  scale_shape_manual(values=shapes)+
  ggtitle(&quot;Species&quot;)+
  ylab('-log10(p)')
p3

#save it 
jpeg(&quot;plots/CG_DMA_Volcano.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=12)
theme_set(theme_classic(base_size = 16))
grid.arrange(p1,p3,p2,nrow=1)
dev.off()


#save file
write.csv(master_meth,file='CG_DMA_DMRS.csv',row.names=FALSE)</pre>
=== PCA ===

<pre class="">library(vegan)
library(adegenet)
library(cluster)
library(viridis)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/CG/dplyr&quot;)

hyb &lt;- read.csv(&quot;CG_FULL.csv&quot;,header=TRUE)

#grab only the % methylation columns
hyb_use &lt;- hyb[grepl('^site$|_F$|_M$',names(hyb))]

#transpose so that each row is a sample, and each column is a locus
tmydf = setNames(data.frame(t(hyb_use[,-1])), hyb_use[,1])

f1 &lt;- function(vec) {
  m &lt;- mean(vec, na.rm = TRUE)
  vec[is.na(vec)] &lt;- m
  return(vec)
}

Y = apply(tmydf,2,f1)

pca &lt;-dudi.pca(Y,nf=20,scannf=FALSE,center=TRUE,scale=FALSE)

#import metadata
variables &lt;- read.table(&quot;metadata_cg.txt&quot;,header=TRUE)
variables &lt;- subset(variables,Library != 'D_Ko_C31_CHK_M')

# scatter plot PCA
pve_a &lt;- data.frame(PC = 1:22, pve = pca$eig/sum(pca$eig)*100)
pcas &lt;- as.data.frame(pca$li)

#plot the eigenvalues
eigs &lt;- ggplot(pve_a,aes(x=PC,y=pve))+
  geom_bar(stat=&quot;identity&quot;)+
  theme_classic()
eigs
pdf(&quot;../plots/CG_PCA_eigs.pdf&quot;, height=4, width=6)
theme_set(theme_classic(base_size = 16))
grid.arrange(eigs, nrow=1)
dev.off()


#gather metadata
full &lt;- data.frame(pcas,variables)

#plot 
shapes &lt;- c(15,17)

#display.brewer.all(n = 3, colorblindFriendly=TRUE)
myCol &lt;- brewer.pal(3,&quot;Set2&quot;)
p1 &lt;- ggplot(full,aes(x=Axis1,y=Axis2,col=Stage,shape=Species,size=Sex))+
  geom_point(show.legend=FALSE)+
  geom_hline(yintercept = 0, lty = 2) +
  geom_vline(xintercept = 0, lty = 2) +
  scale_size_manual(values=c(5,10))+
  scale_colour_manual(values=myCol)+
  scale_shape_manual(values=shapes)+
  theme_classic(base_size=16)+
  xlab(paste0(&quot;PC1 (&quot;, signif(pve_a$pve[1], 3), &quot;%)&quot;)) +
  ylab(paste0(&quot;PC2 (&quot;, signif(pve_a$pve[2], 3), &quot;%)&quot;))
p1

p2 &lt;- ggplot(full,aes(x=Axis3,y=Axis4,col=Stage,shape=Species,size=Sex))+
  geom_point(show.legend=FALSE)+
  geom_hline(yintercept = 0, lty = 2) +
  geom_vline(xintercept = 0, lty = 2) +
  scale_size_manual(values=c(5,10))+
  scale_colour_manual(values=myCol)+
  scale_shape_manual(values=shapes)+
  theme_classic(base_size=16)+
  xlab(paste0(&quot;PC3 (&quot;, signif(pve_a$pve[3], 3), &quot;%)&quot;)) +
  ylab(paste0(&quot;PC4 (&quot;, signif(pve_a$pve[4], 3), &quot;%)&quot;))
p2

pdf(&quot;plots/CG_pca_axes1.2.pdf&quot;, height=7, width=14)
theme_set(theme_classic(base_size = 16))
grid.arrange(p1,p2, nrow=1)
dev.off()

#legend
leg &lt;- ggplot(full,aes(x=Axis3,y=Axis4,col=Stage,shape=Species,size=Sex))+
  geom_point(show.legend=TRUE)+
  geom_hline(yintercept = 0, lty = 2) +
  geom_vline(xintercept = 0, lty = 2) +
  scale_size_manual(values=c(5,10))+
  scale_colour_manual(values=myCol)+
  scale_shape_manual(values=shapes)+
  theme_classic(base_size=16)+
  xlab(paste0(&quot;PC3 (&quot;, signif(pve_a$pve[3], 3), &quot;%)&quot;)) +
  ylab(paste0(&quot;PC4 (&quot;, signif(pve_a$pve[4], 3), &quot;%)&quot;))
leg

pdf(&quot;../plots/CG_pca_LEGEND.pdf&quot;, height=7, width=14)
theme_set(theme_classic(base_size = 16))
grid.arrange(leg, nrow=1)
dev.off()</pre>
== WGBS ==

=== Bin by CGI, GLMM ===

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/WGBS/dplyr/&quot;)

#import all the data and average by CGI
tab &lt;- read.table('D_Ko_C31_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C31_BL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C31_BL_M) &lt;- c('site','chr','start','end','numCs1','numTs1','Sites1');C31_BL_M$C31_BL_M &lt;- (C31_BL_M$numCs1/(C31_BL_M$numCs1+C31_BL_M$numTs1))
tab &lt;- read.table('D_Ko_C45_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_BL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_BL_F) &lt;- c('site','chr','start','end','numCs2','numTs2','Sites2');C45_BL_F$C45_BL_F &lt;- (C45_BL_F$numCs2/(C45_BL_F$numCs2+C45_BL_F$numTs2))
tab &lt;- read.table('S_Up_H59_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_BL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_BL_M) &lt;- c('site','chr','start','end','numCs3','numTs3','Sites3');H59_BL_M$H59_BL_M &lt;- (H59_BL_M$numCs3/(H59_BL_M$numCs3+H59_BL_M$numTs3))
tab &lt;- read.table('S_Up_H59_M_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_M_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_M_M) &lt;- c('site','chr','start','end','numCs4','numTs4','Sites4');H59_M_M$H59_M_M &lt;- (H59_M_M$numCs4/(H59_M_M$numCs4+H59_M_M$numTs4))
tab &lt;- read.table('S_Up_H60_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_BL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_BL_F) &lt;- c('site','chr','start','end','numCs5','numTs5','Sites5');H60_BL_F$H60_BL_F &lt;- (H60_BL_F$numCs5/(H60_BL_F$numCs5+H60_BL_F$numTs5))
tab &lt;- read.table('S_Up_H60_M_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_M_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_M_F) &lt;- c('site','chr','start','end','numCs6','numTs6','Sites6');H60_M_F$H60_M_F &lt;- (H60_M_F$numCs6/(H60_M_F$numCs6+H60_M_F$numTs6))

head(C31_BL_M)

master &lt;- Reduce(function(x,y) merge(x = x, y = y, by=c('site','chr','start','end')),
                 list(C31_BL_M,C45_BL_F,H59_BL_M,H59_M_M,H60_BL_F,H60_M_F))
head(master)

#calculate coverage and CpGs
cov &lt;- master %&gt;% mutate(minsite1 = ifelse(Sites1 &lt; 3, NA, Sites1),
                         minsite2 = ifelse(Sites2 &lt; 3, NA, Sites2),
                         minsite3 = ifelse(Sites3 &lt; 3, NA, Sites3),
                         minsite4 = ifelse(Sites4 &lt; 3, NA, Sites4),
                         minsite5 = ifelse(Sites5 &lt; 3, NA, Sites5),
                         minsite6 = ifelse(Sites6 &lt; 3, NA, Sites6))



#count NAs
colSums(is.na(cov))

#filter according to missingness
sitedat &lt;- cov[rowSums(is.na(cov[grepl('^minsite', names(cov))])) == 0, ]
nrow(sitedat)

master &lt;- sitedat

#define groups
master$MALE &lt;- rowMeans(master[grepl('_M$', names(master))],na.rm=TRUE) #M=1
master$FEMALE &lt;- rowMeans(master[grepl('_F$', names(master))],na.rm=TRUE) #F=0
master$BLOOD &lt;- rowMeans(master[grepl('_BL_', names(master))],na.rm=TRUE) #BL=0
master$SPLEEN &lt;- rowMeans(master[grepl('_M_', names(master))],na.rm=TRUE) #M=1
master$HOODED &lt;- rowMeans(master[grepl('^H', names(master))],na.rm=TRUE) #H=0
master$CARRION &lt;- rowMeans(master[grepl('^C', names(master))],na.rm=TRUE) #C=1
compare &lt;- master[,c(1,(ncol(master)-4-1):ncol(master))]
head(compare)
#now we must do pairwise comparisons between our 3 treatments for % 5mC
compare[8] &lt;- compare[2]-compare[3]
compare[9] &lt;- compare[4]-compare[5]
compare[10] &lt;- compare[6]-compare[7]
head(compare)
win_diff &lt;- compare[,c(8,9,10)]

#merge the total percent diff with the original frame
master_meth &lt;- cbind(master,win_diff)
colnames(master_meth)[colnames(master_meth) == 'MALE.1'] &lt;- 'sex_M.F'
colnames(master_meth)[colnames(master_meth) == 'BLOOD.1'] &lt;- 'tissue_BL.M'
colnames(master_meth)[colnames(master_meth) == 'HOODED.1'] &lt;- 'species_H.C'
nrow(master_meth)
names(master_meth)

#now subset for GLMM # C=1 H=0 / M=1 F=0 / BL=0 M=1
IND1 &lt;- as.data.frame(c(master_meth[1],&quot;C31&quot;,master_meth[5], master_meth[6],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND2 &lt;- as.data.frame(c(master_meth[1],&quot;C45&quot;,master_meth[9], master_meth[10],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND3 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[13], master_meth[14],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND4 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[17], master_meth[18],&quot;0&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND5 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[21], master_meth[22],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND6 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[25], master_meth[26],&quot;0&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))

head(IND4)
head(IND1)

#Bind them all together and order it by window
datmeth &lt;- rbind(IND1,IND2,IND3,IND4,IND5,IND6)
datmeth &lt;- datmeth[order(datmeth$CGI),]

head(datmeth)

#sanity check 
nrow(datmeth)/6

#save some files we might need later 
write.csv(datmeth,file=&quot;WGBS_GLMM_Input.csv&quot;,row.names=FALSE)
write.csv(master_meth,file=&quot;WGBS_FULL.csv&quot;,row.names=FALSE)

#now we can start here 
datmeth &lt;- read.csv(&quot;WGBS_GLMM_Input.csv&quot;,header=TRUE)
head(datmeth)
#set these as factor variables 
datmeth$Species &lt;- as.factor(datmeth$Species)
datmeth$Tissue &lt;- as.factor(datmeth$Tissue)
datmeth$Sex &lt;- as.factor(datmeth$Sex)
datmeth$ID &lt;- as.factor(datmeth$ID)

##### MODEL #####
DMA_GLMM_pValues &lt;- NULL
DMA_GLMM_Estimates &lt;- NULL
DMA_GLMM_SEs &lt;- NULL
DMA_GLMM_RandomEffect_Var &lt;- NULL
DMA_GLMM_DispersionStat &lt;- NULL
DMA_GLMM_Singular &lt;- NULL

for (i in seq(1, nrow(datmeth), by = 6)) {
  tryCatch({
    cat('\n Running model for CpG site: ',((i-1)/6))
    # model each site
    CpGsite &lt;- datmeth[i:(i + 5), ]
    # run the model and get the contrasts between sex, stage, species
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Sex + Tissue + Species + (1|ID/CGI) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+09)))
    DMA_GLMM_Singularf &lt;- isSingular(glmm_CpG)
    sum_mod &lt;- summary(glmm_CpG)
    
    ## 1 random effects ( (1 | ID) )
    GLMM_RandomEffect_Var &lt;- as.data.frame(VarCorr(glmm_CpG))$sdcor
    
    # calculate dispersion statistic (following AF Zuur, JM Hilbe
    # &amp; EN Ieno. A beginner’s guide to GLM and GLMM with R - a
    # frequentist and Bayesian perspective for
    # ecologists(Highland Statistics Ltd., 2013).)
    E1 &lt;- residuals(glmm_CpG)
    # number of parameters: fixed effects + 1 random effect
    p1 &lt;- length(fixef(glmm_CpG)) + 1
    GLMM_DispersionStat &lt;- sum(E1^2)/(nrow(CpGsite) - p1)
    # format estimates to add estimates for each loop to
    # estimates from previous loops
    
    # TO GET THE COLUMN HEADERS WITH THE CONTRASTS, check the excel file. First I look at the glmm_CpG_contrast object, which lists the models in order of 1-8, for this comparison. From here, make the 28 pairwise comparison charts, and substitute the 0 and 1 with your variables
    GLMM_Estimates_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,1], Tissue1 = sum_mod$coefficients[3,1], Species1 = sum_mod$coefficients[4,1])
    GLMM_SEs_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,2], Tissue1 = sum_mod$coefficients[3,2], Species1 = sum_mod$coefficients[4,2])
    GLMM_pValues_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,4], Tissue1 = sum_mod$coefficients[3,4], Species1 = sum_mod$coefficients[4,4])
    GLMM_RandomEffect_Var_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                      1]), ID = GLMM_RandomEffect_Var[1])
    GLMM_DispersionStat_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                    1]), DispStat = GLMM_DispersionStat)
    # add estimates for each loop to estimates from previous
    # loops
    DMA_GLMM_pValues &lt;- rbind(DMA_GLMM_pValues, GLMM_pValues_f)
    DMA_GLMM_Estimates &lt;- rbind(DMA_GLMM_Estimates, GLMM_Estimates_f)
    DMA_GLMM_SEs &lt;- rbind(DMA_GLMM_SEs, GLMM_SEs_f)
    DMA_GLMM_RandomEffect_Var &lt;- rbind(DMA_GLMM_RandomEffect_Var,GLMM_RandomEffect_Var_f)
    DMA_GLMM_DispersionStat &lt;- rbind(DMA_GLMM_DispersionStat,GLMM_DispersionStat_f)
    DMA_GLMM_Singular &lt;- rbind(DMA_GLMM_Singular,DMA_GLMM_Singularf)
    
    #Save errors to this output
  }, error=function(e){cat(unique(CpGsite[,1]), &quot;\n&quot;)
  }
  )
}

# 3. Save loop results
save(DMA_GLMM_pValues, DMA_GLMM_Estimates, DMA_GLMM_SEs, DMA_GLMM_RandomEffect_Var,
     DMA_GLMM_DispersionStat, DMA_GLMM_Singular, file = &quot;WGBS_DMA_CrowResults.RData&quot;)

hist(DMA_GLMM_pValues$Species1)
table(DMA_GLMM_Singular)['FALSE']

#should be the samem otherwise we have models that didn't converge 
nrow(DMA_GLMM_pValues)
nrow(datmeth)/6 </pre>
==== Volcanos ====

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(matrixStats)
library(LICORS)
library(viridis)
library(RColorBrewer)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/WGBS/dplyr&quot;)

load(&quot;WGBS_DMA_CrowResults.RData&quot;)

#check out some of the data
head(DMA_GLMM_Estimates)
dim(DMA_GLMM_Estimates)
head(DMA_GLMM_pValues)
head(DMA_GLMM_SEs)


#let's check out the distributio of 5mC contrasts
multi.hist(DMA_GLMM_Estimates[,2:4],nrow=1,ncol=NULL,breaks=21)

#plot dispersion boxplot, we will exclude any sites outside the 95% interval
disp_limits &lt;- hdi(DMA_GLMM_DispersionStat$DispStat,credMass = 0.95)
disp_limits

#lower        upper 
#4.228215e-02 3.381379e+03 

jpeg(&quot;plots/WGBS_dispersion_plot.jpg&quot;,units=&quot;in&quot;,res=300, height=6, width=5)
theme_set(theme_classic(base_size = 16))
dplot &lt;- ggplot(DMA_GLMM_DispersionStat,aes(y=DispStat,x=0))+geom_violin()+theme_classic(base_size = 16)+
  geom_jitter(width=0.1)+
  geom_text(aes(y = (disp_limits[2]+0.05),x=0.2, label = &quot;Upper Limit&quot;))+
  geom_hline(yintercept = disp_limits[2],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  geom_text(aes(y = (disp_limits[1]+0.05),x=0.2, label = &quot;Lower Limit&quot;))+
  geom_hline(yintercept = disp_limits[1],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  xlab(&quot;&quot;)+ylab(&quot;Dispersion Statistic&quot;)+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
grid.arrange(dplot)
dev.off()

#subset bad sites
bad_sites &lt;- subset(DMA_GLMM_DispersionStat,DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2])
nrow(bad_sites)

# calculate 10% differences, now we care about direction so we re-do this, since before it was absolute value 
meth &lt;- read.csv(&quot;WGBS_FULL.csv&quot;,header=TRUE)
head(meth)

names(DMA_GLMM_pValues) &lt;- c('site','pSex','pTissue','pSpecies')
names(DMA_GLMM_Estimates) &lt;- c('site','eSex','eTissue','eSpecies')
names(DMA_GLMM_SEs) &lt;- c('site','sSex','sTissue','sSpecies')
DMA_RF_S &lt;- cbind(DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular)
names(DMA_RF_S) &lt;- c('site','RandomEffect','IsSingular')
master_meth1 &lt;- merge(meth, DMA_GLMM_pValues, by='site')
master_meth2 &lt;- merge(master_meth1, DMA_GLMM_Estimates, by='site')
master_meth3 &lt;- merge(master_meth2, DMA_GLMM_SEs, by='site')
master_meth4 &lt;- merge(master_meth3, DMA_RF_S, by='site')
master_meth &lt;- merge(master_meth4, DMA_GLMM_DispersionStat, by='site')
head(master_meth)
nrow(master_meth)

#### Volcano with bonferonni
pthresh &lt;- (0.05/nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(pSex &lt; pthresh &amp; abs(sex_M.F) &gt; 0.1 &amp; pSpecies &gt; pthresh &amp; pTissue &gt; pthresh  , &quot;SEX&quot;, 
                                                   ifelse(pSpecies &lt; pthresh &amp; abs(species_H.C) &gt; 0.1 &amp; pSex &gt; pthresh &amp; pTissue &gt; pthresh,&quot;SPECIES&quot;,
                                                          ifelse(pTissue &lt; pthresh &amp; abs(tissue_BL.M) &gt; 0.1 &amp; pSex &gt; pthresh &amp; pSpecies &gt; pthresh ,&quot;TISSUE&quot;,
                                                                 ifelse(pSex &lt; pthresh &amp; pSpecies &lt; pthresh &amp; abs(sex_M.F) &gt; 0.1 &amp; abs(species_H.C) &gt; 0.1 &amp; pTissue &gt; pthresh ,&quot;SEX_SPECIES&quot;, &quot;OTHER&quot;)))))
master_meth %&gt;% dplyr::count(DMR)

### Or with FDR
master_meth$fSex &lt;- p.adjust(master_meth$pSex,method='BH',n=nrow(master_meth))
master_meth$fTissue &lt;- p.adjust(master_meth$pTissue,method='BH',n=nrow(master_meth))
master_meth$fSpecies &lt;- p.adjust(master_meth$pSpecies,method='BH',n=nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      #SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(fSex &lt; 0.01 &amp; abs(sex_M.F) &gt; 0.1 &amp; fSpecies &gt; 0.01 &amp; fTissue &gt; 0.01, &quot;SEX&quot;, 
                                                   ifelse(fSpecies &lt; 0.01 &amp; abs(species_H.C) &gt; 0.1 &amp; fSex &gt; 0.01 &amp; fTissue &gt; 0.01,&quot;SPECIES&quot;,
                                                          ifelse(fTissue &lt; 0.01 &amp; abs(tissue_BL.M) &gt; 0.1 &amp; fSex &gt; 0.01 &amp; fSpecies &gt; 0.01 ,&quot;TISSUE&quot;,
                                                                 ifelse(fSex &lt; 0.01 &amp; fSpecies &lt; 0.01 &amp; abs(sex_M.F) &gt; 0.1 &amp; abs(species_H.C) &gt; 0.1 &amp; fTissue &gt; 0.01 ,&quot;SEX_SPECIES&quot;, &quot;OTHER&quot;)))))

master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
master_meth &lt;- subset(master_meth, SING == 'OKAY' &amp; OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

#save for manhattan
write.csv(master_meth,file='WGBS_Manhattan.csv')

#hunt for colors
#display.brewer.all(colorblindFriendly=TRUE) 
cols &lt;- brewer.pal(5,'Set2')
#cols &lt;- inferno(5)
shapes &lt;- c(1,15,16,17,18)

#plot sex
p1 &lt;- ggplot(master_meth, aes(x=sex_M.F,y=threshold(-log10(pSex),max=quantile(-log10(pSex),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;OTHER&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;TISSUE&quot;=cols[2]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.1,0.1),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Sex&quot;)+
  ylab('-log10(p)')
p1

#plot species
p2 &lt;- ggplot(master_meth, aes(x=species_H.C,y=threshold(-log10(pSpecies),max=quantile(-log10(pSpecies),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;OTHER&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;TISSUE&quot;=cols[2]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.1,0.1),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Species&quot;)+
  ylab('-log10(p)')
p2

#plot tissue
p3 &lt;- ggplot(master_meth, aes(x=tissue_BL.M,y=threshold(-log10(pTissue),max=quantile(-log10(pTissue),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;OTHER&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;TISSUE&quot;=cols[2]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.1,0.1),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Tissue&quot;)+
  ylab('-log10(p)')
p3


#save it 
jpeg(&quot;plots/WGBS_DMA_Volcano.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=12)
theme_set(theme_classic(base_size = 16))
grid.arrange(p1,p2,p3,nrow=1)
dev.off()

#save file
write.csv(master_meth,file='WGBS_DMA_DMRS.csv',row.names=FALSE)</pre>
== Overlap CG-WGBS ==

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/all&quot;)

library(methylKit)
library(karyoploteR)
library(stringr)
library(dplyr)

#import truth set DMRs
cg &lt;- read.csv('CG_DMA_DMRs_FDR.csv',header=TRUE)
wgbs &lt;- read.csv('WGBS_DMA_DMRS_FDR.csv',header=TRUE)

cg$experiment &lt;- 'CG'
wgbs$experiment &lt;- 'WGBS'

cg_ol &lt;- cg[,c('site','DMR','experiment')]
wgbs_ol &lt;- wgbs[,c('site','DMR','experiment')]

truth_dmr &lt;- merge(wgbs_ol,cg_ol,by='site')
truth_dmr %&gt;% dplyr::count(DMR.x,DMR.y)

write.csv(truth_dmr,file='Overlap.csv',row.names=FALSE)</pre>
== HZ ==

=== Bin by CGI, GLMM ===

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/HZ/dplyr/&quot;)

#import all the data and average by CGI

tab &lt;- read.table('D_Ba_H02_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H02 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H02) &lt;- c('site','chr','start','end','numCs1','numTs1','Sites1');D_Ba_H02$D_Ba_H02 &lt;- (D_Ba_H02$numCs1/(D_Ba_H02$numCs1+D_Ba_H02$numTs1))
tab &lt;- read.table('D_Ba_H09_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H09 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H09) &lt;- c('site','chr','start','end','numCs2','numTs2','Sites2');D_Ba_H09$D_Ba_H09 &lt;- (D_Ba_H09$numCs2/(D_Ba_H09$numCs2+D_Ba_H09$numTs2))
tab &lt;- read.table('D_Ba_H19_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H19 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H19) &lt;- c('site','chr','start','end','numCs3','numTs3','Sites3');D_Ba_H19$D_Ba_H19 &lt;- (D_Ba_H19$numCs3/(D_Ba_H19$numCs3+D_Ba_H19$numTs3))
tab &lt;- read.table('D_Ba_H21_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H21 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H21) &lt;- c('site','chr','start','end','numCs4','numTs4','Sites4');D_Ba_H21$D_Ba_H21 &lt;- (D_Ba_H21$numCs4/(D_Ba_H21$numCs4+D_Ba_H21$numTs4))
tab &lt;- read.table('D_Hi_C03_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Hi_C03 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Hi_C03) &lt;- c('site','chr','start','end','numCs5','numTs5','Sites5');D_Hi_C03$D_Hi_C03 &lt;- (D_Hi_C03$numCs5/(D_Hi_C03$numCs5+D_Hi_C03$numTs5))
tab &lt;- read.table('D_Ko_C22_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ko_C22 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ko_C22) &lt;- c('site','chr','start','end','numCs6','numTs6','Sites6');D_Ko_C22$D_Ko_C22 &lt;- (D_Ko_C22$numCs6/(D_Ko_C22$numCs6+D_Ko_C22$numTs6))
tab &lt;- read.table('D_Ko_C40_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ko_C40 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ko_C40) &lt;- c('site','chr','start','end','numCs7','numTs7','Sites7');D_Ko_C40$D_Ko_C40 &lt;- (D_Ko_C40$numCs7/(D_Ko_C40$numCs7+D_Ko_C40$numTs7))
tab &lt;- read.table('D_Ko_C42_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ko_C42 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ko_C42) &lt;- c('site','chr','start','end','numCs8','numTs8','Sites8');D_Ko_C42$D_Ko_C42 &lt;- (D_Ko_C42$numCs8/(D_Ko_C42$numCs8+D_Ko_C42$numTs8))
tab &lt;- read.table('D_Ku_H02_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ku_H02 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ku_H02) &lt;- c('site','chr','start','end','numCs9','numTs9','Sites9');D_Ku_H02$D_Ku_H02 &lt;- (D_Ku_H02$numCs9/(D_Ku_H02$numCs9+D_Ku_H02$numTs9))
tab &lt;- read.table('D_Lo_C19_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Lo_C19 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Lo_C19) &lt;- c('site','chr','start','end','numCs10','numTs10','Sites10');D_Lo_C19$D_Lo_C19 &lt;- (D_Lo_C19$numCs10/(D_Lo_C19$numCs10+D_Lo_C19$numTs10))
tab &lt;- read.table('D_Lo_C20_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Lo_C20 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Lo_C20) &lt;- c('site','chr','start','end','numCs11','numTs11','Sites11');D_Lo_C20$D_Lo_C20 &lt;- (D_Lo_C20$numCs11/(D_Lo_C20$numCs11+D_Lo_C20$numTs11))
tab &lt;- read.table('D_Ne_Y03_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y03 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y03) &lt;- c('site','chr','start','end','numCs12','numTs12','Sites12');D_Ne_Y03$D_Ne_Y03 &lt;- (D_Ne_Y03$numCs12/(D_Ne_Y03$numCs12+D_Ne_Y03$numTs12))
tab &lt;- read.table('D_Ne_Y14_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y14 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y14) &lt;- c('site','chr','start','end','numCs13','numTs13','Sites13');D_Ne_Y14$D_Ne_Y14 &lt;- (D_Ne_Y14$numCs13/(D_Ne_Y14$numCs13+D_Ne_Y14$numTs13))
tab &lt;- read.table('D_Ne_Y31_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y31 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y31) &lt;- c('site','chr','start','end','numCs14','numTs14','Sites14');D_Ne_Y31$D_Ne_Y31 &lt;- (D_Ne_Y31$numCs14/(D_Ne_Y31$numCs14+D_Ne_Y31$numTs14))
tab &lt;- read.table('D_Ne_Y36_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y36 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y36) &lt;- c('site','chr','start','end','numCs15','numTs15','Sites15');D_Ne_Y36$D_Ne_Y36 &lt;- (D_Ne_Y36$numCs15/(D_Ne_Y36$numCs15+D_Ne_Y36$numTs15))
tab &lt;- read.table('D_Ne_Y40_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y40 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y40) &lt;- c('site','chr','start','end','numCs16','numTs16','Sites16');D_Ne_Y40$D_Ne_Y40 &lt;- (D_Ne_Y40$numCs16/(D_Ne_Y40$numCs16+D_Ne_Y40$numTs16))
tab &lt;- read.table('D_Ne_Y42_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y42 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y42) &lt;- c('site','chr','start','end','numCs17','numTs17','Sites17');D_Ne_Y42$D_Ne_Y42 &lt;- (D_Ne_Y42$numCs17/(D_Ne_Y42$numCs17+D_Ne_Y42$numTs17))
tab &lt;- read.table('D_Rb_Y07_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y07 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y07) &lt;- c('site','chr','start','end','numCs18','numTs18','Sites18');D_Rb_Y07$D_Rb_Y07 &lt;- (D_Rb_Y07$numCs18/(D_Rb_Y07$numCs18+D_Rb_Y07$numTs18))
tab &lt;- read.table('D_Rb_Y08_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y08 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y08) &lt;- c('site','chr','start','end','numCs19','numTs19','Sites19');D_Rb_Y08$D_Rb_Y08 &lt;- (D_Rb_Y08$numCs19/(D_Rb_Y08$numCs19+D_Rb_Y08$numTs19))
tab &lt;- read.table('D_Rb_Y13_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y13 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y13) &lt;- c('site','chr','start','end','numCs20','numTs20','Sites20');D_Rb_Y13$D_Rb_Y13 &lt;- (D_Rb_Y13$numCs20/(D_Rb_Y13$numCs20+D_Rb_Y13$numTs20))
tab &lt;- read.table('D_Rb_Y15_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y15 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y15) &lt;- c('site','chr','start','end','numCs21','numTs21','Sites21');D_Rb_Y15$D_Rb_Y15 &lt;- (D_Rb_Y15$numCs21/(D_Rb_Y15$numCs21+D_Rb_Y15$numTs21))
tab &lt;- read.table('S_Up_H77_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);S_Up_H77 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(S_Up_H77) &lt;- c('site','chr','start','end','numCs22','numTs22','Sites22');S_Up_H77$S_Up_H77 &lt;- (S_Up_H77$numCs22/(S_Up_H77$numCs22+S_Up_H77$numTs22))
tab &lt;- read.table('S_Up_H80_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);S_Up_H80 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(S_Up_H80) &lt;- c('site','chr','start','end','numCs23','numTs23','Sites23');S_Up_H80$S_Up_H80 &lt;- (S_Up_H80$numCs23/(S_Up_H80$numCs23+S_Up_H80$numTs23))
tab &lt;- read.table('S_Up_H81_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 10); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);S_Up_H81 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(S_Up_H81) &lt;- c('site','chr','start','end','numCs24','numTs24','Sites24');S_Up_H81$S_Up_H81 &lt;- (S_Up_H81$numCs24/(S_Up_H81$numCs24+S_Up_H81$numTs24))

head(S_Up_H81)

master &lt;- Reduce(function(x,y) merge(x = x, y = y, by=c('site','chr','start','end')),
                 list(D_Ba_H02,D_Ba_H09,D_Ba_H19,D_Ba_H21,D_Hi_C03,D_Ko_C22,D_Ko_C40,D_Ko_C42,D_Ku_H02,D_Lo_C19,D_Lo_C20,D_Ne_Y03,D_Ne_Y14,D_Ne_Y31,D_Ne_Y36,D_Ne_Y40,D_Ne_Y42,D_Rb_Y07,D_Rb_Y08,D_Rb_Y13,D_Rb_Y15,S_Up_H77,S_Up_H80,S_Up_H81))
head(master)

#calculate coverage and CpGs
cov &lt;- master %&gt;% mutate(minsite1 = ifelse(Sites1 &lt; 3, NA, Sites1),
                         minsite2 = ifelse(Sites2 &lt; 3, NA, Sites2),
                         minsite3 = ifelse(Sites3 &lt; 3, NA, Sites3),
                         minsite4 = ifelse(Sites4 &lt; 3, NA, Sites4),
                         minsite5 = ifelse(Sites5 &lt; 3, NA, Sites5),
                         minsite6 = ifelse(Sites6 &lt; 3, NA, Sites6),
                         minsite7 = ifelse(Sites7 &lt; 3, NA, Sites7),
                         minsite8 = ifelse(Sites8 &lt; 3, NA, Sites8),
                         minsite9 = ifelse(Sites9 &lt; 3, NA, Sites9),
                         minsite10 = ifelse(Sites10 &lt; 3, NA, Sites10),
                         minsite11 = ifelse(Sites11 &lt; 3, NA, Sites11),
                         minsite12 = ifelse(Sites12 &lt; 3, NA, Sites12),
                         minsite13 = ifelse(Sites13 &lt; 3, NA, Sites13),
                         minsite14 = ifelse(Sites14 &lt; 3, NA, Sites14),
                         minsite15 = ifelse(Sites15 &lt; 3, NA, Sites15),
                         minsite16 = ifelse(Sites16 &lt; 3, NA, Sites16),
                         minsite17 = ifelse(Sites17 &lt; 3, NA, Sites17),
                         minsite18 = ifelse(Sites18 &lt; 3, NA, Sites18),
                         minsite19 = ifelse(Sites19 &lt; 3, NA, Sites19),
                         minsite20 = ifelse(Sites20 &lt; 3, NA, Sites20),
                         minsite21 = ifelse(Sites21 &lt; 3, NA, Sites21),
                         minsite22 = ifelse(Sites22 &lt; 3, NA, Sites22),
                         minsite23 = ifelse(Sites23 &lt; 3, NA, Sites23),
                         minsite24 = ifelse(Sites24 &lt; 3, NA, Sites24))

#count NAs
colSums(is.na(cov))

#filter according to missingness
sitedat &lt;- cov[rowSums(is.na(cov[grepl('^minsite', names(cov))])) &lt;= 4, ]
nrow(cov)
nrow(sitedat)

master &lt;- sitedat
nrow(master)

#count NAs
colSums(is.na(master))

#define groups
master$HOODED &lt;- rowMeans(master[grepl('^S_Up', names(master))],na.rm=TRUE)
master$CARRION &lt;- rowMeans(master[grepl('^D_Ko', names(master))],na.rm=TRUE)

compare &lt;- master[,c(1,(ncol(master)-0-1):ncol(master))]
head(compare)
#now we must do 15 pairwise comparisons between our 3 treatments for % 5mC, keep track of this in the template file
compare[4] &lt;- compare[2]-compare[3]

head(compare)
win_diff &lt;- compare[,c(4)]

#merge the total percent diff with the original frame
master_meth &lt;- cbind(master,win_diff)
colnames(master_meth)[colnames(master_meth) == 'win_diff'] &lt;- 'species_H.C'
nrow(master_meth)
names(master_meth)

#create the GLMM input #C=0 Hybrid=1 H=2 / Years / etc
IND1 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H02&quot;,master_meth[5], master_meth[6],&quot;0.574193&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND2 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H09&quot;,master_meth[9], master_meth[10],&quot;0.5466904&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND3 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H19&quot;,master_meth[13], master_meth[14],&quot;0.4055915&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND4 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H21&quot;,master_meth[17], master_meth[18],&quot;0.5258975&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND5 &lt;- as.data.frame(c(master_meth[1],&quot;D_Hi_C03&quot;,master_meth[21], master_meth[22],&quot;0.4279232&quot;,&quot;1&quot;,&quot;466&quot;,&quot;1&quot;,&quot;Hi_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND6 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ko_C22&quot;,master_meth[25], master_meth[26],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;Ko_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND7 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ko_C40&quot;,master_meth[29], master_meth[30],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;Ko_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND8 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ko_C42&quot;,master_meth[33], master_meth[34],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;Ko_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND9 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ku_H02&quot;,master_meth[37], master_meth[38],&quot;0.7063256&quot;,&quot;0&quot;,&quot;589&quot;,&quot;1&quot;,&quot;Ku_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND10 &lt;- as.data.frame(c(master_meth[1],&quot;D_Lo_C19&quot;,master_meth[41], master_meth[42],&quot;0.2260644&quot;,&quot;1&quot;,&quot;440&quot;,&quot;1&quot;,&quot;Lo_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND11 &lt;- as.data.frame(c(master_meth[1],&quot;D_Lo_C20&quot;,master_meth[45], master_meth[46],&quot;0.3307552&quot;,&quot;1&quot;,&quot;440&quot;,&quot;1&quot;,&quot;Lo_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND12 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y03&quot;,master_meth[49], master_meth[50],&quot;0.4295311&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND13 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y14&quot;,master_meth[53], master_meth[54],&quot;0.6457692&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND14 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y31&quot;,master_meth[57], master_meth[58],&quot;0.7511844&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND15 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y36&quot;,master_meth[61], master_meth[62],&quot;0.6105241&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND16 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y40&quot;,master_meth[65], master_meth[66],&quot;0.6080164&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND17 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y42&quot;,master_meth[69], master_meth[70],&quot;0.5530574&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND18 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y07&quot;,master_meth[73], master_meth[74],&quot;0.6271691&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND19 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y08&quot;,master_meth[77], master_meth[78],&quot;0.5266439&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND20 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y13&quot;,master_meth[81], master_meth[82],&quot;0.7101439&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND21 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y15&quot;,master_meth[85], master_meth[86],&quot;0.4707096&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND22 &lt;- as.data.frame(c(master_meth[1],&quot;S_Up_H77&quot;,master_meth[89], master_meth[90],&quot;1&quot;,&quot;1&quot;,&quot;1476&quot;,&quot;2&quot;,&quot;Up_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND23 &lt;- as.data.frame(c(master_meth[1],&quot;S_Up_H80&quot;,master_meth[93], master_meth[94],&quot;1&quot;,&quot;1&quot;,&quot;1476&quot;,&quot;2&quot;,&quot;Up_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND24 &lt;- as.data.frame(c(master_meth[1],&quot;S_Up_H81&quot;,master_meth[97], master_meth[98],&quot;1&quot;,&quot;1&quot;,&quot;1476&quot;,&quot;2&quot;,&quot;Up_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))

head(IND4)
head(IND24)

#Bind them all together and order it by window
datmeth &lt;- rbind(IND1,IND2,IND3,IND4,IND5,IND6,IND7,IND8,IND9,IND10,IND11,IND12,IND13,IND14,IND15,IND16,IND17,IND18,IND19,IND20,IND21,IND22,IND23,IND24)
datmeth &lt;- datmeth[order(datmeth$CGI),]

head(datmeth)

#sanity check 
nrow(datmeth)/24

#plot correlations between variables
dats &lt;- read.table(&quot;metadata_hz.txt&quot;,header=TRUE)
text &lt;- cor(dats$Hybrid_Index,dats$Distance,method='pearson')
ggplot(dats,aes(x=Hybrid_Index,y=Distance,col=Hybrid_Index))+geom_point()+theme_classic()+
  scale_color_gradient(low='black',high='grey90')+
  geom_smooth(method='lm')+ggtitle('Distance to Hybrid Index')+
  geom_text(aes(-Inf,Inf),label=paste(&quot;Pearson cor = &quot;,round(text,2)),vjust=2,hjust=-.15,cex=4,col='black')


#save some files we might need later 
write.csv(datmeth,file=&quot;HZ_GLMM_Input.csv&quot;,row.names=FALSE)
write.csv(master_meth,file=&quot;HZ_FULL.csv&quot;,row.names=FALSE)

#now we can start here 
datmeth &lt;- read.csv(&quot;HZ_GLMM_Input.csv&quot;,header=TRUE)
head(datmeth)
nrow(datmeth)/24
#set these as factor variables 
datmeth$Hybrid_Index &lt;- as.numeric(datmeth$Hybrid_Index)
datmeth$Year &lt;- as.factor(datmeth$Year)
datmeth$Locality &lt;- as.factor(datmeth$Locality)
datmeth$ID &lt;- as.factor(datmeth$ID)
datmeth$Classification &lt;- as.factor(datmeth$Classification)

#and scale the continuous variables
datmeth &lt;- datmeth %&gt;% mutate_at(c('Hybrid_Index', 'Distance'), ~(scale(.) %&gt;% as.vector))

##### MODEL #####
DMA_GLMM_pValues &lt;- NULL
DMA_GLMM_Estimates &lt;- NULL
DMA_GLMM_RandomEffect_Var &lt;- NULL
DMA_GLMM_SEs &lt;- NULL
DMA_GLMM_DispersionStat &lt;- NULL
DMA_GLMM_Singular &lt;- NULL

for (i in seq(1, nrow(datmeth), by = 24)) {
  tryCatch({
    cat('\n Running model for CpG site: ',((i-1)/24))
    # model each site
    CpGsite &lt;- datmeth[i:(i + 23), ]
    # run the model examining relationship between hybrid index and locality 
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Hybrid_Index + (1|Locality/CGI) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+08)))
    DMA_GLMM_Singularf &lt;- isSingular(glmm_CpG)
    sum_mod &lt;- summary(glmm_CpG)
    
    ## For random effect 
    GLMM_RandomEffect_Var &lt;- as.data.frame(VarCorr(glmm_CpG))$sdcor
    
    # calculate dispersion statistic (following AF Zuur, JM Hilbe
    # &amp; EN Ieno. A beginner’s guide to GLM and GLMM with R - a
    # frequentist and Bayesian perspective for
    # ecologists(Highland Statistics Ltd., 2013).)
    E1 &lt;- residuals(glmm_CpG)
    # number of parameters: fixed effects + 1 random effect
    p1 &lt;- length(fixef(glmm_CpG)) + 1
    GLMM_DispersionStat &lt;- sum(E1^2)/(nrow(CpGsite) - p1)
    # format estimates to add estimates for each loop to
    # estimates from previous loops
    
    GLMM_pValues_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Hybrid_Index = sum_mod$coefficients[2,4])
    GLMM_SEs_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Hybrid_Index = sum_mod$coefficients[2,2])
    GLMM_Estimates_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Hybrid_Index = sum_mod$coefficients[2,1])
    GLMM_DispersionStat_f &lt;- data.frame(site = as.character(CpGsite[1,1]), DispStat = GLMM_DispersionStat)
    GLMM_RandomEffect_Var_f &lt;- data.frame(site = as.character(CpGsite[1,1]), ID = GLMM_RandomEffect_Var[1])
    # add estimates for each loop to estimates from previous
    # loops
    DMA_GLMM_pValues &lt;- rbind(DMA_GLMM_pValues, GLMM_pValues_f)
    DMA_GLMM_Estimates &lt;- rbind(DMA_GLMM_Estimates, GLMM_Estimates_f)
    DMA_GLMM_SEs &lt;- rbind(DMA_GLMM_SEs, GLMM_SEs_f)
    DMA_GLMM_RandomEffect_Var &lt;- rbind(DMA_GLMM_RandomEffect_Var,GLMM_RandomEffect_Var_f)
    DMA_GLMM_DispersionStat &lt;- rbind(DMA_GLMM_DispersionStat,GLMM_DispersionStat_f)
    DMA_GLMM_Singular &lt;- rbind(DMA_GLMM_Singular,DMA_GLMM_Singularf)
    
    #Save errors to this output
  }, error=function(e){cat(unique(CpGsite[,1]), &quot;\n&quot;)
  }
  )
}

# 3. Save loop results
save(DMA_GLMM_pValues, DMA_GLMM_Estimates, DMA_GLMM_SEs, 
     DMA_GLMM_DispersionStat, DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular, file = &quot;HZ_DMA_CrowResults.RData&quot;)

#should be the samem otherwise we have models that didn't converge 
nrow(DMA_GLMM_pValues)
nrow(datmeth)/24
</pre>
==== Volcanos ====

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(LICORS)
library(RColorBrewer)
library(viridis)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/HZ/dplyr/&quot;)

load(&quot;HZ_DMA_CrowResults.RData&quot;)

#check out some of the data
head(DMA_GLMM_Estimates)
dim(DMA_GLMM_Estimates)
head(DMA_GLMM_pValues)
head(DMA_GLMM_SEs)


#let's check out the distributio of 5mC contrasts
multi.hist(DMA_GLMM_Estimates[,2:2],nrow=NULL,ncol=NULL,breaks=21)

#plot dispersion boxplot, we will exclude any sites outside the 95% interval
disp_limits &lt;- hdi(DMA_GLMM_DispersionStat$DispStat,credMass = 0.99)
disp_limits

#lower       upper 
#0.002117176 0.459554568

jpeg(&quot;plots/HZ_dispersion_plot.jpg&quot;,units=&quot;in&quot;,res=300, height=6, width=5)
theme_set(theme_classic(base_size = 16))
dplot &lt;- ggplot(DMA_GLMM_DispersionStat,aes(y=DispStat,x=0))+geom_violin()+theme_classic(base_size = 16)+
  geom_jitter(width=0.1)+
  geom_text(aes(y = (disp_limits[2]+0.05),x=0.2, label = &quot;Upper Limit&quot;))+
  geom_hline(yintercept = disp_limits[2],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  geom_text(aes(y = (disp_limits[1]+0.05),x=0.2, label = &quot;Lower Limit&quot;))+
  geom_hline(yintercept = disp_limits[1],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  xlab(&quot;&quot;)+ylab(&quot;Dispersion Statistic&quot;)+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
grid.arrange(dplot)
dev.off()

#subset bad sites
bad_sites &lt;- subset(DMA_GLMM_DispersionStat,DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2])
nrow(bad_sites)

# calculate 10% differences, now we care about direction so we re-do this, since before it was absolute value 
meth &lt;- read.csv(&quot;HZ_FULL.csv&quot;,header=TRUE)
dim(meth)
head(meth)

names(DMA_GLMM_pValues) &lt;- c('site','pHI')
names(DMA_GLMM_Estimates) &lt;- c('site','eHI')
names(DMA_GLMM_SEs) &lt;- c('site','sHI')
DMA_RF_S &lt;- cbind(DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular)
names(DMA_RF_S) &lt;- c('site','RandomEffect','IsSingular')
master_meth1 &lt;- merge(meth, DMA_GLMM_pValues, by='site')
master_meth2 &lt;- merge(master_meth1, DMA_GLMM_Estimates, by='site')
master_meth3 &lt;- merge(master_meth2, DMA_GLMM_SEs, by='site')
master_meth4 &lt;- merge(master_meth3, DMA_GLMM_DispersionStat, by='site')
master_meth &lt;- merge(master_meth4, DMA_RF_S, by='site')
head(master_meth)
nrow(master_meth)


#### Volcano with bonferonni
pthresh &lt;- (0.05/nrow(meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(pHI &lt; pthresh &amp; abs(species_H.C) &gt; 0.1 , &quot;SPECIES&quot;,&quot;UNKNOWN&quot;))

#remove overdispersed sites 
master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
master_meth &lt;- subset(master_meth, SING == 'OKAY' &amp; OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

#also examine contrast
#now assign based on which contrasts were significant 
master_meth &lt;- master_meth %&gt;% mutate(BioVar = ifelse((pC.I &lt;= pthresh | pC.H &lt;= pthresh | pI.H &lt;= pthresh) &amp; abs(species_H.C) &gt; 0.1 &amp; DMR == &quot;SPECIES&quot;, &quot;CONTRASTED&quot;,
                                                      ifelse(DMR == &quot;PRECIPITATION&quot;, &quot;PRECIPITATION&quot;,&quot;OTHER&quot;)))
master_meth %&gt;% dplyr::count(BioVar)


### Or with FDR, first select sites that are significant for each variable, but non-significant for the other variables 
master_meth$fHI &lt;- p.adjust(master_meth$pHI,method='BH',n=nrow(master_meth))

master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse((fHI &lt; 0.01) &amp; (abs(species_H.C) &gt; 0.1) , &quot;SPECIES&quot;,&quot;OTHER&quot;))

#remove overdispersed sites 
master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
master_meth &lt;- subset(master_meth, SING == 'OKAY' &amp; OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)


#save for manhattan
write.csv(master_meth,file='HZ_Manhattan.csv')

#hunt for colors
display.brewer.all(colorblindFriendly=TRUE) 
cols &lt;- brewer.pal(5,'Paired')
#cols &lt;- viridis(7)
shapes &lt;- c(16,1)

#plot SPECIES
p1 &lt;- ggplot(master_meth, aes(x=species_H.C, y=threshold(-log10(pHI),max=quantile(-log10(pHI),0.99))))+
  geom_point(aes(colour = DMR,shape=DMR), size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SPECIES&quot;=cols[3]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  ggtitle(&quot;Species&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),lwd=1,lty=2,col=&quot;maroon&quot;)+
  geom_vline(xintercept=c(-0.1,0.1),lwd=1.5,col=&quot;black&quot;)+
  ylab('-log10(P)')
p1

#save it 
jpeg(&quot;plots/HZ_DMA_Volcano.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(p1,nrow=1)
dev.off()

#save file
write.csv(master_meth,file='HZ_DMA_DMRS.csv',row.names=FALSE)</pre>
=== Plot Intermediacy ===

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(LICORS)
library(RColorBrewer)
library(viridis)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/HZ/dplyr/&quot;)

#save for manhattan
hz &lt;- read.csv('HZ_Manhattan.csv',header=TRUE)
metadat &lt;- read.table('metadata_hz.txt',header=TRUE)

hz_dmrs &lt;- hz[grepl('SPECIES',hz$DMR),]
hz_dats &lt;- hz_dmrs[grepl('^site$|^S_|^D_',names(hz_dmrs))]

hz.m1 = melt(hz_dats, id.vars = 'site',
             measure.vars = names(hz[grepl('^S_|^D_',names(hz_dmrs))]))

colnames(metadat)[colnames(metadat) == 'Library'] &lt;- 'variable'
hzp &lt;- merge(hz.m1,metadat)

hzp$Classification &lt;- as.factor(hzp$Classification)
ggplot(hzp,aes(x=Classification,y=value,fill=Classification))+
  geom_boxplot(varwidth=FALSE,alpha=0.75)+
  stat_boxplot(geom ='errorbar', width = 0.6) +
  theme_classic()+facet_grid(.~site)+
  scale_fill_manual(values=c('black','purple','grey60'))</pre>
=== PCA ===

<pre class="">library(vegan)
library(adegenet)
library(cluster)
library(viridis)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/HZ/dplyr&quot;)

hyb &lt;- read.csv(&quot;HZ_FULL.csv&quot;,header=TRUE)

#grab only the % methylation columns
hyb_use &lt;- hyb[grepl('^site$|^D_|^S_',names(hyb))]

#transpose so that each row is a sample, and each column is a locus
tmydf = setNames(data.frame(t(hyb_use[,-1])), hyb_use[,1])

f1 &lt;- function(vec) {
  m &lt;- mean(vec, na.rm = TRUE)
  vec[is.na(vec)] &lt;- m
  return(vec)
}

Y = apply(tmydf,2,f1)

pca &lt;-dudi.pca(Y,nf=20,scannf=FALSE,center=TRUE,scale=FALSE)
pcas &lt;- as.data.frame(pca$li,row.names = NULL)
pcas$Library &lt;- row.names(pcas)

#import metadata
variables &lt;- read.table(&quot;metadata_hz.txt&quot;,header=TRUE)

#gather metadata
full &lt;- merge(pcas, variables, by = 'Library')

# scatter plot PCA
pve_a &lt;- data.frame(PC = 1:23, pve = pca$eig/sum(pca$eig)*100)


#plot 
shapes &lt;- c(17,15,16)
p1 &lt;- ggplot(full,aes(x=Axis1,y=Axis2,col=Hybrid_Index,shape=species))+
  geom_point(size=5,show.legend=FALSE)+
  geom_hline(yintercept = 0, lty = 2) +
  geom_vline(xintercept = 0, lty = 2) +
  scale_colour_gradient(low=&quot;black&quot;,high=&quot;grey90&quot;)+
  scale_shape_manual(values=shapes,name=&quot;Subspecies&quot;)+
  theme_classic(base_size=16)+
  xlab(paste0(&quot;PC1 (&quot;, signif(pve_a$pve[1], 3), &quot;%)&quot;)) +
  ylab(paste0(&quot;PC2 (&quot;, signif(pve_a$pve[2], 3), &quot;%)&quot;))
p1

p2 &lt;- ggplot(full,aes(x=Axis3,y=Axis4,col=Hybrid_Index,shape=species))+
  geom_point(size=5,show.legend=FALSE)+
  geom_hline(yintercept = 0, lty = 2) +
  geom_vline(xintercept = 0, lty = 2) +
  scale_colour_gradient(low=&quot;black&quot;,high=&quot;grey90&quot;)+
  scale_shape_manual(values=shapes,name=&quot;Subspecies&quot;)+
  theme_classic(base_size=16)+
  xlab(paste0(&quot;PC3 (&quot;, signif(pve_a$pve[3], 3), &quot;%)&quot;)) +
  ylab(paste0(&quot;PC4 (&quot;, signif(pve_a$pve[4], 3), &quot;%)&quot;))
p2

pdf(&quot;plots/HZ_pca_axes1.2.pdf&quot;, height=7, width=14)
theme_set(theme_classic(base_size = 16))
grid.arrange(p1,p2, nrow=1)
dev.off()

write.csv(pca$li[,1:10],file=&quot;HZ_loadings.csv&quot;)</pre>
== Ultimate Overlap ==

=== HZ-CG-WGBS ===

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)

#import truth set DMRs
truth_dmr &lt;- read.csv('Overlap.csv',header=TRUE)
head(truth_dmr)

hz &lt;- read.csv('HZ_DMA_DMRs.csv',header=TRUE)


hz_cg &lt;- merge(hz,truth_dmr,by='site')

nrow(hz_cg)
hz_cg %&gt;% dplyr::count(DMR)
hz_cg[grepl('CONTRASTED',hz_cg$BioVar),]
hz_cg[grepl('PRECIPITATION',hz_cg$BioVar),]

hz_cg_min &lt;- hz_cg[,c('site','BioSum','BioVar')]

hz_cg_min &lt;- hz_cg_min %&gt;% mutate(Overlap = ifelse(BioSum == &quot;SPECIES_SPECIES&quot; &amp; BioVar == &quot;CONTRASTED&quot;, &quot;SPECIES&quot;,
                                                   ifelse(BioSum == &quot;OTHER_OTHER&quot; &amp; BioVar == &quot;PRECIPITATION&quot;, &quot;ENVIRONMENT&quot;,
                                                          ifelse(BioSum == &quot;SEX_SEX&quot; &amp; BioVar == &quot;OTHER&quot; , &quot;SEX&quot;,
                                                                 ifelse(BioSum == &quot;OTHER_STAGE&quot; &amp; BioVar == &quot;OTHER&quot; , &quot;STAGE&quot;,
                                                                        ifelse(BioSum == &quot;TISSUE_OTHER&quot; &amp; BioVar == &quot;OTHER&quot; , &quot;TISSUE&quot;,
                                                                               ifelse(BioSum == &quot;SPECIES_SPECIES&quot; &amp; BioVar == &quot;OTHER&quot; , &quot;SPECIES_PRE&quot;,
                                                                                      ifelse(BioVar == &quot;CONTRASTED&quot; , &quot;SPECIES_POST&quot;,&quot;UNKNOWN&quot;))))))))
hz_cg_min %&gt;% dplyr::count(Overlap)
head(hz_cg_min)

#re-form model 
datmeth &lt;- read.csv(&quot;HZ_GLMM_Input.csv&quot;,header=TRUE)
datmeth$site &lt;- datmeth$CGI
head(datmeth)
nrow(datmeth)/24

#only keep windows identified
mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                    .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(hz_cg$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))

#keep levels 
hzmrg &lt;- hz_cg_min[grepl('^site|Overlap',names(hz_cg_min))]
mod_input &lt;- merge(mod_input1,hzmrg)
nrow(mod_input)/24
datmeth &lt;- mod_input

#set these as factor variables 
datmeth$Hybrid_Index &lt;- as.factor(datmeth$Hybrid_Index)
datmeth$Year &lt;- as.factor(datmeth$Year)
datmeth$Locality &lt;- as.factor(datmeth$Locality)
datmeth$ID &lt;- as.factor(datmeth$ID)

#and scale the continuous variables
datmeth &lt;- datmeth %&gt;% mutate_at(c('Precipitation'), ~(scale(.) %&gt;% as.vector))


plotDat &lt;- NULL 
for (i in seq(1, nrow(datmeth), by = 24)) {
  CpGsite &lt;- datmeth[i:(i + 23), ]
  
  glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                      Hybrid_Index + Precipitation + (1 | Locality) ,data = CpGsite, family = &quot;binomial&quot;,
                    control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                           optCtrl = list(maxfun = 2e+08)))
  dats &lt;- emmip(glmm_CpG, ~ Hybrid_Index , CIs = TRUE,plotit=FALSE) 
  site &lt;- CpGsite[1:3,1]
  level &lt;- CpGsite[1:3,11]
  group &lt;- dats[1]
  mean &lt;- dats[2]
  se &lt;- dats[3]
  loops &lt;- cbind(site,level,group,mean,se)
  plotDat &lt;- rbind(plotDat,loops)
}

library(maditr)
head(plotDat)
plotDat_LongSE &lt;- dcast(plotDat, site ~ Hybrid_Index, value.var = 'SE')
plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Hybrid_Index, value.var = 'yvar')
head(plotDat_LongMEAN)
names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
names(plotDat_LongSE) &lt;- c('site','CoroneSE','HybridSE','CornixSE')

plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                        Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate')]

fullP &lt;- merge(plotDat,hyb_level)
head(fullP)
fullP &lt;- subset(fullP,level != 'UNKNOWN')
fullP$level &lt;- factor(fullP$level, levels = c('SPECIES_PRE','SPECIES_POST','SEX','STAGE','TISSUE'))

#remove extreme outlier sites
#plotDat95 &lt;- subset(plotDat,yvar &lt; quantile(plotDat$yvar, 0.99) &amp; yvar &gt; quantile(plotDat$yvar, 0.01))
a1 &lt;- ggplot(fullP,aes(x=site,y=yvar,group=Hybrid_Index,col=Hybrid_Index))+
  geom_errorbar(aes(ymin=yvar-SE, ymax=yvar+SE), width=.5) +
  geom_point(pch=15,cex=2)+
  geom_text(aes(y=max(yvar+SE),label = ifelse(Intermediate == &quot;INTERMEDIATE&quot;, &quot;°&quot;, &quot;&quot;),vjust =0))+
  scale_color_manual(values=c('black','purple','darkgrey'))+
  ylab('Estimated Marginal Means')+
  facet_grid(cols = vars(level),scales='free',space='free')+
  theme_classic()+
  theme(axis.text.x=element_blank(),axis.ticks.x = element_blank())+
  xlab('CpG Window')
a1

#save it 
jpeg(&quot;plots/CG-WGBS_HZ_EMMs.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=11)
theme_set(theme_classic(base_size = 16))
grid.arrange(a1,nrow=1)
dev.off()

#test significant differences in counts
con1 &lt;- table(fullP$level,fullP$Intermediate)
con1
#if we have no counts for something, exclude it 
#con2 &lt;- con1[-5,]
con2 &lt;- con1
mosaicplot(con2,color=TRUE)
fisher.test(con2)

#Fisher's Exact Test for Count Data
#data:  con2
#p-value = 0.002111
#alternative hypothesis: two.sided

#save it 
pdf(&quot;plots/CG-WGBS_HZ_CONTINGENCY.pdf&quot;, height=5, width=11)
mosaicplot(con2,color=TRUE)
dev.off()</pre>


=== HZ-CG ===

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)

#import truth set DMRs
truth_dmr &lt;- read.csv('CG_DMA_DMRs.csv',header=TRUE)
head(truth_dmr)

hz &lt;- read.csv('HZ_DMA_DMRs.csv',header=TRUE)


hz_cg &lt;- merge(hz,truth_dmr,by='site')

nrow(hz_cg)
hz_cg %&gt;% dplyr::count(BioVar)
head(hz_cg)


hz_cg_min &lt;- hz_cg[,c('site','BioVar','DMR.y')]

hz_cg_min &lt;- hz_cg_min %&gt;% mutate(Overlap = ifelse(DMR.y == &quot;SPECIES&quot; &amp; BioVar == &quot;CONTRASTED&quot;, &quot;SPECIES&quot;,
                                                   ifelse(DMR.y == &quot;OTHER&quot; &amp; BioVar == &quot;PRECIPITATION&quot;, &quot;ENVIRONMENT&quot;,
                                                          ifelse(DMR.y == &quot;SEX&quot; &amp; BioVar == &quot;OTHER&quot; , &quot;SEX&quot;,
                                                                 ifelse(DMR.y == &quot;STAGE&quot; &amp; BioVar == &quot;OTHER&quot; , &quot;STAGE&quot;,
                                                                      ifelse(DMR.y == &quot;SPECIES&quot; &amp; BioVar == &quot;OTHER&quot; , &quot;SPECIES_PRE&quot;,
                                                                                      ifelse(BioVar == &quot;CONTRASTED&quot; , &quot;SPECIES_POST&quot;,&quot;UNKNOWN&quot;)))))))
hz_cg_min %&gt;% dplyr::count(Overlap)
head(hz_cg_min)
#hz &lt;- subset(hz,Contrast != &quot;OTHER&quot;)
head(hz_cg_min)

#re-form model 
datmeth &lt;- read.csv(&quot;HZ_GLMM_Input.csv&quot;,header=TRUE)
datmeth$site &lt;- datmeth$CGI
head(datmeth)
nrow(datmeth)/24

#only keep windows identified
mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                    .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(hz_cg$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))

#keep levels 
hzmrg &lt;- hz_cg_min[grepl('^site|Overlap',names(hz_cg_min))]
mod_input &lt;- merge(mod_input1,hzmrg)
nrow(mod_input)/24
datmeth &lt;- mod_input

#set these as factor variables 
datmeth$Hybrid_Index &lt;- as.factor(datmeth$Hybrid_Index)
datmeth$Year &lt;- as.factor(datmeth$Year)
datmeth$Locality &lt;- as.factor(datmeth$Locality)
datmeth$ID &lt;- as.factor(datmeth$ID)

#and scale the continuous variables
datmeth &lt;- datmeth %&gt;% mutate_at(c('Precipitation'), ~(scale(.) %&gt;% as.vector))


plotDat &lt;- NULL 
for (i in seq(1, nrow(datmeth), by = 24)) {
  CpGsite &lt;- datmeth[i:(i + 23), ]
  
  glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                      Hybrid_Index + Precipitation + (1 | Locality) ,data = CpGsite, family = &quot;binomial&quot;,
                    control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                           optCtrl = list(maxfun = 2e+08)))
  dats &lt;- emmip(glmm_CpG, ~ Hybrid_Index , CIs = TRUE,plotit=FALSE) 
  site &lt;- CpGsite[1:3,1]
  level &lt;- CpGsite[1:3,11]
  group &lt;- dats[1]
  mean &lt;- dats[2]
  se &lt;- dats[3]
  loops &lt;- cbind(site,level,group,mean,se)
  plotDat &lt;- rbind(plotDat,loops)
}

library(maditr)
head(plotDat)
plotDat_LongSE &lt;- dcast(plotDat, site ~ Hybrid_Index, value.var = 'SE')
plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Hybrid_Index, value.var = 'yvar')
head(plotDat_LongMEAN)
names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
names(plotDat_LongSE) &lt;- c('site','CoroneSE','HybridSE','CornixSE')

plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                        Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate')]

fullP &lt;- merge(plotDat,hyb_level)
head(fullP)
fullP &lt;- subset(fullP,level != 'UNKNOWN')
fullP$level &lt;- factor(fullP$level, levels = c('SPECIES_PRE','SPECIES_POST','SEX','STAGE','ENVIRONMENT'))

#remove extreme outlier sites
#plotDat95 &lt;- subset(plotDat,yvar &lt; quantile(plotDat$yvar, 0.99) &amp; yvar &gt; quantile(plotDat$yvar, 0.01))
a1 &lt;- ggplot(fullP,aes(x=site,y=yvar,group=Hybrid_Index,col=Hybrid_Index))+
  geom_errorbar(aes(ymin=yvar-SE, ymax=yvar+SE), width=.5) +
  geom_point(pch=15,cex=2)+
  geom_text(aes(y=max(yvar+SE),label = ifelse(Intermediate == &quot;INTERMEDIATE&quot;, &quot;°&quot;, &quot;&quot;),vjust =0))+
  scale_color_manual(values=c('black','purple','darkgrey'))+
  ylab('Estimated Marginal Means')+
  facet_grid(cols = vars(level),scales='free',space='free')+
  theme_classic()+
  theme(axis.text.x=element_blank(),axis.ticks.x = element_blank())+
  xlab('CpG Window')
a1

#save it 
jpeg(&quot;plots/CG_HZ_EMMs.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=11)
theme_set(theme_classic(base_size = 16))
grid.arrange(a1,nrow=1)
dev.off()

#test significant differences in counts
con1 &lt;- table(fullP$level,fullP$Intermediate)
con1
#if we have no counts for something, exclude it 
#con2 &lt;- con1[-5,]
con2 &lt;- con1
mosaicplot(con2,color=TRUE)
fisher.test(con2)

#Fisher's Exact Test for Count Data
#data:  con2
#p-value = 0.002111
#alternative hypothesis: two.sided

#save it 
pdf(&quot;plots/CG_HZ_CONTINGENCY.pdf&quot;, height=5, width=11)
mosaicplot(con2,color=TRUE)
dev.off()</pre>


=== HZ-WGBS ===

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)

#import truth set DMRs
truth_dmr &lt;- read.csv('WGBS_DMA_DMRs.csv',header=TRUE)
head(truth_dmr)

hz &lt;- read.csv('HZ_DMA_DMRs.csv',header=TRUE)


hz_wgbs &lt;- merge(hz,truth_dmr,by='site')

nrow(hz_wgbs)
hz_cg %&gt;% dplyr::count(BioVar)
head(hz_wgbs)


hz_wgbs_min &lt;- hz_wgbs[,c('site','BioVar','DMR.y')]

hz_wgbs_min &lt;- hz_wgbs_min %&gt;% mutate(Overlap = ifelse(DMR.y == &quot;SPECIES&quot; &amp; BioVar == &quot;CONTRASTED&quot;, &quot;SPECIES&quot;,
                                                   ifelse(DMR.y == &quot;OTHER&quot; &amp; BioVar == &quot;PRECIPITATION&quot;, &quot;ENVIRONMENT&quot;,
                                                          ifelse(DMR.y == &quot;SEX&quot; &amp; BioVar == &quot;OTHER&quot; , &quot;SEX&quot;,
                                                                 ifelse(DMR.y == &quot;TISSUE&quot; &amp; BioVar == &quot;OTHER&quot; , &quot;TISSUE&quot;,
                                                                        ifelse(DMR.y == &quot;SPECIES&quot; &amp; BioVar == &quot;OTHER&quot; , &quot;SPECIES_PRE&quot;,
                                                                               ifelse(BioVar == &quot;CONTRASTED&quot; , &quot;SPECIES_POST&quot;,&quot;UNKNOWN&quot;)))))))
hz_wgbs_min %&gt;% dplyr::count(Overlap)
head(hz_wgbs_min)
#hz &lt;- subset(hz,Contrast != &quot;OTHER&quot;)
head(hz_wgbs_min)

#re-form model 
datmeth &lt;- read.csv(&quot;HZ_GLMM_Input.csv&quot;,header=TRUE)
datmeth$site &lt;- datmeth$CGI
head(datmeth)
nrow(datmeth)/24

#only keep windows identified
mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                    .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(hz_wgbs$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))

#keep levels 
hzmrg &lt;- hz_wgbs_min[grepl('^site|Overlap',names(hz_wgbs_min))]
mod_input &lt;- merge(mod_input1,hzmrg)
nrow(mod_input)/24
datmeth &lt;- mod_input

#set these as factor variables 
datmeth$Hybrid_Index &lt;- as.factor(datmeth$Hybrid_Index)
datmeth$Year &lt;- as.factor(datmeth$Year)
datmeth$Locality &lt;- as.factor(datmeth$Locality)
datmeth$ID &lt;- as.factor(datmeth$ID)

#and scale the continuous variables
datmeth &lt;- datmeth %&gt;% mutate_at(c('Precipitation'), ~(scale(.) %&gt;% as.vector))


plotDat &lt;- NULL 
for (i in seq(1, nrow(datmeth), by = 24)) {
  CpGsite &lt;- datmeth[i:(i + 23), ]
  
  glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                      Hybrid_Index + Precipitation + (1 | Locality) ,data = CpGsite, family = &quot;binomial&quot;,
                    control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                           optCtrl = list(maxfun = 2e+08)))
  dats &lt;- emmip(glmm_CpG, ~ Hybrid_Index , CIs = TRUE,plotit=FALSE) 
  site &lt;- CpGsite[1:3,1]
  level &lt;- CpGsite[1:3,11]
  group &lt;- dats[1]
  mean &lt;- dats[2]
  se &lt;- dats[3]
  loops &lt;- cbind(site,level,group,mean,se)
  plotDat &lt;- rbind(plotDat,loops)
}

library(maditr)
head(plotDat)
plotDat_LongSE &lt;- dcast(plotDat, site ~ Hybrid_Index, value.var = 'SE')
plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Hybrid_Index, value.var = 'yvar')
head(plotDat_LongMEAN)
names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
names(plotDat_LongSE) &lt;- c('site','CoroneSE','HybridSE','CornixSE')

plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                        Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate')]

fullP &lt;- merge(plotDat,hyb_level)
head(fullP)
fullP &lt;- subset(fullP,level != 'UNKNOWN')
fullP$level &lt;- factor(fullP$level, levels = c('SPECIES_PRE','SPECIES_POST','SEX','TISSUE','ENVIRONMENT'))

#remove extreme outlier sites
#plotDat95 &lt;- subset(plotDat,yvar &lt; quantile(plotDat$yvar, 0.99) &amp; yvar &gt; quantile(plotDat$yvar, 0.01))
a1 &lt;- ggplot(fullP,aes(x=site,y=yvar,group=Hybrid_Index,col=Hybrid_Index))+
  geom_errorbar(aes(ymin=yvar-SE, ymax=yvar+SE), width=.5) +
  geom_point(pch=15,cex=2)+
  geom_text(aes(y=max(yvar+SE),label = ifelse(Intermediate == &quot;INTERMEDIATE&quot;, &quot;°&quot;, &quot;&quot;),vjust =0))+
  scale_color_manual(values=c('black','purple','darkgrey'))+
  ylab('Estimated Marginal Means')+
  facet_grid(cols = vars(level),scales='free',space='free')+
  theme_classic()+
  theme(axis.text.x=element_blank(),axis.ticks.x = element_blank())+
  xlab('CpG Window')
a1

#save it 
jpeg(&quot;plots/WGBS_HZ_EMMs.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=11)
theme_set(theme_classic(base_size = 16))
grid.arrange(a1,nrow=1)
dev.off()

#test significant differences in counts
con1 &lt;- table(fullP$level,fullP$Intermediate)
con1
#if we have no counts for something, exclude it 
#con2 &lt;- con1[-5,]
con2 &lt;- con1
mosaicplot(con2,color=TRUE)
fisher.test(con2,simulate.p.value=TRUE)

#Fisher's Exact Test for Count Data
#data:  con2
#p-value = 0.002111
#alternative hypothesis: two.sided

#save it 
pdf(&quot;plots/WGBS_HZ_CONTINGENCY.pdf&quot;, height=5, width=11)
mosaicplot(con2,color=TRUE)
dev.off()</pre>
=== HZ-Only ===

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)

#use only the HZ DMRs 
hz &lt;- read.csv('HZ_DMA_DMRs.csv',header=TRUE)
nrow(hz)

hz %&gt;% dplyr::count(BioVar)

#obtain stratified sample
strat_sample &lt;- hz %&gt;%
  group_by(BioVar) %&gt;%
  sample_n(size=20)

#find frequency of students from each grade
table(strat_sample$BioVar)

#re-form model 
datmeth &lt;- read.csv(&quot;HZ_GLMM_Input.csv&quot;,header=TRUE)
datmeth$site &lt;- datmeth$CGI
head(datmeth)
nrow(datmeth)/24

#only keep windows identified
mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                    .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(strat_sample$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))

#keep levels 
hzmrg &lt;- strat_sample[grepl('^site|BioVar',names(strat_sample))]
mod_input &lt;- merge(mod_input1,hzmrg)
nrow(mod_input)/24
datmeth &lt;- mod_input

#set these as factor variables 
datmeth$Hybrid_Index &lt;- as.factor(datmeth$Hybrid_Index)
datmeth$Year &lt;- as.factor(datmeth$Year)
datmeth$Locality &lt;- as.factor(datmeth$Locality)
datmeth$ID &lt;- as.factor(datmeth$ID)

#and scale the continuous variables
datmeth &lt;- datmeth %&gt;% mutate_at(c('Precipitation'), ~(scale(.) %&gt;% as.vector))


plotDat &lt;- NULL 
for (i in seq(1, nrow(datmeth), by = 24)) {
  CpGsite &lt;- datmeth[i:(i + 23), ]
  
  glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                      Hybrid_Index + Precipitation + (1 | Locality) ,data = CpGsite, family = &quot;binomial&quot;,
                    control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                           optCtrl = list(maxfun = 2e+08)))
  dats &lt;- emmip(glmm_CpG, ~ Hybrid_Index , CIs = TRUE,plotit=FALSE) 
  site &lt;- CpGsite[1:3,1]
  level &lt;- CpGsite[1:3,11]
  group &lt;- dats[1]
  mean &lt;- dats[2]
  se &lt;- dats[3]
  loops &lt;- cbind(site,level,group,mean,se)
  plotDat &lt;- rbind(plotDat,loops)
}

library(maditr)
head(plotDat)
plotDat_LongSE &lt;- dcast(plotDat, site ~ Hybrid_Index, value.var = 'SE')
plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Hybrid_Index, value.var = 'yvar')
head(plotDat_LongMEAN)
names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
names(plotDat_LongSE) &lt;- c('site','CoroneSE','HybridSE','CornixSE')

plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                        Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate')]
for_tab &lt;- merge(hyb_level,plotDat,by='site')
k_tab &lt;- unique(for_tab[,c('site','Intermediate','level')])

fullP &lt;- merge(plotDat,hyb_level)
fullP$level &lt;- gsub('CONTRASTED', 'SPECIES', fullP$level)
fullP$level &lt;- factor(fullP$level, levels = c('SPECIES','PRECIPITATION','OTHER'))

#remove extreme outlier sites
#plotDat95 &lt;- subset(plotDat,yvar &lt; quantile(plotDat$yvar, 0.99) &amp; yvar &gt; quantile(plotDat$yvar, 0.01))
a1 &lt;- ggplot(fullP,aes(x=site,y=yvar,group=Hybrid_Index,col=Hybrid_Index))+
  geom_errorbar(aes(ymin=yvar-SE, ymax=yvar+SE), width=.5) +
  geom_point(pch=15,cex=2)+
  scale_color_manual(values=c('black','purple','darkgrey'))+
  ylab('Estimated Marginal Means')+
  facet_grid(cols = vars(level),scales='free',space='free')+
  theme_classic()+
  geom_text(aes(y=max(yvar+SE),label = ifelse(Intermediate == &quot;INTERMEDIATE&quot;, &quot;°&quot;, &quot;&quot;),cex=5,vjust =0))+
  theme(axis.text.x=element_blank(),axis.ticks.x = element_blank())+
  xlab('CpG Window')
a1

#save it 
jpeg(&quot;plots/HZ-Only_EMMs.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=11)
theme_set(theme_classic(base_size = 16))
grid.arrange(a1,nrow=1)
dev.off()

#test significant differences in counts
con1 &lt;- table(fullP$level,fullP$Intermediate)
con1
#if we have no counts for something, exclude it 
#con2 &lt;- con1[-5,]
con2 &lt;- con1
mosaicplot(con2,color=TRUE)
fisher.test(con2)

#Fisher's Exact Test for Count Data
#data:  con2
#p-value = 0.002111
#alternative hypothesis: two.sided

#save it 
pdf(&quot;plots/HZ-Only_CONTINGENCY.pdf&quot;, height=5, width=11)
mosaicplot(con2,color=TRUE)
dev.off()
</pre>
=== Bootstrap-HZ-Only ===

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)
library(viridis)
library(maditr)

#use only the HZ DMRs 
hz &lt;- read.csv('HZ_DMA_DMRS.csv',header=TRUE)
nrow(hz)

hz %&gt;% dplyr::count(BioVar)

#bootstraps
nboots &lt;- 20 
HZ_species &lt;- NULL
HZ_precipitation &lt;- NULL
HZ_other &lt;- NULL
HZ_pval &lt;- NULL
HZ_means &lt;- NULL

counter = 0

for (i in seq(1, nboots)) {
  #obtain stratified sample
  counter=counter+1
  strat_sample &lt;- hz %&gt;%
    group_by(BioVar) %&gt;%
    sample_n(size=10,replace=FALSE)
  
  #re-form model 
  datmeth &lt;- read.csv(&quot;HZ_GLMM_Input.csv&quot;,header=TRUE)
  datmeth$site &lt;- datmeth$CGI
  head(datmeth)
  nrow(datmeth)/24
  
  #only keep windows identified
  mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                      .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(strat_sample$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))
  
  #keep levels 
  hzmrg &lt;- strat_sample[grepl('^site|BioVar',names(strat_sample))]
  mod_input &lt;- merge(mod_input1,hzmrg)
  nrow(mod_input)/24
  datmeth &lt;- mod_input
  
  #set these as factor variables 
  datmeth$Hybrid_Index &lt;- as.factor(datmeth$Hybrid_Index)
  datmeth$Year &lt;- as.factor(datmeth$Year)
  datmeth$Locality &lt;- as.factor(datmeth$Locality)
  datmeth$ID &lt;- as.factor(datmeth$ID)
  
  #and scale the continuous variables
  datmeth &lt;- datmeth %&gt;% mutate_at(c('Precipitation'), ~(scale(.) %&gt;% as.vector))
  
  cat('\n Running Models for iteration:',counter)
  
  plotDat &lt;- NULL 
  for (i in seq(1, nrow(datmeth), by = 24)) {
    CpGsite &lt;- datmeth[i:(i + 23), ]
    
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Hybrid_Index + Precipitation + (1 | Locality) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+08)))
    dats &lt;- emmip(glmm_CpG, ~ Hybrid_Index , CIs = TRUE,plotit=FALSE) 
    site &lt;- CpGsite[1:3,1]
    level &lt;- CpGsite[1:3,11]
    group &lt;- dats[1]
    mean &lt;- dats[2]
    se &lt;- dats[3]
    loops &lt;- cbind(site,level,group,mean,se)
    plotDat &lt;- rbind(plotDat,loops)
  }
  
  head(plotDat)
  plotDat_LongSE &lt;- dcast(plotDat, site ~ Hybrid_Index, value.var = 'SE')
  plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Hybrid_Index, value.var = 'yvar')
  names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
  plotDat_LongMEAN$ParentalMidPoint &lt;- ((plotDat_LongMEAN$Cornix + plotDat_LongMEAN$Corone)/2)
  plotDat_LongMEAN$HybDistance &lt;- (plotDat_LongMEAN$Hybrid - plotDat_LongMEAN$ParentalMidPoint)
  
  #add simple intermediacy factor 
  plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                          Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
  hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate','HybDistance')]
  for_tab &lt;- merge(hyb_level,plotDat,by='site')
  k_tab &lt;- unique(for_tab[,c('site','Intermediate','level','HybDistance')])
  
  #calculate distance between hybrids and the parental midpoint 
  hyb_means &lt;- as.data.frame(k_tab %&gt;% group_by(level) %&gt;% dplyr::summarize(Mean = mean(HybDistance)))
  hyb_means$ITERATION &lt;- counter
  
  
  #test significant differences in counts
  con1 &lt;- table(k_tab$level,k_tab$Intermediate)
  con1
  res &lt;- fisher.test(con1)
  
  spec &lt;-  data.frame(ITERATION = counter, LEVEL = 'SPECIES',INTERMEDIATE = con1[1,1], MIXED = con1[1,2])
  rain &lt;-  data.frame(ITERATION = counter, LEVEL = 'PRECIPITATION',INTERMEDIATE = con1[3,1], MIXED = con1[3,2])
  other &lt;-  data.frame(ITERATION = counter, LEVEL = 'OTHER',INTERMEDIATE = con1[2,1], MIXED = con1[2,2])
  pvals &lt;-  data.frame(pvalue = res$p.value)
  
  #bind loops
  HZ_species &lt;- rbind(HZ_species, spec)
  HZ_precipitation &lt;- rbind(HZ_precipitation, rain)
  HZ_other &lt;- rbind(HZ_other, other)
  HZ_pval &lt;- rbind(HZ_pval,pvals)
  HZ_means &lt;- rbind(HZ_means,hyb_means)
  
}
  
#plot hybrids
HZ_distance &lt;- HZ_means
HZ_distance$level &lt;- gsub('CONTRASTED','SPECIES',HZ_distance$level)
HZ_distance$level &lt;- gsub('OTHER','UNKNOWN',HZ_distance$level)
HZ_distance$level &lt;- factor(HZ_distance$level, levels = c('UNKNOWN','PRECIPITATION','SPECIES'))
a &lt;- ggplot(HZ_distance,aes(x=level,fill=level, y=Mean))+
  geom_boxplot(show.legend=FALSE)+ylab('Distance to Parentals')+xlab('')+
  scale_fill_manual(values=viridis(3))+
  geom_hline(yintercept=0,lty=2,lwd=1,col=&quot;black&quot;)+
  theme_classic()
a

#plot categorical 
head(HZ_species)
bootdat &lt;- rbind(HZ_species,HZ_precipitation,HZ_other)
head(bootdat)
meltboot &lt;- melt(bootdat,id.vars = c('LEVEL','ITERATION'))
meltboot$LEVEL &lt;- gsub('OTHER','UNKNOWN',meltboot$LEVEL)
meltboot$LEVEL &lt;- factor(meltboot$LEVEL, levels = c('UNKNOWN','PRECIPITATION','SPECIES'))
b &lt;- ggplot(meltboot,aes(x=LEVEL,fill=variable,y=value))+
  geom_boxplot()+ylab('Number of Replicates')+xlab('')+
  scale_fill_manual(values=c('purple','gray'))+
  theme_classic()
b
c &lt;- ggplot(HZ_pval, aes(x=pvalue))+
  geom_histogram(aes(y = ..density..),bins=5) +
  geom_density(alpha = 0.1, fill = &quot;turquoise&quot;)+
  ylab(&quot;Density&quot;)+xlab(&quot;p-Value&quot;)+
  theme_classic()
c

#save it 
jpeg(&quot;plots/HZ-Only-BootstrapDistance.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(a,nrow=1)
dev.off()


#save it 
jpeg(&quot;plots/HZ-Only-Bootstrap.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(b,nrow=1)
dev.off()

#save it 
jpeg(&quot;plots/HZ-Only-Bootstrap_pvals.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=4)
theme_set(theme_classic(base_size = 16))
grid.arrange(c,nrow=1)
dev.off()
</pre>
=== Bootstraps-CG-HZ ===

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)
library(maditr)
library(viridis)

#import truth set DMRs
truth_dmr &lt;- read.csv('CG_DMA_DMRs.csv',header=TRUE)
head(truth_dmr)

hz &lt;- read.csv('HZ_DMA_DMRs.csv',header=TRUE)


hz_wgbs &lt;- merge(hz,truth_dmr,by='site')

nrow(hz_wgbs)

hz_wgbs_min &lt;- hz_wgbs[,c('site','DMR.x','DMR.y')]
hz_wgbs_min %&gt;% dplyr::count(DMR.x,DMR.y)

hz_wgbs_min &lt;- hz_wgbs_min %&gt;% mutate(Overlap = ifelse(DMR.y == &quot;SPECIES&quot; &amp; DMR.x == &quot;SPECIES&quot;, &quot;SPECIES&quot;,
                                                       ifelse(DMR.y == &quot;SEX&quot; &amp; DMR.x == &quot;UNKNOWN&quot; , &quot;SEX&quot;,
                                                              ifelse(DMR.y == &quot;STAGE&quot; &amp; DMR.x == &quot;UNKNOWN&quot; , &quot;STAGE&quot;,
                                                                     ifelse(DMR.y == &quot;SPECIES&quot; &amp; DMR.x == &quot;UNKNOWN&quot; , &quot;SPECIES_PRE&quot;,
                                                                            ifelse(DMR.y == &quot;SPECIES&quot; &amp; DMR.x == &quot;UNKNOWN&quot; , &quot;SPECIES_PRE&quot;,
                                                                                   ifelse(DMR.y == &quot;OTHER&quot; &amp; DMR.x == &quot;SPECIES&quot; , &quot;SPECIES_POST&quot;,
                                                                                          ifelse(DMR.y != &quot;OTHER&quot; &amp; DMR.x == &quot;SPECIES&quot; , &quot;CONFLICT&quot;,&quot;UNKNOWN&quot;))))))))
hz_wgbs_min %&gt;% dplyr::count(Overlap)
head(hz_wgbs_min)
#hz &lt;- subset(hz,Contrast != &quot;OTHER&quot;)
head(hz_wgbs_min)

#bootstraps
nboots &lt;- 10
HZ_species_pre &lt;- NULL
HZ_species_post &lt;- NULL
HZ_sex &lt;- NULL
HZ_stage &lt;- NULL
HZ_other &lt;- NULL
HZ_pval &lt;- NULL
HZ_means &lt;- NULL
HZ_noint &lt;- NULL

counter = 0

for (j in seq(1, nboots)) {
  #obtain stratified sample
  counter=counter+1
  strat_sample &lt;- hz_wgbs_min %&gt;%
    group_by(Overlap) %&gt;%
    sample_n(size=2,replace=FALSE)
  
  #re-form model 
  datmeth &lt;- read.csv(&quot;HZ_GLMM_Input.csv&quot;,header=TRUE)
  datmeth$site &lt;- datmeth$CGI
  head(datmeth)
  nrow(datmeth)/24
  
  parents &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up')
  hybrids &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up',negate=TRUE)
  hyb3 &lt;- sample(hybrids,3,replace=FALSE)
  full &lt;- c(parents,hyb3)
  
  #only keep windows identified
  mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                      .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(strat_sample$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))
  
  mod_input2 &lt;- mod_input1[grepl(paste0(full,collapse=&quot;$|^&quot;),mod_input1$ID),]
  #keep levels 
  hzmrg &lt;- strat_sample[grepl('^site|Overlap',names(strat_sample))]
  mod_input &lt;- merge(mod_input2,hzmrg)
  nrow(mod_input)/9
  datmeth &lt;- mod_input
  
  #set these as factor variables 
  datmeth$Classification &lt;- as.factor(datmeth$Classification)
  datmeth$Locality &lt;- as.factor(datmeth$Locality)
  datmeth$ID &lt;- as.factor(datmeth$ID)
  
  #and scale the continuous variables
  datmeth &lt;- datmeth %&gt;% mutate_at(c('Hybrid_Index'), ~(scale(.) %&gt;% as.vector))
  
  plotDat &lt;- NULL 
  for (i in seq(1, nrow(datmeth), by = 9)) {
    CpGsite &lt;- datmeth[i:(i + 8), ]
    
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Classification + (1 | Locality / CGI) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+08)))
    dats &lt;- emmip(glmm_CpG, ~ Classification , CIs = TRUE,plotit=FALSE) 
    site &lt;- CpGsite[1:3,1]
    level &lt;- CpGsite[1:3,11]
    group &lt;- dats[1]
    mean &lt;- dats[2]
    se &lt;- dats[3]
    loops &lt;- cbind(site,level,group,mean,se)
    plotDat &lt;- rbind(plotDat,loops)
  }
  
  head(plotDat)
  plotDat_LongSE &lt;- dcast(plotDat, site ~ Classification, value.var = 'SE')
  plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Classification, value.var = 'yvar')
  names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
  plotDat_LongMEAN$ParentalMidPoint &lt;- ((plotDat_LongMEAN$Cornix + plotDat_LongMEAN$Corone)/2)
  plotDat_LongMEAN$HybDistance &lt;- (plotDat_LongMEAN$Hybrid - plotDat_LongMEAN$ParentalMidPoint)
  
  #add simple intermediacy factor 
  plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                          Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
  hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate','HybDistance')]
  for_tab &lt;- merge(hyb_level,plotDat,by='site')
  k_tab &lt;- unique(for_tab[,c('site','Intermediate','level','HybDistance')])
  
  #calculate distance between hybrids and the parental midpoint 
  hyb_means &lt;- as.data.frame(k_tab %&gt;% group_by(level) %&gt;% dplyr::summarize(Mean = mean(HybDistance)))
  hyb_means$ITERATION &lt;- counter
  
  #test significant differences in counts, if there are no intermediate events, this will add a column of zeroes
  con1 &lt;- table(k_tab$level,k_tab$Intermediate)
  con1
  
  tryCatch({
    res &lt;- fisher.test(con1)
    con2 &lt;- table(k_tab$level,k_tab$HybDistance)
    con2
    
    specpre &lt;-  data.frame(ITERATION = counter, LEVEL = 'SPECIES_PRE',INTERMEDIATE = con1[3,1], MIXED = con1[3,2])
    specpost &lt;-  data.frame(ITERATION = counter, LEVEL = 'SPECIES_POST',INTERMEDIATE = con1[2,1], MIXED = con1[2,2])
    stag &lt;-  data.frame(ITERATION = counter, LEVEL = 'STAGE',INTERMEDIATE = con1[4,1], MIXED = con1[4,2])
    sexx &lt;-  data.frame(ITERATION = counter, LEVEL = 'SEX',INTERMEDIATE = con1[1,1], MIXED = con1[1,2])
    other &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNKNOWN',INTERMEDIATE = con1[5,1], MIXED = con1[5,2])
    pvals &lt;-  data.frame(pvalue = res$p.value)
    
    
    #bind loops
    HZ_species_pre &lt;- rbind(HZ_species_pre, specpre)
    HZ_species_post &lt;- rbind(HZ_species_post, specpost)
    HZ_stage &lt;- rbind(HZ_stage, stag)
    HZ_sex &lt;- rbind(HZ_sex, sexx)
    HZ_other &lt;- rbind(HZ_other, other)
    HZ_pval &lt;- rbind(HZ_pval,pvals)
    HZ_means &lt;- rbind(HZ_means,hyb_means)
    
  }, error=function(e){HZ_noint &lt;- rbind(HZ_noint,counter);cat(counter,&quot;BAD \n&quot;)})
  
  
  
}

#works   }, error=function(e){cat(counter, &quot;BAD \n&quot;)})

head(HZ_species_pre)
bootdat &lt;- rbind(HZ_species_pre,HZ_species_post,HZ_stage,HZ_sex,HZ_other)
head(bootdat)

meltboot &lt;- melt(bootdat,id.vars = c('LEVEL','ITERATION'))

HZ_distance &lt;- HZ_means
HZ_distance$level &lt;- factor(HZ_distance$level, levels = c('UNKNOWN','SEX','STAGE','SPECIES_PRE','SPECIES_POST'))
a &lt;- ggplot(HZ_distance,aes(x=level,fill=level, y=Mean))+
  geom_boxplot(show.legend=FALSE)+ylab('Distance to Parentals')+xlab('')+
  scale_fill_manual(values=viridis(6))+
  geom_hline(yintercept=0,lty=2,lwd=1,col=&quot;black&quot;)+
  theme_classic()
a

meltboot$LEVEL &lt;- factor(meltboot$LEVEL, levels = c('UNKNOWN','SEX','STAGE','SPECIES_PRE','SPECIES_POST'))
b &lt;- ggplot(meltboot,aes(x=LEVEL,fill=variable,y=value))+
  geom_boxplot()+ylab('Number of Replicates')+xlab('')+
  scale_fill_manual(values=c('purple','gray'))+
  theme_classic()
b
c &lt;- ggplot(HZ_pval, aes(x=pvalue))+
  geom_histogram(aes(y = ..density..),bins=5) +
  geom_density(alpha = 0.1, fill = &quot;turquoise&quot;)+
  ylab(&quot;Density&quot;)+xlab(&quot;p-Value&quot;)+
  theme_classic()
c

#save it 
jpeg(&quot;plots/HZ-CG-BootstrapDistance.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(a,nrow=1)
dev.off()


#save it 
jpeg(&quot;plots/HZ-CG-Bootstrap.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(b,nrow=1)
dev.off()

#save it 
jpeg(&quot;plots/HZ-CG-Bootstrap_pvals.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=4)
theme_set(theme_classic(base_size = 16))
grid.arrange(c,nrow=1)
dev.off()</pre>
=== Bootstraps-WGBS-HZ ===

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)
library(maditr)
library(viridis)

#import truth set DMRs
truth_dmr &lt;- read.csv('WGBS_DMA_DMRs_FDR.csv',header=TRUE)
head(truth_dmr)

hz &lt;- read.csv('HZ_DMA_DMRs_FDR.csv',header=TRUE)


hz_wgbs &lt;- merge(hz,truth_dmr,by='site')

nrow(hz_wgbs)

hz_wgbs_min &lt;- hz_wgbs[,c('site','DMR.x','DMR.y')]
hz_wgbs_min %&gt;% dplyr::count(DMR.x,DMR.y)

hz_wgbs_min &lt;- hz_wgbs_min %&gt;% mutate(Overlap = ifelse(DMR.y == &quot;SPECIES&quot; &amp; DMR.x == &quot;SPECIES&quot;, &quot;SPECIES&quot;,
                                                       ifelse(DMR.y == &quot;SEX&quot; &amp; DMR.x == &quot;UNKNOWN&quot; , &quot;SEX&quot;,
                                                              ifelse(DMR.y == &quot;TISSUE&quot; &amp; DMR.x == &quot;UNKNOWN&quot; , &quot;TISSUE&quot;,
                                                                     ifelse(DMR.y == &quot;SPECIES&quot; &amp; DMR.x == &quot;UNKNOWN&quot; , &quot;SPECIES_PRE&quot;,
                                                                            ifelse(DMR.y == &quot;SPECIES&quot; &amp; DMR.x == &quot;UNKNOWN&quot; , &quot;SPECIES_PRE&quot;,
                                                                                   ifelse(DMR.y == &quot;OTHER&quot; &amp; DMR.x == &quot;SPECIES&quot; , &quot;SPECIES_POST&quot;,
                                                                                          ifelse(DMR.y != &quot;OTHER&quot; &amp; DMR.x == &quot;SPECIES&quot; , &quot;CONFLICT&quot;,&quot;UNKNOWN&quot;))))))))
hz_wgbs_min %&gt;% dplyr::count(Overlap)
head(hz_wgbs_min)
#hz &lt;- subset(hz,Contrast != &quot;OTHER&quot;)
head(hz_wgbs_min)

#bootstraps
nboots &lt;- 100
HZ_species_pre &lt;- NULL
HZ_species_post &lt;- NULL
HZ_sex &lt;- NULL
HZ_tissue &lt;- NULL
HZ_other &lt;- NULL
HZ_pval &lt;- NULL
HZ_means &lt;- NULL
HZ_noint &lt;- NULL

counter = 0

for (j in seq(1, nboots)) {
  #obtain stratified sample
  counter=counter+1
  strat_sample &lt;- hz_wgbs_min %&gt;%
    group_by(Overlap) %&gt;%
    sample_n(size=2,replace=FALSE)
  
  #re-form model 
  datmeth &lt;- read.csv(&quot;HZ_GLMM_Input.csv&quot;,header=TRUE)
  datmeth$site &lt;- datmeth$CGI
  head(datmeth)
  nrow(datmeth)/24
  
  parents &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up')
  hybrids &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up',negate=TRUE)
  hyb3 &lt;- sample(hybrids,3,replace=FALSE)
  full &lt;- c(parents,hyb3)
  
  #only keep windows identified
  mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                      .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(strat_sample$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))
  
  mod_input2 &lt;- mod_input1[grepl(paste0(full,collapse=&quot;$|^&quot;),mod_input1$ID),]
  #keep levels 
  hzmrg &lt;- strat_sample[grepl('^site|Overlap',names(strat_sample))]
  mod_input &lt;- merge(mod_input2,hzmrg)
  nrow(mod_input)/9
  datmeth &lt;- mod_input
  
  #set these as factor variables 
  datmeth$Classification &lt;- as.factor(datmeth$Classification)
  datmeth$Locality &lt;- as.factor(datmeth$Locality)
  datmeth$ID &lt;- as.factor(datmeth$ID)
  
  #and scale the continuous variables
  datmeth &lt;- datmeth %&gt;% mutate_at(c('Hybrid_Index'), ~(scale(.) %&gt;% as.vector))

  plotDat &lt;- NULL 
  for (i in seq(1, nrow(datmeth), by = 9)) {
    CpGsite &lt;- datmeth[i:(i + 8), ]
    
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Classification + (1 | Locality / CGI) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+08)))
    dats &lt;- emmip(glmm_CpG, ~ Classification , CIs = TRUE,plotit=FALSE) 
    site &lt;- CpGsite[1:3,1]
    level &lt;- CpGsite[1:3,11]
    group &lt;- dats[1]
    mean &lt;- dats[2]
    se &lt;- dats[3]
    loops &lt;- cbind(site,level,group,mean,se)
    plotDat &lt;- rbind(plotDat,loops)
  }
  
  head(plotDat)
  plotDat_LongSE &lt;- dcast(plotDat, site ~ Classification, value.var = 'SE')
  plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Classification, value.var = 'yvar')
  names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
  plotDat_LongMEAN$ParentalMidPoint &lt;- ((plotDat_LongMEAN$Cornix + plotDat_LongMEAN$Corone)/2)
  plotDat_LongMEAN$HybDistance &lt;- (plotDat_LongMEAN$Hybrid - plotDat_LongMEAN$ParentalMidPoint)
  
  #add simple intermediacy factor 
  plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                          Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
  hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate','HybDistance')]
  for_tab &lt;- merge(hyb_level,plotDat,by='site')
  k_tab &lt;- unique(for_tab[,c('site','Intermediate','level','HybDistance')])
  
  #calculate distance between hybrids and the parental midpoint 
  hyb_means &lt;- as.data.frame(k_tab %&gt;% group_by(level) %&gt;% dplyr::summarize(Mean = mean(HybDistance)))
  hyb_means$ITERATION &lt;- counter
  
  #test significant differences in counts, if there are no intermediate events, this will add a column of zeroes
  con1 &lt;- table(k_tab$level,k_tab$Intermediate)
  con1
  
  tryCatch({
    res &lt;- fisher.test(con1)
    con2 &lt;- table(k_tab$level,k_tab$HybDistance)
    con2
    
    specpre &lt;-  data.frame(ITERATION = counter, LEVEL = 'SPECIES_PRE',INTERMEDIATE = con1[3,1], MIXED = con1[3,2])
    specpost &lt;-  data.frame(ITERATION = counter, LEVEL = 'SPECIES_POST',INTERMEDIATE = con1[2,1], MIXED = con1[2,2])
    tiss &lt;-  data.frame(ITERATION = counter, LEVEL = 'TISSUE',INTERMEDIATE = con1[4,1], MIXED = con1[4,2])
    sexx &lt;-  data.frame(ITERATION = counter, LEVEL = 'SEX',INTERMEDIATE = con1[1,1], MIXED = con1[1,2])
    other &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNKNOWN',INTERMEDIATE = con1[5,1], MIXED = con1[5,2])
    pvals &lt;-  data.frame(pvalue = res$p.value)
    
    
    #bind loops
    HZ_species_pre &lt;- rbind(HZ_species_pre, specpre)
    HZ_species_post &lt;- rbind(HZ_species_post, specpost)
    HZ_tissue &lt;- rbind(HZ_tissue, tiss)
    HZ_sex &lt;- rbind(HZ_sex, sexx)
    HZ_other &lt;- rbind(HZ_other, other)
    HZ_pval &lt;- rbind(HZ_pval,pvals)
    HZ_means &lt;- rbind(HZ_means,hyb_means)
    
  }, error=function(e){HZ_noint &lt;- rbind(HZ_noint,counter);cat(counter,&quot;BAD \n&quot;)})
  

  
}

#works   }, error=function(e){cat(counter, &quot;BAD \n&quot;)})

head(HZ_species_pre)
bootdat &lt;- rbind(HZ_species_pre,HZ_species_post,HZ_tissue,HZ_sex,HZ_other)
head(bootdat)

meltboot &lt;- melt(bootdat,id.vars = c('LEVEL','ITERATION'))

HZ_distance &lt;- HZ_means
HZ_distance$level &lt;- factor(HZ_distance$level, levels = c('UNKNOWN','SEX','TISSUE','SPECIES_PRE','SPECIES_POST'))
a &lt;- ggplot(HZ_distance,aes(x=level,fill=level, y=Mean))+
  geom_boxplot(show.legend=FALSE)+ylab('Distance to Parentals')+xlab('')+
  scale_fill_manual(values=viridis(6))+
  geom_hline(yintercept=0,lty=2,lwd=1,col=&quot;black&quot;)+
  theme_classic()
a

meltboot$LEVEL &lt;- factor(meltboot$LEVEL, levels = c('UNKNOWN','SEX','TISSUE','SPECIES_PRE','SPECIES_POST'))
b &lt;- ggplot(meltboot,aes(x=LEVEL,fill=variable,y=value))+
  geom_boxplot()+ylab('Number of Replicates')+xlab('')+
  scale_fill_manual(values=c('purple','gray'))+
  theme_classic()
b
c &lt;- ggplot(HZ_pval, aes(x=pvalue))+
  geom_histogram(aes(y = ..density..),bins=5) +
  geom_density(alpha = 0.1, fill = &quot;turquoise&quot;)+
  ylab(&quot;Density&quot;)+xlab(&quot;p-Value&quot;)+
  theme_classic()
c

#save it 
jpeg(&quot;plots/HZ-WGBS-BootstrapDistance.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(a,nrow=1)
dev.off()


#save it 
jpeg(&quot;plots/HZ-WGBS-Bootstrap.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(b,nrow=1)
dev.off()

#save it 
jpeg(&quot;plots/HZ-WGBS-Bootstrap_pvals.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=4)
theme_set(theme_classic(base_size = 16))
grid.arrange(c,nrow=1)
dev.off()</pre>
= ~~ CGI ~~ =

== CG 5x ==

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/CG/dplyr/&quot;)

#import all the data and average by CGI
tab &lt;- read.table('D_Ko_C29_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C29_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C29_ADL_F) &lt;- c('site','chr','start','end','numCs1','numTs1','Sites1');C29_ADL_F$C29_ADL_F &lt;- (C29_ADL_F$numCs1/(C29_ADL_F$numCs1+C29_ADL_F$numTs1))
tab &lt;- read.table('D_Ko_C29_BL_CHK_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C29_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C29_CHK_F) &lt;- c('site','chr','start','end','numCs2','numTs2','Sites2');C29_CHK_F$C29_CHK_F &lt;- (C29_CHK_F$numCs2/(C29_CHK_F$numCs2+C29_CHK_F$numTs2))
tab &lt;- read.table('D_Ko_C29_BL_YRL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C29_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C29_YRL_F) &lt;- c('site','chr','start','end','numCs3','numTs3','Sites3');C29_YRL_F$C29_YRL_F &lt;- (C29_YRL_F$numCs3/(C29_YRL_F$numCs3+C29_YRL_F$numTs3))
tab &lt;- read.table('D_Ko_C31_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C31_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C31_ADL_M) &lt;- c('site','chr','start','end','numCs4','numTs4','Sites4');C31_ADL_M$C31_ADL_M &lt;- (C31_ADL_M$numCs4/(C31_ADL_M$numCs4+C31_ADL_M$numTs4))
tab &lt;- read.table('D_Ko_C31_BL_YRL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C31_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C31_YRL_M) &lt;- c('site','chr','start','end','numCs5','numTs5','Sites5');C31_YRL_M$C31_YRL_M &lt;- (C31_YRL_M$numCs5/(C31_YRL_M$numCs5+C31_YRL_M$numTs5))
tab &lt;- read.table('D_Ko_C36_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C36_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C36_ADL_M) &lt;- c('site','chr','start','end','numCs6','numTs6','Sites6');C36_ADL_M$C36_ADL_M &lt;- (C36_ADL_M$numCs6/(C36_ADL_M$numCs6+C36_ADL_M$numTs6))
tab &lt;- read.table('D_Ko_C36_BL_CHK_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C36_CHK_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C36_CHK_M) &lt;- c('site','chr','start','end','numCs7','numTs7','Sites7');C36_CHK_M$C36_CHK_M &lt;- (C36_CHK_M$numCs7/(C36_CHK_M$numCs7+C36_CHK_M$numTs7))
tab &lt;- read.table('D_Ko_C36_BL_YRL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C36_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C36_YRL_M) &lt;- c('site','chr','start','end','numCs8','numTs8','Sites8');C36_YRL_M$C36_YRL_M &lt;- (C36_YRL_M$numCs8/(C36_YRL_M$numCs8+C36_YRL_M$numTs8))
tab &lt;- read.table('D_Ko_C45_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_ADL_F) &lt;- c('site','chr','start','end','numCs9','numTs9','Sites9');C45_ADL_F$C45_ADL_F &lt;- (C45_ADL_F$numCs9/(C45_ADL_F$numCs9+C45_ADL_F$numTs9))
tab &lt;- read.table('D_Ko_C45_BL_CHK_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_CHK_F) &lt;- c('site','chr','start','end','numCs10','numTs10','Sites10');C45_CHK_F$C45_CHK_F &lt;- (C45_CHK_F$numCs10/(C45_CHK_F$numCs10+C45_CHK_F$numTs10))
tab &lt;- read.table('D_Ko_C45_BL_YRL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_YRL_F) &lt;- c('site','chr','start','end','numCs11','numTs11','Sites11');C45_YRL_F$C45_YRL_F &lt;- (C45_YRL_F$numCs11/(C45_YRL_F$numCs11+C45_YRL_F$numTs11))
tab &lt;- read.table('S_Up_H59_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_ADL_M) &lt;- c('site','chr','start','end','numCs12','numTs12','Sites12');H59_ADL_M$H59_ADL_M &lt;- (H59_ADL_M$numCs12/(H59_ADL_M$numCs12+H59_ADL_M$numTs12))
tab &lt;- read.table('S_Up_H59_BL_CHK_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_CHK_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_CHK_M) &lt;- c('site','chr','start','end','numCs13','numTs13','Sites13');H59_CHK_M$H59_CHK_M &lt;- (H59_CHK_M$numCs13/(H59_CHK_M$numCs13+H59_CHK_M$numTs13))
tab &lt;- read.table('S_Up_H59_BL_YRL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_YRL_M) &lt;- c('site','chr','start','end','numCs14','numTs14','Sites14');H59_YRL_M$H59_YRL_M &lt;- (H59_YRL_M$numCs14/(H59_YRL_M$numCs14+H59_YRL_M$numTs14))
tab &lt;- read.table('S_Up_H60_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_ADL_F) &lt;- c('site','chr','start','end','numCs15','numTs15','Sites15');H60_ADL_F$H60_ADL_F &lt;- (H60_ADL_F$numCs15/(H60_ADL_F$numCs15+H60_ADL_F$numTs15))
tab &lt;- read.table('S_Up_H60_BL_CHK_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_CHK_F) &lt;- c('site','chr','start','end','numCs16','numTs16','Sites16');H60_CHK_F$H60_CHK_F &lt;- (H60_CHK_F$numCs16/(H60_CHK_F$numCs16+H60_CHK_F$numTs16))
tab &lt;- read.table('S_Up_H60_BL_YRL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_YRL_F) &lt;- c('site','chr','start','end','numCs17','numTs17','Sites17');H60_YRL_F$H60_YRL_F &lt;- (H60_YRL_F$numCs17/(H60_YRL_F$numCs17+H60_YRL_F$numTs17))
tab &lt;- read.table('S_Up_H65_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H65_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H65_ADL_F) &lt;- c('site','chr','start','end','numCs18','numTs18','Sites18');H65_ADL_F$H65_ADL_F &lt;- (H65_ADL_F$numCs18/(H65_ADL_F$numCs18+H65_ADL_F$numTs18))
tab &lt;- read.table('S_Up_H65_BL_CHK_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H65_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H65_CHK_F) &lt;- c('site','chr','start','end','numCs19','numTs19','Sites19');H65_CHK_F$H65_CHK_F &lt;- (H65_CHK_F$numCs19/(H65_CHK_F$numCs19+H65_CHK_F$numTs19))
tab &lt;- read.table('S_Up_H65_BL_YRL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H65_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H65_YRL_F) &lt;- c('site','chr','start','end','numCs20','numTs20','Sites20');H65_YRL_F$H65_YRL_F &lt;- (H65_YRL_F$numCs20/(H65_YRL_F$numCs20+H65_YRL_F$numTs20))
tab &lt;- read.table('S_Up_H75_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H75_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H75_ADL_M) &lt;- c('site','chr','start','end','numCs21','numTs21','Sites21');H75_ADL_M$H75_ADL_M &lt;- (H75_ADL_M$numCs21/(H75_ADL_M$numCs21+H75_ADL_M$numTs21))
tab &lt;- read.table('S_Up_H75_BL_CHK_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H75_CHK_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H75_CHK_M) &lt;- c('site','chr','start','end','numCs22','numTs22','Sites22');H75_CHK_M$H75_CHK_M &lt;- (H75_CHK_M$numCs22/(H75_CHK_M$numCs22+H75_CHK_M$numTs22))
tab &lt;- read.table('S_Up_H75_BL_YRL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H75_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H75_YRL_M) &lt;- c('site','chr','start','end','numCs23','numTs23','Sites23');H75_YRL_M$H75_YRL_M &lt;- (H75_YRL_M$numCs23/(H75_YRL_M$numCs23+H75_YRL_M$numTs23))

head(H75_YRL_M)

master &lt;- Reduce(function(x,y) merge(x = x, y = y, by=c('site','chr','start','end')),
                 list(C29_ADL_F,C29_CHK_F,C29_YRL_F,C31_ADL_M,C31_YRL_M,C36_ADL_M,C36_CHK_M,C36_YRL_M,C45_ADL_F,C45_CHK_F,C45_YRL_F,H59_ADL_M,H59_CHK_M,H59_YRL_M,H60_ADL_F,H60_CHK_F,H60_YRL_F,H65_ADL_F,H65_CHK_F,H65_YRL_F,H75_ADL_M,H75_CHK_M,H75_YRL_M))
head(master)

#calculate coverage and CpGs
cov &lt;- master %&gt;% mutate(minsite1 = ifelse(Sites1 &lt; 3, NA, Sites1),
                         minsite2 = ifelse(Sites2 &lt; 3, NA, Sites2),
                         minsite3 = ifelse(Sites3 &lt; 3, NA, Sites3),
                         minsite4 = ifelse(Sites4 &lt; 3, NA, Sites4),
                         minsite5 = ifelse(Sites5 &lt; 3, NA, Sites5),
                         minsite6 = ifelse(Sites6 &lt; 3, NA, Sites6),
                         minsite7 = ifelse(Sites7 &lt; 3, NA, Sites7),
                         minsite8 = ifelse(Sites8 &lt; 3, NA, Sites8),
                         minsite9 = ifelse(Sites9 &lt; 3, NA, Sites9),
                         minsite10 = ifelse(Sites10 &lt; 3, NA, Sites10),
                         minsite11 = ifelse(Sites11 &lt; 3, NA, Sites11),
                         minsite12 = ifelse(Sites12 &lt; 3, NA, Sites12),
                         minsite13 = ifelse(Sites13 &lt; 3, NA, Sites13),
                         minsite14 = ifelse(Sites14 &lt; 3, NA, Sites14),
                         minsite15 = ifelse(Sites15 &lt; 3, NA, Sites15),
                         minsite16 = ifelse(Sites16 &lt; 3, NA, Sites16),
                         minsite17 = ifelse(Sites17 &lt; 3, NA, Sites17),
                         minsite18 = ifelse(Sites18 &lt; 3, NA, Sites18),
                         minsite19 = ifelse(Sites19 &lt; 3, NA, Sites19),
                         minsite20 = ifelse(Sites20 &lt; 3, NA, Sites20),
                         minsite21 = ifelse(Sites21 &lt; 3, NA, Sites21),
                         minsite22 = ifelse(Sites22 &lt; 3, NA, Sites22),
                         minsite23 = ifelse(Sites23 &lt; 3, NA, Sites23))

#count NAs
colSums(is.na(cov))

#filter according to missingness
sitedat &lt;- cov[rowSums(is.na(cov[grepl('^minsite', names(cov))])) &lt;= 4, ]
nrow(cov)
nrow(sitedat)

master &lt;- sitedat

#define groups
master$MALE &lt;- rowMeans(master[grepl('_M$', names(master))],na.rm=TRUE) #0=F  
master$FEMALE &lt;- rowMeans(master[grepl('_F$', names(master))],na.rm=TRUE) #1=M
master$ADULT &lt;- rowMeans(master[grepl('_ADL|_YRL', names(master))],na.rm=TRUE) #0=A
master$CHICK &lt;- rowMeans(master[grepl('_CHK_', names(master))],na.rm=TRUE) #1=C
master$HOODED &lt;- rowMeans(master[grepl('^H', names(master))],na.rm=TRUE) #1=C
master$CARRION &lt;- rowMeans(master[grepl('^C', names(master))],na.rm=TRUE) #0=H
compare &lt;- master[,c(1,(ncol(master)-4-1):ncol(master))]
head(compare)
#now we must do pairwise comparisons between our 3 treatments for % 5mC
compare[8] &lt;- compare[2]-compare[3]
compare[9] &lt;- compare[4]-compare[5]
compare[10] &lt;- compare[6]-compare[7]
head(compare)
win_diff &lt;- compare[,c(8,9,10)]

#merge the total percent diff with the original frame
master_meth &lt;- cbind(master,win_diff)
colnames(master_meth)[colnames(master_meth) == 'MALE.1'] &lt;- 'sex_M.F'
colnames(master_meth)[colnames(master_meth) == 'ADULT.1'] &lt;- 'stage_ADL.CHK'
colnames(master_meth)[colnames(master_meth) == 'HOODED.1'] &lt;- 'species_H.C'
nrow(master_meth)
names(master_meth)


#now subset for GLMM # C=1 H=0 / F=0 M=1 / ADL+YRL=0 CHK=1
IND1 &lt;- as.data.frame(c(master_meth[1],&quot;C29&quot;,master_meth[5], master_meth[6],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND2 &lt;- as.data.frame(c(master_meth[1],&quot;C29&quot;,master_meth[9], master_meth[10],&quot;1&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND3 &lt;- as.data.frame(c(master_meth[1],&quot;C29&quot;,master_meth[13], master_meth[14],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND4 &lt;- as.data.frame(c(master_meth[1],&quot;C31&quot;,master_meth[17], master_meth[18],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND5 &lt;- as.data.frame(c(master_meth[1],&quot;C31&quot;,master_meth[21], master_meth[22],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND6 &lt;- as.data.frame(c(master_meth[1],&quot;C36&quot;,master_meth[25], master_meth[26],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND7 &lt;- as.data.frame(c(master_meth[1],&quot;C36&quot;,master_meth[29], master_meth[30],&quot;1&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND8 &lt;- as.data.frame(c(master_meth[1],&quot;C36&quot;,master_meth[33], master_meth[34],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND9 &lt;- as.data.frame(c(master_meth[1],&quot;C45&quot;,master_meth[37], master_meth[38],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND10 &lt;- as.data.frame(c(master_meth[1],&quot;C45&quot;,master_meth[41], master_meth[42],&quot;1&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND11 &lt;- as.data.frame(c(master_meth[1],&quot;C45&quot;,master_meth[45], master_meth[46],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND12 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[49], master_meth[50],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND13 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[53], master_meth[54],&quot;0&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND14 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[57], master_meth[58],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND15 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[61], master_meth[62],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND16 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[65], master_meth[66],&quot;0&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND17 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[69], master_meth[70],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND18 &lt;- as.data.frame(c(master_meth[1],&quot;H65&quot;,master_meth[73], master_meth[74],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND19 &lt;- as.data.frame(c(master_meth[1],&quot;H65&quot;,master_meth[77], master_meth[78],&quot;0&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND20 &lt;- as.data.frame(c(master_meth[1],&quot;H65&quot;,master_meth[81], master_meth[82],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND21 &lt;- as.data.frame(c(master_meth[1],&quot;H75&quot;,master_meth[85], master_meth[86],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND22 &lt;- as.data.frame(c(master_meth[1],&quot;H75&quot;,master_meth[89], master_meth[90],&quot;0&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND23 &lt;- as.data.frame(c(master_meth[1],&quot;H75&quot;,master_meth[93], master_meth[94],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))

head(IND4)
head(IND23)

#Bind them all together and order it by window
datmeth &lt;- rbind(IND1,IND2,IND3,IND4,IND5,IND6,IND7,IND8,IND9,IND10,IND11,IND12,IND13,IND14,IND15,IND16,IND17,IND18,IND19,IND20,IND21,IND22,IND23)
datmeth &lt;- datmeth[order(datmeth$CGI),]

head(datmeth)

#sanity check 
nrow(datmeth)/23

#save some files we might need later 
write.csv(datmeth,file=&quot;CG_GLMM_Input_5x.csv&quot;,row.names=FALSE)
write.csv(master_meth,file=&quot;CG_FULL_5x.csv&quot;,row.names=FALSE)

#now we can start here 
datmeth &lt;- read.csv(&quot;CG_GLMM_Input_5x.csv&quot;,header=TRUE)
head(datmeth)
nrow(datmeth)/23
#set these as factor variables 
datmeth$Species &lt;- as.factor(datmeth$Species)
datmeth$Stage &lt;- as.factor(datmeth$Stage)
datmeth$Sex &lt;- as.factor(datmeth$Sex)
datmeth$ID &lt;- as.factor(datmeth$ID)

##### MODEL #####
DMA_GLMM_pValues &lt;- NULL
DMA_GLMM_Estimates &lt;- NULL
DMA_GLMM_SEs &lt;- NULL
DMA_GLMM_RandomEffect_Var &lt;- NULL
DMA_GLMM_DispersionStat &lt;- NULL
DMA_GLMM_Singular &lt;- NULL

for (i in seq(1, nrow(datmeth), by = 23)) {
  tryCatch({
    cat('\n Running model for CpG site: ',((i-1)/23))
    # model each site
    CpGsite &lt;- datmeth[i:(i + 22), ]
    # run the model and get the contrasts between sex, stage, species
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Sex + Stage + Species + (1 | ID) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+08)))
    DMA_GLMM_Singularf &lt;- isSingular(glmm_CpG)
    sum_mod &lt;- summary(glmm_CpG)
    
    ## 1 random effects ( (1 | ID) )
    GLMM_RandomEffect_Var &lt;- as.data.frame(VarCorr(glmm_CpG))$sdcor
    
    # calculate dispersion statistic (following AF Zuur, JM Hilbe
    # &amp; EN Ieno. A beginner’s guide to GLM and GLMM with R - a
    # frequentist and Bayesian perspective for
    # ecologists(Highland Statistics Ltd., 2013).)
    E1 &lt;- residuals(glmm_CpG)
    # number of parameters: fixed effects + 1 random effect
    p1 &lt;- length(fixef(glmm_CpG)) + 1
    GLMM_DispersionStat &lt;- sum(E1^2)/(nrow(CpGsite) - p1)
    # format estimates to add estimates for each loop to
    # estimates from previous loops
    
    # TO GET THE COLUMN HEADERS WITH THE CONTRASTS, check the excel file. First I look at the glmm_CpG_contrast object, which lists the models in order of 1-8, for this comparison. From here, make the 28 pairwise comparison charts, and substitute the 0 and 1 with your variables
    GLMM_Estimates_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,1], Stage1 = sum_mod$coefficients[3,1], Species1 = sum_mod$coefficients[4,1])
    GLMM_SEs_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,2], Stage1 = sum_mod$coefficients[3,2], Species1 = sum_mod$coefficients[4,2])
    GLMM_pValues_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,4], Stage1 = sum_mod$coefficients[3,4], Species1 = sum_mod$coefficients[4,4])
    GLMM_RandomEffect_Var_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                      1]), ID = GLMM_RandomEffect_Var[1])
    GLMM_DispersionStat_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                    1]), DispStat = GLMM_DispersionStat)
    # add estimates for each loop to estimates from previous
    # loops
    DMA_GLMM_pValues &lt;- rbind(DMA_GLMM_pValues, GLMM_pValues_f)
    DMA_GLMM_Estimates &lt;- rbind(DMA_GLMM_Estimates, GLMM_Estimates_f)
    DMA_GLMM_SEs &lt;- rbind(DMA_GLMM_SEs, GLMM_SEs_f)
    DMA_GLMM_RandomEffect_Var &lt;- rbind(DMA_GLMM_RandomEffect_Var,GLMM_RandomEffect_Var_f)
    DMA_GLMM_DispersionStat &lt;- rbind(DMA_GLMM_DispersionStat,GLMM_DispersionStat_f)
    DMA_GLMM_Singular &lt;- rbind(DMA_GLMM_Singular,DMA_GLMM_Singularf)
    
    #Save errors to this output
  }, error=function(e){cat(unique(CpGsite[,1]), &quot;\n&quot;)
    
  }
  )
}

# 3. Save loop results
save(DMA_GLMM_pValues, DMA_GLMM_Estimates, DMA_GLMM_SEs, DMA_GLMM_RandomEffect_Var,
     DMA_GLMM_DispersionStat,DMA_GLMM_Singular, file = &quot;CG_DMA_CrowResults_5x.RData&quot;)

#should be the samem otherwise we have models that didn't converge 
nrow(DMA_GLMM_pValues)
nrow(datmeth)/23</pre>
=== Volcanos ===

<pre class="#">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(LICORS)
library(matrixStats)
library(viridis)
library(RColorBrewer)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/CG/dplyr&quot;)

load(&quot;CG_DMA_CrowResults_5x.RData&quot;)

#check out some of the data
head(DMA_GLMM_Estimates)
dim(DMA_GLMM_Estimates)
head(DMA_GLMM_pValues)
head(DMA_GLMM_SEs)
head(DMA_GLMM_Singular)


#let's check out the distributio of 5mC contrasts
multi.hist(DMA_GLMM_Estimates[,2:4],nrow=1,ncol=NULL,breaks=21)

#plot dispersion boxplot, we will exclude any sites outside the 99% interval
disp_limits &lt;- hdi(DMA_GLMM_DispersionStat$DispStat,credMass = 0.99)
disp_limits

# lower     upper 
# 0.0251642 1.3674338 

jpeg(&quot;plots/CG_dispersion_plot.jpg&quot;,units=&quot;in&quot;,res=300, height=6, width=5)
theme_set(theme_classic(base_size = 16))
dplot &lt;- ggplot(DMA_GLMM_DispersionStat,aes(y=DispStat,x=0))+geom_violin()+theme_classic(base_size = 16)+
  geom_jitter(width=0.1)+
  geom_text(aes(y = (disp_limits[2]+0.05),x=0.2, label = &quot;Upper Limit&quot;))+
  geom_hline(yintercept = disp_limits[2],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  geom_text(aes(y = (disp_limits[1]+0.05),x=0.2, label = &quot;Lower Limit&quot;))+
  geom_hline(yintercept = disp_limits[1],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  xlab(&quot;&quot;)+ylab(&quot;Dispersion Statistic&quot;)+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
grid.arrange(dplot)
dev.off()

#subset bad sites
bad_sites &lt;- subset(DMA_GLMM_DispersionStat,DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2])
nrow(bad_sites)

# calculate 10% differences, now we care about direction so we re-do this, since before it was absolute value 
meth &lt;- read.csv(&quot;CG_FULL_5x.csv&quot;,header=TRUE)
head(meth)

names(DMA_GLMM_pValues) &lt;- c('site','pSex','pStage','pSpecies')
names(DMA_GLMM_Estimates) &lt;- c('site','eSex','eStage','eSpecies')
names(DMA_GLMM_SEs) &lt;- c('site','sSex','sStage','sSpecies')
DMA_RF_S &lt;- cbind(DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular)
names(DMA_RF_S) &lt;- c('site','RandomEffect','IsSingular')
master_meth1 &lt;- merge(meth, DMA_GLMM_pValues, by='site')
master_meth2 &lt;- merge(master_meth1, DMA_GLMM_Estimates, by='site')
master_meth3 &lt;- merge(master_meth2, DMA_GLMM_SEs, by='site')
master_meth4 &lt;- merge(master_meth3, DMA_GLMM_DispersionStat, by='site')
master_meth &lt;- merge(master_meth4, DMA_RF_S, by='site')
head(master_meth)
nrow(master_meth)

#### Volcano with bonferonni
pthresh &lt;- (0.05/nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(pSex &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; pSpecies &gt; pthresh &amp; pStage &gt; pthresh, &quot;SEX&quot;, 
                                                   ifelse(pSpecies &lt; pthresh &amp; abs(species_H.C) &gt; 0.05 &amp;  pSex &gt; pthresh &amp; pStage &gt; pthresh,&quot;SPECIES&quot;,
                                                          ifelse(pStage &lt; pthresh &amp; abs(stage_ADL.CHK) &gt; 0.05  &amp; pSex &gt; pthresh &amp; pSpecies &gt; pthresh ,&quot;STAGE&quot;,
                                                                 ifelse(pSex &lt; pthresh &amp; pSpecies &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp;  pStage &gt; pthresh ,&quot;SEX_SPECIES&quot;, 
                                                                        ifelse(pSex &lt; pthresh &amp; pStage &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(stage_ADL.CHK) &gt; 0.05 &amp; pSex &gt; pthresh ,&quot;SEX_STAGE&quot;,
                                                                               ifelse(pSpecies &lt; pthresh &amp; pStage &lt; pthresh &amp; abs(species_H.C) &gt; 0.05 &amp; abs(stage_ADL.CHK) &gt; 0.05 &amp;  pSex &gt; pthresh ,&quot;SPECIES_STAGE&quot;,
                                                                                      ifelse(pSpecies &lt; pthresh &amp; pStage &lt; pthresh &amp;  pSex &lt; pthresh ,&quot;ALL&quot;,&quot;UNKNOWN&quot;))))))))
master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

### Or with FDR
pval &lt;- 0.05
master_meth$fSex &lt;- p.adjust(master_meth$pSex,method='BH',n=nrow(master_meth))
master_meth$fStage &lt;- p.adjust(master_meth$pStage,method='BH',n=nrow(master_meth))
master_meth$fSpecies &lt;- p.adjust(master_meth$pSpecies,method='BH',n=nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(fSex &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; fSpecies &gt; pval &amp; fStage &gt; pval, &quot;SEX&quot;, 
                                                   ifelse(fSpecies &lt; pval &amp; abs(species_H.C) &gt; 0.05 &amp;  fSex &gt; pval &amp; fStage &gt; pval,&quot;SPECIES&quot;,
                                                          ifelse(fStage &lt; pval &amp; abs(stage_ADL.CHK) &gt; 0.05  &amp; fSex &gt; pval &amp; fSpecies &gt; pval ,&quot;STAGE&quot;,
                                                                 ifelse(fSex &lt; pval &amp; fSpecies &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp;  fStage &gt; pval ,&quot;SEX_SPECIES&quot;, 
                                                                        ifelse(fSex &lt; pval &amp; fStage &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(stage_ADL.CHK) &gt; 0.05 &amp; fSex &gt; pval ,&quot;SEX_STAGE&quot;,
                                                                               ifelse(fSpecies &lt; pval &amp; fStage &lt; pval &amp; abs(species_H.C) &gt; 0.05 &amp; abs(stage_ADL.CHK) &gt; 0.05 &amp;  fSex &gt; pval ,&quot;SPECIES_STAGE&quot;,
                                                                                      ifelse(fSpecies &lt; pval &amp; fStage &lt; pval &amp;  fSex &lt; pval ,&quot;ALL&quot;,&quot;UNKNOWN&quot;))))))))


master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
#master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

#save for manhattan
write.csv(master_meth,file='CG_Manhattan_5x_bonferonni.csv')

#hunt for colors
#display.brewer.all(colorblindFriendly=TRUE) 
cols &lt;- brewer.pal(8,'Dark2')
#cols &lt;- inferno(5)
shapes &lt;- c(15,16,17,18,16,16,1)

#plot
p1 &lt;- ggplot(master_meth, aes(x=sex_M.F,y=threshold(-log10(pSex),max=quantile(-log10(pSex),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;STAGE&quot;=cols[2],&quot;SEX_STAGE&quot;=cols[6],&quot;SPECIES_STAGE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Sex&quot;)+
  ylab('-log10(p)')
p1

p2 &lt;- ggplot(master_meth, aes(x=stage_ADL.CHK,y=threshold(-log10(pStage),max=quantile(-log10(pStage),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR), size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;STAGE&quot;=cols[2],&quot;SEX_STAGE&quot;=cols[6],&quot;SPECIES_STAGE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Stage&quot;)+
  ylab('-log10(p)')
p2

p3 &lt;- ggplot(master_meth, aes(x=species_H.C,y=threshold(-log10(pSpecies),max=quantile(-log10(pSpecies),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR), size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;STAGE&quot;=cols[2],&quot;SEX_STAGE&quot;=cols[6],&quot;SPECIES_STAGE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  scale_shape_manual(values=shapes)+
  ggtitle(&quot;Species&quot;)+
  ylab('-log10(p)')
p3

#save it 
jpeg(&quot;plots/CG_DMA_Volcano_5x_bonferonni.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=12)
theme_set(theme_classic(base_size = 16))
grid.arrange(p1,p3,p2,nrow=1)
dev.off()


#save file
write.csv(master_meth,file='CG_DMA_DMRS_5x_bonferonni.csv',row.names=FALSE)
</pre>
== HZ 5x ==

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/HZ/dplyr/&quot;)

#import all the data and average by CGI

tab &lt;- read.table('D_Ba_H02_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H02 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H02) &lt;- c('site','chr','start','end','numCs1','numTs1','Sites1');D_Ba_H02$D_Ba_H02 &lt;- (D_Ba_H02$numCs1/(D_Ba_H02$numCs1+D_Ba_H02$numTs1))
tab &lt;- read.table('D_Ba_H09_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H09 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H09) &lt;- c('site','chr','start','end','numCs2','numTs2','Sites2');D_Ba_H09$D_Ba_H09 &lt;- (D_Ba_H09$numCs2/(D_Ba_H09$numCs2+D_Ba_H09$numTs2))
tab &lt;- read.table('D_Ba_H19_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H19 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H19) &lt;- c('site','chr','start','end','numCs3','numTs3','Sites3');D_Ba_H19$D_Ba_H19 &lt;- (D_Ba_H19$numCs3/(D_Ba_H19$numCs3+D_Ba_H19$numTs3))
tab &lt;- read.table('D_Ba_H21_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H21 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H21) &lt;- c('site','chr','start','end','numCs4','numTs4','Sites4');D_Ba_H21$D_Ba_H21 &lt;- (D_Ba_H21$numCs4/(D_Ba_H21$numCs4+D_Ba_H21$numTs4))
tab &lt;- read.table('D_Hi_C03_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Hi_C03 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Hi_C03) &lt;- c('site','chr','start','end','numCs5','numTs5','Sites5');D_Hi_C03$D_Hi_C03 &lt;- (D_Hi_C03$numCs5/(D_Hi_C03$numCs5+D_Hi_C03$numTs5))
tab &lt;- read.table('D_Ko_C22_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ko_C22 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ko_C22) &lt;- c('site','chr','start','end','numCs6','numTs6','Sites6');D_Ko_C22$D_Ko_C22 &lt;- (D_Ko_C22$numCs6/(D_Ko_C22$numCs6+D_Ko_C22$numTs6))
tab &lt;- read.table('D_Ko_C40_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ko_C40 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ko_C40) &lt;- c('site','chr','start','end','numCs7','numTs7','Sites7');D_Ko_C40$D_Ko_C40 &lt;- (D_Ko_C40$numCs7/(D_Ko_C40$numCs7+D_Ko_C40$numTs7))
tab &lt;- read.table('D_Ko_C42_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ko_C42 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ko_C42) &lt;- c('site','chr','start','end','numCs8','numTs8','Sites8');D_Ko_C42$D_Ko_C42 &lt;- (D_Ko_C42$numCs8/(D_Ko_C42$numCs8+D_Ko_C42$numTs8))
tab &lt;- read.table('D_Ku_H02_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ku_H02 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ku_H02) &lt;- c('site','chr','start','end','numCs9','numTs9','Sites9');D_Ku_H02$D_Ku_H02 &lt;- (D_Ku_H02$numCs9/(D_Ku_H02$numCs9+D_Ku_H02$numTs9))
tab &lt;- read.table('D_Lo_C19_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Lo_C19 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Lo_C19) &lt;- c('site','chr','start','end','numCs10','numTs10','Sites10');D_Lo_C19$D_Lo_C19 &lt;- (D_Lo_C19$numCs10/(D_Lo_C19$numCs10+D_Lo_C19$numTs10))
tab &lt;- read.table('D_Lo_C20_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Lo_C20 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Lo_C20) &lt;- c('site','chr','start','end','numCs11','numTs11','Sites11');D_Lo_C20$D_Lo_C20 &lt;- (D_Lo_C20$numCs11/(D_Lo_C20$numCs11+D_Lo_C20$numTs11))
tab &lt;- read.table('D_Ne_Y03_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y03 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y03) &lt;- c('site','chr','start','end','numCs12','numTs12','Sites12');D_Ne_Y03$D_Ne_Y03 &lt;- (D_Ne_Y03$numCs12/(D_Ne_Y03$numCs12+D_Ne_Y03$numTs12))
tab &lt;- read.table('D_Ne_Y14_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y14 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y14) &lt;- c('site','chr','start','end','numCs13','numTs13','Sites13');D_Ne_Y14$D_Ne_Y14 &lt;- (D_Ne_Y14$numCs13/(D_Ne_Y14$numCs13+D_Ne_Y14$numTs13))
tab &lt;- read.table('D_Ne_Y31_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y31 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y31) &lt;- c('site','chr','start','end','numCs14','numTs14','Sites14');D_Ne_Y31$D_Ne_Y31 &lt;- (D_Ne_Y31$numCs14/(D_Ne_Y31$numCs14+D_Ne_Y31$numTs14))
tab &lt;- read.table('D_Ne_Y36_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y36 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y36) &lt;- c('site','chr','start','end','numCs15','numTs15','Sites15');D_Ne_Y36$D_Ne_Y36 &lt;- (D_Ne_Y36$numCs15/(D_Ne_Y36$numCs15+D_Ne_Y36$numTs15))
tab &lt;- read.table('D_Ne_Y40_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y40 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y40) &lt;- c('site','chr','start','end','numCs16','numTs16','Sites16');D_Ne_Y40$D_Ne_Y40 &lt;- (D_Ne_Y40$numCs16/(D_Ne_Y40$numCs16+D_Ne_Y40$numTs16))
tab &lt;- read.table('D_Ne_Y42_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y42 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y42) &lt;- c('site','chr','start','end','numCs17','numTs17','Sites17');D_Ne_Y42$D_Ne_Y42 &lt;- (D_Ne_Y42$numCs17/(D_Ne_Y42$numCs17+D_Ne_Y42$numTs17))
tab &lt;- read.table('D_Rb_Y07_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y07 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y07) &lt;- c('site','chr','start','end','numCs18','numTs18','Sites18');D_Rb_Y07$D_Rb_Y07 &lt;- (D_Rb_Y07$numCs18/(D_Rb_Y07$numCs18+D_Rb_Y07$numTs18))
tab &lt;- read.table('D_Rb_Y08_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y08 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y08) &lt;- c('site','chr','start','end','numCs19','numTs19','Sites19');D_Rb_Y08$D_Rb_Y08 &lt;- (D_Rb_Y08$numCs19/(D_Rb_Y08$numCs19+D_Rb_Y08$numTs19))
tab &lt;- read.table('D_Rb_Y13_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y13 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y13) &lt;- c('site','chr','start','end','numCs20','numTs20','Sites20');D_Rb_Y13$D_Rb_Y13 &lt;- (D_Rb_Y13$numCs20/(D_Rb_Y13$numCs20+D_Rb_Y13$numTs20))
tab &lt;- read.table('D_Rb_Y15_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y15 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y15) &lt;- c('site','chr','start','end','numCs21','numTs21','Sites21');D_Rb_Y15$D_Rb_Y15 &lt;- (D_Rb_Y15$numCs21/(D_Rb_Y15$numCs21+D_Rb_Y15$numTs21))
tab &lt;- read.table('S_Up_H77_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);S_Up_H77 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(S_Up_H77) &lt;- c('site','chr','start','end','numCs22','numTs22','Sites22');S_Up_H77$S_Up_H77 &lt;- (S_Up_H77$numCs22/(S_Up_H77$numCs22+S_Up_H77$numTs22))
tab &lt;- read.table('S_Up_H80_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);S_Up_H80 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(S_Up_H80) &lt;- c('site','chr','start','end','numCs23','numTs23','Sites23');S_Up_H80$S_Up_H80 &lt;- (S_Up_H80$numCs23/(S_Up_H80$numCs23+S_Up_H80$numTs23))
tab &lt;- read.table('S_Up_H81_BL_CHK_M.CGI.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);S_Up_H81 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(S_Up_H81) &lt;- c('site','chr','start','end','numCs24','numTs24','Sites24');S_Up_H81$S_Up_H81 &lt;- (S_Up_H81$numCs24/(S_Up_H81$numCs24+S_Up_H81$numTs24))

head(S_Up_H81)

master &lt;- Reduce(function(x,y) merge(x = x, y = y, by=c('site','chr','start','end')),
                 list(D_Ba_H02,D_Ba_H09,D_Ba_H19,D_Ba_H21,D_Hi_C03,D_Ko_C22,D_Ko_C40,D_Ko_C42,D_Ku_H02,D_Lo_C19,D_Lo_C20,D_Ne_Y03,D_Ne_Y14,D_Ne_Y31,D_Ne_Y36,D_Ne_Y40,D_Ne_Y42,D_Rb_Y07,D_Rb_Y08,D_Rb_Y13,D_Rb_Y15,S_Up_H77,S_Up_H80,S_Up_H81))
head(master)

#calculate coverage and CpGs
cov &lt;- master %&gt;% mutate(minsite1 = ifelse(Sites1 &lt; 3, NA, Sites1),
                         minsite2 = ifelse(Sites2 &lt; 3, NA, Sites2),
                         minsite3 = ifelse(Sites3 &lt; 3, NA, Sites3),
                         minsite4 = ifelse(Sites4 &lt; 3, NA, Sites4),
                         minsite5 = ifelse(Sites5 &lt; 3, NA, Sites5),
                         minsite6 = ifelse(Sites6 &lt; 3, NA, Sites6),
                         minsite7 = ifelse(Sites7 &lt; 3, NA, Sites7),
                         minsite8 = ifelse(Sites8 &lt; 3, NA, Sites8),
                         minsite9 = ifelse(Sites9 &lt; 3, NA, Sites9),
                         minsite10 = ifelse(Sites10 &lt; 3, NA, Sites10),
                         minsite11 = ifelse(Sites11 &lt; 3, NA, Sites11),
                         minsite12 = ifelse(Sites12 &lt; 3, NA, Sites12),
                         minsite13 = ifelse(Sites13 &lt; 3, NA, Sites13),
                         minsite14 = ifelse(Sites14 &lt; 3, NA, Sites14),
                         minsite15 = ifelse(Sites15 &lt; 3, NA, Sites15),
                         minsite16 = ifelse(Sites16 &lt; 3, NA, Sites16),
                         minsite17 = ifelse(Sites17 &lt; 3, NA, Sites17),
                         minsite18 = ifelse(Sites18 &lt; 3, NA, Sites18),
                         minsite19 = ifelse(Sites19 &lt; 3, NA, Sites19),
                         minsite20 = ifelse(Sites20 &lt; 3, NA, Sites20),
                         minsite21 = ifelse(Sites21 &lt; 3, NA, Sites21),
                         minsite22 = ifelse(Sites22 &lt; 3, NA, Sites22),
                         minsite23 = ifelse(Sites23 &lt; 3, NA, Sites23),
                         minsite24 = ifelse(Sites24 &lt; 3, NA, Sites24))

#count NAs
colSums(is.na(cov))

#filter according to missingness
sitedat &lt;- cov[rowSums(is.na(cov[grepl('^minsite', names(cov))])) &lt;= 4, ]
nrow(cov)
nrow(sitedat)

master &lt;- sitedat
nrow(master)

#count NAs
colSums(is.na(master))

#define groups
master$HOODED &lt;- rowMeans(master[grepl('^S_Up', names(master))],na.rm=TRUE)
master$CARRION &lt;- rowMeans(master[grepl('^D_Ko', names(master))],na.rm=TRUE)

compare &lt;- master[,c(1,(ncol(master)-0-1):ncol(master))]
head(compare)
#now we must do 15 pairwise comparisons between our 3 treatments for % 5mC, keep track of this in the template file
compare[4] &lt;- compare[2]-compare[3]

head(compare)
win_diff &lt;- compare[,c(4)]

#merge the total percent diff with the original frame
master_meth &lt;- cbind(master,win_diff)
colnames(master_meth)[colnames(master_meth) == 'win_diff'] &lt;- 'species_H.C'
nrow(master_meth)
names(master_meth)

#create the GLMM input #C=0 Hybrid=1 H=2 / Years / etc
IND1 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H02&quot;,master_meth[5], master_meth[6],&quot;0.574193&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND2 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H09&quot;,master_meth[9], master_meth[10],&quot;0.5466904&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND3 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H19&quot;,master_meth[13], master_meth[14],&quot;0.4055915&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND4 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H21&quot;,master_meth[17], master_meth[18],&quot;0.5258975&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND5 &lt;- as.data.frame(c(master_meth[1],&quot;D_Hi_C03&quot;,master_meth[21], master_meth[22],&quot;0.4279232&quot;,&quot;1&quot;,&quot;466&quot;,&quot;1&quot;,&quot;Hi_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND6 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ko_C22&quot;,master_meth[25], master_meth[26],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;Ko_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND7 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ko_C40&quot;,master_meth[29], master_meth[30],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;Ko_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND8 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ko_C42&quot;,master_meth[33], master_meth[34],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;Ko_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND9 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ku_H02&quot;,master_meth[37], master_meth[38],&quot;0.7063256&quot;,&quot;0&quot;,&quot;589&quot;,&quot;1&quot;,&quot;Ku_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND10 &lt;- as.data.frame(c(master_meth[1],&quot;D_Lo_C19&quot;,master_meth[41], master_meth[42],&quot;0.2260644&quot;,&quot;1&quot;,&quot;440&quot;,&quot;1&quot;,&quot;Lo_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND11 &lt;- as.data.frame(c(master_meth[1],&quot;D_Lo_C20&quot;,master_meth[45], master_meth[46],&quot;0.3307552&quot;,&quot;1&quot;,&quot;440&quot;,&quot;1&quot;,&quot;Lo_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND12 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y03&quot;,master_meth[49], master_meth[50],&quot;0.4295311&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND13 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y14&quot;,master_meth[53], master_meth[54],&quot;0.6457692&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND14 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y31&quot;,master_meth[57], master_meth[58],&quot;0.7511844&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND15 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y36&quot;,master_meth[61], master_meth[62],&quot;0.6105241&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND16 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y40&quot;,master_meth[65], master_meth[66],&quot;0.6080164&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND17 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y42&quot;,master_meth[69], master_meth[70],&quot;0.5530574&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND18 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y07&quot;,master_meth[73], master_meth[74],&quot;0.6271691&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND19 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y08&quot;,master_meth[77], master_meth[78],&quot;0.5266439&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND20 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y13&quot;,master_meth[81], master_meth[82],&quot;0.7101439&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND21 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y15&quot;,master_meth[85], master_meth[86],&quot;0.4707096&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND22 &lt;- as.data.frame(c(master_meth[1],&quot;S_Up_H77&quot;,master_meth[89], master_meth[90],&quot;1&quot;,&quot;1&quot;,&quot;1476&quot;,&quot;2&quot;,&quot;Up_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND23 &lt;- as.data.frame(c(master_meth[1],&quot;S_Up_H80&quot;,master_meth[93], master_meth[94],&quot;1&quot;,&quot;1&quot;,&quot;1476&quot;,&quot;2&quot;,&quot;Up_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND24 &lt;- as.data.frame(c(master_meth[1],&quot;S_Up_H81&quot;,master_meth[97], master_meth[98],&quot;1&quot;,&quot;1&quot;,&quot;1476&quot;,&quot;2&quot;,&quot;Up_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))

head(IND4)
head(IND24)

#Bind them all together and order it by window
datmeth &lt;- rbind(IND1,IND2,IND3,IND4,IND5,IND6,IND7,IND8,IND9,IND10,IND11,IND12,IND13,IND14,IND15,IND16,IND17,IND18,IND19,IND20,IND21,IND22,IND23,IND24)
datmeth &lt;- datmeth[order(datmeth$CGI),]

head(datmeth)

#sanity check 
nrow(datmeth)/24

#plot correlations between variables
dats &lt;- read.table(&quot;metadata_hz.txt&quot;,header=TRUE)
text &lt;- cor(dats$Hybrid_Index,dats$Year,method='pearson')
ggplot(dats,aes(x=Year,y=Hybrid_Index,col=Hybrid_Index))+geom_point()+theme_classic()+
  scale_color_gradient(low='black',high='grey90')+
  geom_smooth(method='lm')+ggtitle('Distance to Hybrid Index')+
  geom_text(aes(-Inf,Inf),label=paste(&quot;Pearson cor = &quot;,round(text,2)),vjust=2,hjust=-.15,cex=4,col='black')


#save some files we might need later 
write.csv(datmeth,file=&quot;HZ_GLMM_Input_5x.csv&quot;,row.names=FALSE)
write.csv(master_meth,file=&quot;HZ_FULL_5x.csv&quot;,row.names=FALSE)

#now we can start here 
datmeth &lt;- read.csv(&quot;HZ_GLMM_Input_5x.csv&quot;,header=TRUE)
head(datmeth)
nrow(datmeth)/24
#set these as factor variables 
datmeth$Hybrid_Index &lt;- as.numeric(datmeth$Hybrid_Index)
datmeth$Year &lt;- as.factor(datmeth$Year)
datmeth$Locality &lt;- as.factor(datmeth$Locality)
datmeth$ID &lt;- as.factor(datmeth$ID)
datmeth$Classification &lt;- as.factor(datmeth$Classification)

#and scale the continuous variables
datmeth &lt;- datmeth %&gt;% mutate_at(c('Hybrid_Index', 'Distance'), ~(scale(.) %&gt;% as.vector))

##### MODEL #####
DMA_GLMM_pValues &lt;- NULL
DMA_GLMM_Estimates &lt;- NULL
DMA_GLMM_RandomEffect_Var &lt;- NULL
DMA_GLMM_SEs &lt;- NULL
DMA_GLMM_DispersionStat &lt;- NULL
DMA_GLMM_Singular &lt;- NULL

for (i in seq(1, nrow(datmeth), by = 24)) {
  tryCatch({
    cat('\n Running model for CpG site: ',((i-1)/24))
    # model each site
    CpGsite &lt;- datmeth[i:(i + 23), ]
    # run the model examining relationship between hybrid index and locality 
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Hybrid_Index + (1|Year) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+08)))
    DMA_GLMM_Singularf &lt;- isSingular(glmm_CpG)
    sum_mod &lt;- summary(glmm_CpG)
    
    ## For random effect 
    GLMM_RandomEffect_Var &lt;- as.data.frame(VarCorr(glmm_CpG))$sdcor
    
    # calculate dispersion statistic (following AF Zuur, JM Hilbe
    # &amp; EN Ieno. A beginner’s guide to GLM and GLMM with R - a
    # frequentist and Bayesian perspective for
    # ecologists(Highland Statistics Ltd., 2013).)
    E1 &lt;- residuals(glmm_CpG)
    # number of parameters: fixed effects + 1 random effect
    p1 &lt;- length(fixef(glmm_CpG)) + 1
    GLMM_DispersionStat &lt;- sum(E1^2)/(nrow(CpGsite) - p1)
    # format estimates to add estimates for each loop to
    # estimates from previous loops
    
    GLMM_pValues_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Hybrid_Index = sum_mod$coefficients[2,4])
    GLMM_SEs_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Hybrid_Index = sum_mod$coefficients[2,2])
    GLMM_Estimates_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Hybrid_Index = sum_mod$coefficients[2,1])
    GLMM_DispersionStat_f &lt;- data.frame(site = as.character(CpGsite[1,1]), DispStat = GLMM_DispersionStat)
    GLMM_RandomEffect_Var_f &lt;- data.frame(site = as.character(CpGsite[1,1]), ID = GLMM_RandomEffect_Var[1])
    # add estimates for each loop to estimates from previous
    # loops
    DMA_GLMM_pValues &lt;- rbind(DMA_GLMM_pValues, GLMM_pValues_f)
    DMA_GLMM_Estimates &lt;- rbind(DMA_GLMM_Estimates, GLMM_Estimates_f)
    DMA_GLMM_SEs &lt;- rbind(DMA_GLMM_SEs, GLMM_SEs_f)
    DMA_GLMM_RandomEffect_Var &lt;- rbind(DMA_GLMM_RandomEffect_Var,GLMM_RandomEffect_Var_f)
    DMA_GLMM_DispersionStat &lt;- rbind(DMA_GLMM_DispersionStat,GLMM_DispersionStat_f)
    DMA_GLMM_Singular &lt;- rbind(DMA_GLMM_Singular,DMA_GLMM_Singularf)
    
    #Save errors to this output
  }, error=function(e){cat(unique(CpGsite[,1]), &quot;\n&quot;)
  }
  )
}

# 3. Save loop results
save(DMA_GLMM_pValues, DMA_GLMM_Estimates, DMA_GLMM_SEs, 
     DMA_GLMM_DispersionStat, DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular, file = &quot;HZ_DMA_CrowResults_5x.RData&quot;)

#should be the samem otherwise we have models that didn't converge 
nrow(DMA_GLMM_pValues)
nrow(datmeth)/24
</pre>
=== Volcanos ===

<pre class="##">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(LICORS)
library(RColorBrewer)
library(viridis)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/HZ/dplyr/&quot;)

load(&quot;HZ_DMA_CrowResults_5x.RData&quot;)

#check out some of the data
head(DMA_GLMM_Estimates)
dim(DMA_GLMM_Estimates)
head(DMA_GLMM_pValues)
head(DMA_GLMM_SEs)


#let's check out the distributio of 5mC contrasts
multi.hist(DMA_GLMM_Estimates[,2:2],nrow=NULL,ncol=NULL,breaks=21)

#plot dispersion boxplot, we will exclude any sites outside the 99% interval
disp_limits &lt;- hdi(DMA_GLMM_DispersionStat$DispStat,credMass = 0.99)
disp_limits

#lower       upper 
#0.002117176 0.459554568

jpeg(&quot;plots/HZ_dispersion_plot.jpg&quot;,units=&quot;in&quot;,res=300, height=6, width=5)
theme_set(theme_classic(base_size = 16))
dplot &lt;- ggplot(DMA_GLMM_DispersionStat,aes(y=DispStat,x=0))+geom_violin()+theme_classic(base_size = 16)+
  geom_jitter(width=0.1)+
  geom_text(aes(y = (disp_limits[2]+0.05),x=0.2, label = &quot;Upper Limit&quot;))+
  geom_hline(yintercept = disp_limits[2],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  geom_text(aes(y = (disp_limits[1]+0.05),x=0.2, label = &quot;Lower Limit&quot;))+
  geom_hline(yintercept = disp_limits[1],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  xlab(&quot;&quot;)+ylab(&quot;Dispersion Statistic&quot;)+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
grid.arrange(dplot)
dev.off()

#subset bad sites
bad_sites &lt;- subset(DMA_GLMM_DispersionStat,DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2])
nrow(bad_sites)

# calculate 10% differences, now we care about direction so we re-do this, since before it was absolute value 
meth &lt;- read.csv(&quot;HZ_FULL_5x.csv&quot;,header=TRUE)
dim(meth)
head(meth)

names(DMA_GLMM_pValues) &lt;- c('site','pHI')
names(DMA_GLMM_Estimates) &lt;- c('site','eHI')
names(DMA_GLMM_SEs) &lt;- c('site','sHI')
DMA_RF_S &lt;- cbind(DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular)
names(DMA_RF_S) &lt;- c('site','RandomEffect','IsSingular')
master_meth1 &lt;- merge(meth, DMA_GLMM_pValues, by='site')
master_meth2 &lt;- merge(master_meth1, DMA_GLMM_Estimates, by='site')
master_meth3 &lt;- merge(master_meth2, DMA_GLMM_SEs, by='site')
master_meth4 &lt;- merge(master_meth3, DMA_GLMM_DispersionStat, by='site')
master_meth &lt;- merge(master_meth4, DMA_RF_S, by='site')
head(master_meth)
nrow(master_meth)

#### Volcano with bonferonni
pthresh &lt;- (0.05/nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse((pHI &lt; pthresh &amp; abs(species_H.C) &gt; 0.05) , &quot;SPECIES&quot;,&quot;UNKNOWN&quot;))

master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

### With FDR, first select sites that are significant for each variable, but non-significant for the other variables 
pval &lt;- 0.05
master_meth$fHI &lt;- p.adjust(master_meth$pHI,method='BH',n=nrow(master_meth))

master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse((fHI &lt; pval &amp; abs(species_H.C) &gt; 0.05) , &quot;SPECIES&quot;,&quot;UNKNOWN&quot;))

#remove overdispersed sites 
master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)


#save for manhattan
write.csv(master_meth,file='HZ_Manhattan_5x_bonferonni.csv')

#hunt for colors
display.brewer.all(colorblindFriendly=TRUE) 
cols &lt;- brewer.pal(5,'Paired')
#cols &lt;- viridis(7)
shapes &lt;- c(16,1)

#plot SPECIES
p1 &lt;- ggplot(master_meth, aes(x=species_H.C, y=threshold(-log10(pHI),max=quantile(-log10(pHI),0.99))))+
  geom_point(aes(colour = DMR,shape=DMR), size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SPECIES&quot;=cols[3]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  ggtitle(&quot;Species&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(0.05),lwd=1,lty=2,col=&quot;maroon&quot;)+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ylab('-log10(P)')
p1

#save it 
jpeg(&quot;plots/HZ_DMA_Volcano_5x_bonferonni.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(p1,nrow=1)
dev.off()

#save file
write.csv(master_meth,file='HZ_DMA_DMRS_5x_bonferonni.csv',row.names=FALSE)
</pre>
== WGBS 5x ==

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/WGBS/dplyr/&quot;)

#import all the data and average by CGI
tab &lt;- read.table('D_Ko_C31_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C31_BL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C31_BL_M) &lt;- c('site','chr','start','end','numCs1','numTs1','Sites1');C31_BL_M$C31_BL_M &lt;- (C31_BL_M$numCs1/(C31_BL_M$numCs1+C31_BL_M$numTs1))
tab &lt;- read.table('D_Ko_C45_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_BL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_BL_F) &lt;- c('site','chr','start','end','numCs2','numTs2','Sites2');C45_BL_F$C45_BL_F &lt;- (C45_BL_F$numCs2/(C45_BL_F$numCs2+C45_BL_F$numTs2))
tab &lt;- read.table('S_Up_H59_BL_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_BL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_BL_M) &lt;- c('site','chr','start','end','numCs3','numTs3','Sites3');H59_BL_M$H59_BL_M &lt;- (H59_BL_M$numCs3/(H59_BL_M$numCs3+H59_BL_M$numTs3))
tab &lt;- read.table('S_Up_H59_M_ADL_M.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_M_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_M_M) &lt;- c('site','chr','start','end','numCs4','numTs4','Sites4');H59_M_M$H59_M_M &lt;- (H59_M_M$numCs4/(H59_M_M$numCs4+H59_M_M$numTs4))
tab &lt;- read.table('S_Up_H60_BL_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_BL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_BL_F) &lt;- c('site','chr','start','end','numCs5','numTs5','Sites5');H60_BL_F$H60_BL_F &lt;- (H60_BL_F$numCs5/(H60_BL_F$numCs5+H60_BL_F$numTs5))
tab &lt;- read.table('S_Up_H60_M_ADL_F.CGI.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_M_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_M_F) &lt;- c('site','chr','start','end','numCs6','numTs6','Sites6');H60_M_F$H60_M_F &lt;- (H60_M_F$numCs6/(H60_M_F$numCs6+H60_M_F$numTs6))

head(C31_BL_M)

master &lt;- Reduce(function(x,y) merge(x = x, y = y, by=c('site','chr','start','end')),
                 list(C31_BL_M,C45_BL_F,H59_BL_M,H59_M_M,H60_BL_F,H60_M_F))
head(master)

#calculate coverage and CpGs
cov &lt;- master %&gt;% mutate(minsite1 = ifelse(Sites1 &lt; 3, NA, Sites1),
                         minsite2 = ifelse(Sites2 &lt; 3, NA, Sites2),
                         minsite3 = ifelse(Sites3 &lt; 3, NA, Sites3),
                         minsite4 = ifelse(Sites4 &lt; 3, NA, Sites4),
                         minsite5 = ifelse(Sites5 &lt; 3, NA, Sites5),
                         minsite6 = ifelse(Sites6 &lt; 3, NA, Sites6))



#count NAs
colSums(is.na(cov))

#filter according to missingness
sitedat &lt;- cov[rowSums(is.na(cov[grepl('^minsite', names(cov))])) == 0, ]
nrow(sitedat)

master &lt;- sitedat

#define groups
master$MALE &lt;- rowMeans(master[grepl('_M$', names(master))],na.rm=TRUE) #M=1
master$FEMALE &lt;- rowMeans(master[grepl('_F$', names(master))],na.rm=TRUE) #F=0
master$BLOOD &lt;- rowMeans(master[grepl('_BL_', names(master))],na.rm=TRUE) #BL=0
master$SPLEEN &lt;- rowMeans(master[grepl('_M_', names(master))],na.rm=TRUE) #M=1
master$HOODED &lt;- rowMeans(master[grepl('^H', names(master))],na.rm=TRUE) #H=0
master$CARRION &lt;- rowMeans(master[grepl('^C', names(master))],na.rm=TRUE) #C=1
compare &lt;- master[,c(1,(ncol(master)-4-1):ncol(master))]
head(compare)
#now we must do pairwise comparisons between our 3 treatments for % 5mC
compare[8] &lt;- compare[2]-compare[3]
compare[9] &lt;- compare[4]-compare[5]
compare[10] &lt;- compare[6]-compare[7]
head(compare)
win_diff &lt;- compare[,c(8,9,10)]

#merge the total percent diff with the original frame
master_meth &lt;- cbind(master,win_diff)
colnames(master_meth)[colnames(master_meth) == 'MALE.1'] &lt;- 'sex_M.F'
colnames(master_meth)[colnames(master_meth) == 'BLOOD.1'] &lt;- 'tissue_BL.M'
colnames(master_meth)[colnames(master_meth) == 'HOODED.1'] &lt;- 'species_H.C'
nrow(master_meth)
names(master_meth)

#now subset for GLMM # C=1 H=0 / M=1 F=0 / BL=0 M=1
IND1 &lt;- as.data.frame(c(master_meth[1],&quot;C31&quot;,master_meth[5], master_meth[6],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND2 &lt;- as.data.frame(c(master_meth[1],&quot;C45&quot;,master_meth[9], master_meth[10],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND3 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[13], master_meth[14],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND4 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[17], master_meth[18],&quot;0&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND5 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[21], master_meth[22],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND6 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[25], master_meth[26],&quot;0&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))

head(IND4)
head(IND1)

#Bind them all together and order it by window
datmeth &lt;- rbind(IND1,IND2,IND3,IND4,IND5,IND6)
datmeth &lt;- datmeth[order(datmeth$CGI),]

head(datmeth)

#sanity check 
nrow(datmeth)/6

#save some files we might need later 
write.csv(datmeth,file=&quot;WGBS_GLMM_Input_5x.csv&quot;,row.names=FALSE)
write.csv(master_meth,file=&quot;WGBS_FULL_5x.csv&quot;,row.names=FALSE)

#now we can start here 
datmeth &lt;- read.csv(&quot;WGBS_GLMM_Input_5x.csv&quot;,header=TRUE)
head(datmeth)
#set these as factor variables 
datmeth$Species &lt;- as.factor(datmeth$Species)
datmeth$Tissue &lt;- as.factor(datmeth$Tissue)
datmeth$Sex &lt;- as.factor(datmeth$Sex)
datmeth$ID &lt;- as.factor(datmeth$ID)

##### MODEL #####
DMA_GLMM_pValues &lt;- NULL
DMA_GLMM_Estimates &lt;- NULL
DMA_GLMM_SEs &lt;- NULL
DMA_GLMM_RandomEffect_Var &lt;- NULL
DMA_GLMM_DispersionStat &lt;- NULL
DMA_GLMM_Singular &lt;- NULL

for (i in seq(1, nrow(datmeth), by = 6)) {
  tryCatch({
    cat('\n Running model for CpG site: ',((i-1)/6))
    # model each site
    CpGsite &lt;- datmeth[i:(i + 5), ]
    # run the model and get the contrasts between sex, stage, species
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Sex + Tissue + Species + (1|ID) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+09)))
    DMA_GLMM_Singularf &lt;- isSingular(glmm_CpG)
    sum_mod &lt;- summary(glmm_CpG)
    
    ## 1 random effects ( (1 | ID) )
    GLMM_RandomEffect_Var &lt;- as.data.frame(VarCorr(glmm_CpG))$sdcor
    
    # calculate dispersion statistic (following AF Zuur, JM Hilbe
    # &amp; EN Ieno. A beginner’s guide to GLM and GLMM with R - a
    # frequentist and Bayesian perspective for
    # ecologists(Highland Statistics Ltd., 2013).)
    E1 &lt;- residuals(glmm_CpG)
    # number of parameters: fixed effects + 1 random effect
    p1 &lt;- length(fixef(glmm_CpG)) + 1
    GLMM_DispersionStat &lt;- sum(E1^2)/(nrow(CpGsite) - p1)
    # format estimates to add estimates for each loop to
    # estimates from previous loops
    
    # TO GET THE COLUMN HEADERS WITH THE CONTRASTS, check the excel file. First I look at the glmm_CpG_contrast object, which lists the models in order of 1-8, for this comparison. From here, make the 28 pairwise comparison charts, and substitute the 0 and 1 with your variables
    GLMM_Estimates_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,1], Tissue1 = sum_mod$coefficients[3,1], Species1 = sum_mod$coefficients[4,1])
    GLMM_SEs_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,2], Tissue1 = sum_mod$coefficients[3,2], Species1 = sum_mod$coefficients[4,2])
    GLMM_pValues_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,4], Tissue1 = sum_mod$coefficients[3,4], Species1 = sum_mod$coefficients[4,4])
    GLMM_RandomEffect_Var_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                      1]), ID = GLMM_RandomEffect_Var[1])
    GLMM_DispersionStat_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                    1]), DispStat = GLMM_DispersionStat)
    # add estimates for each loop to estimates from previous
    # loops
    DMA_GLMM_pValues &lt;- rbind(DMA_GLMM_pValues, GLMM_pValues_f)
    DMA_GLMM_Estimates &lt;- rbind(DMA_GLMM_Estimates, GLMM_Estimates_f)
    DMA_GLMM_SEs &lt;- rbind(DMA_GLMM_SEs, GLMM_SEs_f)
    DMA_GLMM_RandomEffect_Var &lt;- rbind(DMA_GLMM_RandomEffect_Var,GLMM_RandomEffect_Var_f)
    DMA_GLMM_DispersionStat &lt;- rbind(DMA_GLMM_DispersionStat,GLMM_DispersionStat_f)
    DMA_GLMM_Singular &lt;- rbind(DMA_GLMM_Singular,DMA_GLMM_Singularf)
    
    #Save errors to this output
  }, error=function(e){cat(unique(CpGsite[,1]), &quot;\n&quot;)
  }
  )
}

# 3. Save loop results
save(DMA_GLMM_pValues, DMA_GLMM_Estimates, DMA_GLMM_SEs, DMA_GLMM_RandomEffect_Var,
     DMA_GLMM_DispersionStat, DMA_GLMM_Singular, file = &quot;WGBS_DMA_CrowResults_5x.RData&quot;)

hist(DMA_GLMM_pValues$Species1)
table(DMA_GLMM_Singular)['FALSE']

#should be the samem otherwise we have models that didn't converge 
nrow(DMA_GLMM_pValues)
nrow(datmeth)/6 
</pre>
=== Volcanos ===

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(matrixStats)
library(LICORS)
library(viridis)
library(RColorBrewer)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/WGBS/dplyr&quot;)

load(&quot;WGBS_DMA_CrowResults_5x.RData&quot;)

#check out some of the data
head(DMA_GLMM_Estimates)
dim(DMA_GLMM_Estimates)
head(DMA_GLMM_pValues)
head(DMA_GLMM_SEs)


#let's check out the distributio of 5mC contrasts
multi.hist(DMA_GLMM_Estimates[,2:4],nrow=1,ncol=NULL,breaks=21)

#plot dispersion boxplot, we will exclude any sites outside the 99% interval
disp_limits &lt;- hdi(DMA_GLMM_DispersionStat$DispStat,credMass = 0.99)
disp_limits

#lower        upper 
#4.228215e-02 3.381379e+03 

jpeg(&quot;plots/WGBS_dispersion_plot.jpg&quot;,units=&quot;in&quot;,res=300, height=6, width=5)
theme_set(theme_classic(base_size = 16))
dplot &lt;- ggplot(DMA_GLMM_DispersionStat,aes(y=DispStat,x=0))+geom_violin()+theme_classic(base_size = 16)+
  geom_jitter(width=0.1)+
  geom_text(aes(y = (disp_limits[2]+0.05),x=0.2, label = &quot;Upper Limit&quot;))+
  geom_hline(yintercept = disp_limits[2],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  geom_text(aes(y = (disp_limits[1]+0.05),x=0.2, label = &quot;Lower Limit&quot;))+
  geom_hline(yintercept = disp_limits[1],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  xlab(&quot;&quot;)+ylab(&quot;Dispersion Statistic&quot;)+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
grid.arrange(dplot)
dev.off()

#subset bad sites
bad_sites &lt;- subset(DMA_GLMM_DispersionStat,DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2])
nrow(bad_sites)

# calculate 10% differences, now we care about direction so we re-do this, since before it was absolute value 
meth &lt;- read.csv(&quot;WGBS_FULL_5x.csv&quot;,header=TRUE)
head(meth)

names(DMA_GLMM_pValues) &lt;- c('site','pSex','pTissue','pSpecies')
names(DMA_GLMM_Estimates) &lt;- c('site','eSex','eTissue','eSpecies')
names(DMA_GLMM_SEs) &lt;- c('site','sSex','sTissue','sSpecies')
DMA_RF_S &lt;- cbind(DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular)
names(DMA_RF_S) &lt;- c('site','RandomEffect','IsSingular')
master_meth1 &lt;- merge(meth, DMA_GLMM_pValues, by='site')
master_meth2 &lt;- merge(master_meth1, DMA_GLMM_Estimates, by='site')
master_meth3 &lt;- merge(master_meth2, DMA_GLMM_SEs, by='site')
master_meth4 &lt;- merge(master_meth3, DMA_RF_S, by='site')
master_meth &lt;- merge(master_meth4, DMA_GLMM_DispersionStat, by='site')
head(master_meth)
nrow(master_meth)

#### Volcano with bonferonni
pthresh &lt;- (0.05/nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(pSex &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; pSpecies &gt; pthresh &amp; pTissue &gt; pthresh, &quot;SEX&quot;, 
                                                   ifelse(pSpecies &lt; pthresh &amp; abs(species_H.C) &gt; 0.05 &amp; pSex &gt; pthresh &amp; pTissue &gt; pthresh,&quot;SPECIES&quot;,
                                                          ifelse(pTissue &lt; pthresh &amp; abs(tissue_BL.M) &gt; 0.05 &amp; pSex &gt; pthresh &amp; pSpecies &gt; pthresh ,&quot;TISSUE&quot;,
                                                                 ifelse(pSex &lt; pthresh &amp; pSpecies &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp; pTissue &gt; pthresh ,&quot;SEX_SPECIES&quot;, 
                                                                        ifelse(pSex &lt; pthresh &amp; pTissue &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(tissue_BL.M) &gt; 0.05 &amp;  pSex &gt; pthresh ,&quot;SEX_TISSUE&quot;,
                                                                               ifelse(pSpecies &lt; pthresh &amp; pTissue &lt; pthresh &amp; abs(tissue_BL.M) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp;  pSex &gt; pthresh ,&quot;SPECIES_TISSUE&quot;,
                                                                                      ifelse(pSpecies &lt; pthresh &amp; pTissue &lt; pthresh &amp;  pSex &lt; pthresh &amp;
                                                                                               abs(tissue_BL.M) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp; abs(sex_M.F) &gt; 0.05,&quot;ALL&quot;,&quot;UNKNOWN&quot;))))))))


master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

### Or with FDR
pval &lt;- 0.05
master_meth$fSex &lt;- p.adjust(master_meth$pSex,method='BH',n=nrow(master_meth))
master_meth$fTissue &lt;- p.adjust(master_meth$pTissue,method='BH',n=nrow(master_meth))
master_meth$fSpecies &lt;- p.adjust(master_meth$pSpecies,method='BH',n=nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(fSex &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; fSpecies &gt; pval &amp; fTissue &gt; pval, &quot;SEX&quot;, 
                                                   ifelse(fSpecies &lt; pval &amp; abs(species_H.C) &gt; 0.05 &amp; fSex &gt; pval &amp; fTissue &gt; pval,&quot;SPECIES&quot;,
                                                          ifelse(fTissue &lt; pval &amp; abs(tissue_BL.M) &gt; 0.05 &amp; fSex &gt; pval &amp; fSpecies &gt; pval ,&quot;TISSUE&quot;,
                                                                 ifelse(fSex &lt; pval &amp; fSpecies &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp; fTissue &gt; pval ,&quot;SEX_SPECIES&quot;, 
                                                                        ifelse(fSex &lt; pval &amp; fTissue &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(tissue_BL.M) &gt; 0.05 &amp;  fSex &gt; pval ,&quot;SEX_TISSUE&quot;,
                                                                               ifelse(fSpecies &lt; pval &amp; fTissue &lt; pval &amp; abs(tissue_BL.M) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp;  fSex &gt; pval ,&quot;SPECIES_TISSUE&quot;,
                                                                                      ifelse(fSpecies &lt; pval &amp; fTissue &lt; pval &amp;  fSex &lt; pval &amp;
                                                                                               abs(tissue_BL.M) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp; abs(sex_M.F) &gt; 0.05,&quot;ALL&quot;,&quot;UNKNOWN&quot;))))))))

master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

#save for manhattan
write.csv(master_meth,file='WGBS_Manhattan_5x_bonferonni.csv')

#hunt for colors
#display.brewer.all(colorblindFriendly=TRUE) 
cols &lt;- brewer.pal(8,'Set2')
#cols &lt;- inferno(5)
shapes &lt;- c(15,16,17,18,16,16,1)

#plot sex
p1 &lt;- ggplot(master_meth, aes(x=sex_M.F,y=threshold(-log10(pSex),max=quantile(-log10(pSex),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;TISSUE&quot;=cols[2],&quot;SEX_TISSUE&quot;=cols[6],&quot;SPECIES_TISSUE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Sex&quot;)+
  ylab('-log10(p)')
p1

#plot species
p2 &lt;- ggplot(master_meth, aes(x=species_H.C,y=threshold(-log10(pSpecies),max=quantile(-log10(pSpecies),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;TISSUE&quot;=cols[2],&quot;SEX_TISSUE&quot;=cols[6],&quot;SPECIES_TISSUE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Species&quot;)+
  ylab('-log10(p)')
p2

#plot tissue
p3 &lt;- ggplot(master_meth, aes(x=tissue_BL.M,y=threshold(-log10(pTissue),max=quantile(-log10(pTissue),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;TISSUE&quot;=cols[2],&quot;SEX_TISSUE&quot;=cols[6],&quot;SPECIES_TISSUE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Tissue&quot;)+
  ylab('-log10(p)')
p3


#save it 
jpeg(&quot;plots/WGBS_DMA_Volcano_5x_bonferonni.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=12)
theme_set(theme_classic(base_size = 16))
grid.arrange(p1,p2,p3,nrow=1)
dev.off()

#save file
write.csv(master_meth,file='WGBS_DMA_DMRS_5x_bonferonni.csv',row.names=FALSE)</pre>
== Ultimate Overlap ==

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)
library(maditr)
library(viridis)

#import truth set DMRs
truth_dmr_CG &lt;- read.csv('CG_DMA_DMRs_5x_FDR.csv',header=TRUE)
head(truth_dmr_CG)

truth_dmr_WGBS &lt;- read.csv('WGBS_DMA_DMRs_5x_FDR.csv',header=TRUE)
head(truth_dmr_WGBS)

truth &lt;- merge(truth_dmr_WGBS,truth_dmr_CG,by='site',all=TRUE)

hz &lt;- read.csv('HZ_DMA_DMRs_5x_FDR.csv',header=TRUE)

dmr_min &lt;- merge(hz,truth,by='site')
dmr_min$DMR.x &lt;- str_replace_na(dmr_min$DMR.x, replacement = &quot;MISSING&quot;)
dmr_min$DMR.y &lt;- str_replace_na(dmr_min$DMR.y, replacement = &quot;MISSING&quot;)

### try full dataset overlap overlap 
dmr_min %&gt;% dplyr::count(DMR,DMR.x,DMR.y)
dmr_min &lt;- dmr_min %&gt;% mutate(Overlap = ifelse(DMR == &quot;SPECIES&quot; &amp; (DMR.x == &quot;MISSING&quot; | DMR.x == &quot;UNKNOWN&quot;) &amp;
                              (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SPECIES&quot; | DMR.y == &quot;SPECIES_STAGE&quot; | DMR.y == &quot;ALL&quot; ) , &quot;SPECIES&quot;,
                              ifelse(DMR == &quot;SPECIES&quot; &amp; (DMR.y == &quot;MISSING&quot; | DMR.y == &quot;UNKNOWN&quot;) &amp;
                                       (DMR.x == &quot;SEX_SPECIES&quot; | DMR.x == &quot;SPECIES&quot; | DMR.x == &quot;SPECIES_TISSUE&quot; | DMR.x == &quot;ALL&quot; ) , &quot;SPECIES&quot;,
                                     ifelse(DMR == &quot;UNKNOWN&quot; &amp; (DMR.y == &quot;MISSING&quot; | DMR.y == &quot;UNKNOWN&quot;) &amp;
                                              (DMR.x == &quot;SEX_SPECIES&quot; | DMR.x == &quot;SEX&quot; | DMR.x == &quot;ALL&quot; ) , &quot;SEX&quot;,
                                            ifelse(DMR == &quot;UNKNOWN&quot; &amp; (DMR.x == &quot;MISSING&quot; | DMR.x == &quot;UNKNOWN&quot;) &amp;
                                                     (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SEX&quot; | DMR.y == &quot;ALL&quot; ) , &quot;SEX&quot;,
                                               ifelse(DMR == &quot;UNKNOWN&quot; &amp; 
                                                        (DMR.y == &quot;SPECIES_STAGE&quot; | DMR.y == &quot;STAGE&quot;) &amp; 
                                                        (DMR.x == &quot;UNKNOWN&quot;) , &quot;STAGE&quot;,
                                                      ifelse(DMR == &quot;UNKNOWN&quot; &amp; 
                                                               (DMR.y == &quot;UNKNOWN&quot;) &amp; 
                                                               (DMR.x == &quot;TISSUE&quot; | DMR.x == &quot;SPECIES_TISSUE&quot;) , &quot;TISSUE&quot;,
                                                             ifelse(DMR == &quot;UNKNOWN&quot; &amp; 
                                                                      (DMR.y == &quot;UNKNOWN&quot;) &amp; 
                                                                      (DMR.x == &quot;UNKNOWN&quot;) , &quot;UNKNOWN&quot;,&quot;UNCLASSIFIED&quot;))))))))

dmr_min %&gt;% dplyr::count(Overlap)

dmr_min &lt;- dmr_min[!grepl('UNCLASSIFIED',dmr_min$Overlap),]
nrow(dmr_min)
dmr_min %&gt;% dplyr::count(Overlap)
#bootstraps
nboots &lt;- 100
HZ_species &lt;- NULL
HZ_sex &lt;- NULL
HZ_tissue &lt;- NULL
HZ_stage &lt;- NULL
HZ_other &lt;- NULL
HZ_pval &lt;- NULL
HZ_means &lt;- NULL
HZ_noint &lt;- NULL

counter = 0

for (j in seq(1, nboots)) {
  cat('\n Running iteration: ',counter,'\n')
  #obtain stratified sample
  counter=counter+1
  strat_sample &lt;- dmr_min %&gt;%
    group_by(Overlap) %&gt;%
    sample_n(size=4,replace=FALSE)
  
  #re-form model 
  datmeth &lt;- read.csv(&quot;HZ_GLMM_Input_5x.csv&quot;,header=TRUE)
  datmeth$site &lt;- datmeth$CGI
  head(datmeth)
  nrow(datmeth)/24
  
  parents &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up')
  hybrids &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up',negate=TRUE)
  hyb3 &lt;- sample(hybrids,3,replace=FALSE)
  full &lt;- c(parents,hyb3)
  
  #only keep windows identified
  mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                      .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(strat_sample$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))
  
  mod_input2 &lt;- mod_input1[grepl(paste0(full,collapse=&quot;$|^&quot;),mod_input1$ID),]
  #keep levels 
  hzmrg &lt;- strat_sample[grepl('^site|Overlap',names(strat_sample))]
  mod_input &lt;- merge(mod_input2,hzmrg)
  nrow(mod_input)/9
  datmeth &lt;- mod_input
  
  #set these as factor variables 
  datmeth$Classification &lt;- as.factor(datmeth$Classification)
  datmeth$Locality &lt;- as.factor(datmeth$Locality)
  datmeth$Year &lt;- as.factor(datmeth$Year)
  datmeth$ID &lt;- as.factor(datmeth$ID)
  
  #and scale the continuous variables
  datmeth &lt;- datmeth %&gt;% mutate_at(c('Hybrid_Index'), ~(scale(.) %&gt;% as.vector))
  
  plotDat &lt;- NULL 
  tryCatch({
    for (i in seq(1, nrow(datmeth), by = 9)) {
      
      CpGsite &lt;- datmeth[i:(i + 8), ]
      
      glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                          Classification + (1 | Year) ,data = CpGsite, family = &quot;binomial&quot;,
                        control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                               optCtrl = list(maxfun = 2e+08)))
      dats &lt;- emmip(glmm_CpG, ~ Classification , type = &quot;response&quot;, CIs = TRUE,plotit=FALSE) 
      site &lt;- CpGsite[1:3,1]
      level &lt;- CpGsite[1:3,11]
      group &lt;- dats[1]
      mean &lt;- dats[2]
      se &lt;- dats[3]
      loops &lt;- cbind(site,level,group,mean,se)
      plotDat &lt;- rbind(plotDat,loops)
      
    }
    
    plotDat
    plotDat_LongSE &lt;- dcast(plotDat, site ~ Classification, value.var = 'SE')
    plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Classification, value.var = 'yvar')
    names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
    plotDat_LongMEAN$ParentalMidPoint &lt;- ((plotDat_LongMEAN$Cornix + plotDat_LongMEAN$Corone)/2)
    plotDat_LongMEAN$HybDistance &lt;- (plotDat_LongMEAN$Hybrid - plotDat_LongMEAN$ParentalMidPoint)
    
    #add simple intermediacy factor 
    plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                            Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
    hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate','HybDistance')]
    for_tab &lt;- merge(hyb_level,plotDat,by='site')
    k_tab &lt;- unique(for_tab[,c('site','Intermediate','level','HybDistance')])
    
    #calculate distance between hybrids and the parental midpoint 
    hyb_means &lt;- as.data.frame(k_tab %&gt;% group_by(level) %&gt;% dplyr::summarize(Mean = mean(HybDistance)))
    hyb_means$ITERATION &lt;- counter
    
    #test significant differences in counts, if there are no intermediate events, this will add a column of zeroes
    con1 &lt;- table(k_tab$level,k_tab$Intermediate)
    con1
    
    tryCatch({
      res &lt;- fisher.test(con1)
      con2 &lt;- table(k_tab$level,k_tab$HybDistance)
      con2
      
      spec &lt;-  data.frame(ITERATION = counter, LEVEL = 'SPECIES',INTERMEDIATE = con1[2,1], MIXED = con1[2,2])
      stag &lt;-  data.frame(ITERATION = counter, LEVEL = 'STAGE',INTERMEDIATE = con1[3,1], MIXED = con1[3,2])
      tiss &lt;-  data.frame(ITERATION = counter, LEVEL = 'TISSUE',INTERMEDIATE = con1[4,1], MIXED = con1[4,2])
      sexx &lt;-  data.frame(ITERATION = counter, LEVEL = 'SEX',INTERMEDIATE = con1[1,1], MIXED = con1[1,2])
      other &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNKNOWN',INTERMEDIATE = con1[5,1], MIXED = con1[5,2])
      pvals &lt;-  data.frame(pvalue = res$p.value)
      
      
      #bind loops
      HZ_species &lt;- rbind(HZ_species, spec)
      HZ_stage &lt;- rbind(HZ_stage, stag)
      HZ_sex &lt;- rbind(HZ_sex, sexx)
      HZ_tissue &lt;- rbind(HZ_tissue, tiss)
      HZ_other &lt;- rbind(HZ_other, other)
      HZ_pval &lt;- rbind(HZ_pval,pvals)
      HZ_means &lt;- rbind(HZ_means,hyb_means)
      
    }, error=function(e){HZ_noint &lt;- rbind(HZ_noint,counter);cat(counter,&quot;BAD \n&quot;)})
    
  }, error=function(e){cat(counter,&quot;: FAILED \n&quot;)})
  
  
}

HZ_distance &lt;- HZ_means
HZ_distance$level &lt;- factor(HZ_distance$level, levels = c('UNKNOWN','SEX','STAGE','TISSUE', 'SPECIES'))
a &lt;- ggplot(HZ_distance,aes(x=level,fill=level, y=Mean))+
  geom_boxplot(show.legend=FALSE)+ylab('Distance to Parentals')+xlab('')+
  scale_fill_manual(values=viridis(6))+
  stat_boxplot(geom ='errorbar', width = 0.25) +
  geom_hline(yintercept=0,lty=2,lwd=1,col=&quot;black&quot;)+
  theme_classic()
#coord_cartesian(ylim=c(-1,1))
a


bootdat &lt;- rbind(HZ_species,HZ_stage,HZ_sex,HZ_other)
bootdat

meltboot &lt;- melt(bootdat,id.vars = c('LEVEL','ITERATION'))

meltboot$LEVEL &lt;- factor(meltboot$LEVEL, levels = c('UNKNOWN','SEX','STAGE', 'SPECIES'))
b &lt;- ggplot(meltboot,aes(x=LEVEL,fill=variable,y=value))+
  geom_boxplot()+ylab('Number of Replicates')+xlab('')+
  scale_fill_manual(values=c('purple','gray'))+
  theme_classic()
b

c &lt;- ggplot(HZ_pval, aes(x=pvalue))+
  geom_histogram(aes(y = ..density..),bins=5) +
  geom_density(alpha = 0.1, fill = &quot;turquoise&quot;)+
  ylab(&quot;Density&quot;)+xlab(&quot;p-Value&quot;)+
  theme_classic()
c

#save it 
jpeg(&quot;plots/FULL-BootstrapDistance.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(a,nrow=1)
dev.off()


#save it 
jpeg(&quot;plots/FULL-Bootstrap.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(b,nrow=1)
dev.off()

#save it 
jpeg(&quot;plots/FULL-Bootstrap_pvals.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=4)
theme_set(theme_classic(base_size = 16))
grid.arrange(c,nrow=1)
dev.off()</pre>
== Hybrid Intermediacy ==

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(LICORS)
library(RColorBrewer)
library(viridis)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/all&quot;)

#import truth set DMRs
truth_dmr_CG &lt;- read.csv('CG_DMA_DMRs_5x_FDR.csv',header=TRUE)
head(truth_dmr_CG)

truth_dmr_WGBS &lt;- read.csv('WGBS_DMA_DMRs_5x_FDR.csv',header=TRUE)
head(truth_dmr_WGBS)

truth &lt;- merge(truth_dmr_WGBS,truth_dmr_CG,by='site',all=TRUE)

hz &lt;- read.csv('HZ_DMA_DMRs_5x_FDR.csv',header=TRUE)

dmr_min &lt;- merge(hz,truth,by='site')
dmr_min$DMR.x &lt;- str_replace_na(dmr_min$DMR.x, replacement = &quot;MISSING&quot;)
dmr_min$DMR.y &lt;- str_replace_na(dmr_min$DMR.y, replacement = &quot;MISSING&quot;)

### try full dataset overlap overlap 
dmr_min %&gt;% dplyr::count(DMR,DMR.x,DMR.y)
dmr_min &lt;- dmr_min %&gt;% mutate(Overlap = ifelse(DMR == &quot;SPECIES&quot; &amp; (DMR.x == &quot;MISSING&quot; | DMR.x == &quot;UNKNOWN&quot;) &amp;
                                                 (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SPECIES&quot; | DMR.y == &quot;SPECIES_STAGE&quot; | DMR.y == &quot;ALL&quot; ) , &quot;SPECIES&quot;,
                                               ifelse(DMR == &quot;SPECIES&quot; &amp; (DMR.y == &quot;MISSING&quot; | DMR.y == &quot;UNKNOWN&quot;) &amp;
                                                        (DMR.x == &quot;SEX_SPECIES&quot; | DMR.x == &quot;SPECIES&quot; | DMR.x == &quot;SPECIES_TISSUE&quot; | DMR.x == &quot;ALL&quot; ) , &quot;SPECIES&quot;,
                                                      ifelse(DMR == &quot;UNKNOWN&quot; &amp; (DMR.y == &quot;MISSING&quot; | DMR.y == &quot;UNKNOWN&quot;) &amp;
                                                               (DMR.x == &quot;SEX_SPECIES&quot; | DMR.x == &quot;SEX&quot; | DMR.x == &quot;ALL&quot; ) , &quot;SEX&quot;,
                                                             ifelse(DMR == &quot;UNKNOWN&quot; &amp; (DMR.x == &quot;MISSING&quot; | DMR.x == &quot;UNKNOWN&quot;) &amp;
                                                                      (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SEX&quot; | DMR.y == &quot;ALL&quot; ) , &quot;SEX&quot;,
                                                                    ifelse(DMR == &quot;UNKNOWN&quot; &amp; 
                                                                             (DMR.y == &quot;SPECIES_STAGE&quot; | DMR.y == &quot;STAGE&quot;) &amp; 
                                                                             (DMR.x == &quot;UNKNOWN&quot;) , &quot;STAGE&quot;,
                                                                           ifelse(DMR == &quot;UNKNOWN&quot; &amp; 
                                                                                    (DMR.y == &quot;UNKNOWN&quot;) &amp; 
                                                                                    (DMR.x == &quot;TISSUE&quot; | DMR.x == &quot;SPECIES_TISSUE&quot;) , &quot;TISSUE&quot;,
                                                                                  ifelse(DMR == &quot;UNKNOWN&quot; &amp; 
                                                                                           (DMR.y == &quot;UNKNOWN&quot;) &amp; 
                                                                                           (DMR.x == &quot;UNKNOWN&quot;) , &quot;UNKNOWN&quot;,&quot;UNCLASSIFIED&quot;))))))))

dmr_min %&gt;% dplyr::count(Overlap)


#save for manhattan
metadat &lt;- read.table('metadata_hz.txt',header=TRUE)

hz_dats &lt;- dmr_min[grepl('^site$|^S_|^D_|^Overlap',names(dmr_min))]
hz_dats &lt;- hz_dats[!grepl('UNCLASSIFIED',hz_dats$Overlap),]
hz_dats %&gt;% dplyr::count(Overlap)

#randomly sample the number of windows according to the number of species windows
strat_sample &lt;- hz_dats %&gt;%
  group_by(Overlap) %&gt;%
  sample_n(size=5,replace=FALSE)

panel_labs &lt;- unique(strat_sample$site)
plot_labs &lt;- rep(seq(1,5),5)
labs &lt;- cbind(panel_labs,plot_labs)
colnames(labs)[colnames(labs) == c('panel_labs','plot_labs')] &lt;- c('site','siteID')
plotdis &lt;- merge(strat_sample,labs,by='site')

hz.m1 = melt(strat_sample, id.vars = c('site','Overlap'),
             measure.vars = names(hz[grepl('^S_|^D_',names(hz_dmrs))]))

colnames(metadat)[colnames(metadat) == 'Library'] &lt;- 'variable'
hzp &lt;- merge(hz.m1,metadat)
hzp2 &lt;- merge(hzp,labs,by='site')



hzp2$Classification &lt;- as.factor(hzp2$Classification)

hyb &lt;- ggplot(hzp2,aes(x=Classification,y=value,fill=Classification))+
  geom_boxplot(varwidth=FALSE,alpha=0.75)+
  stat_boxplot(geom ='errorbar', width = 0.6) +
  theme_bw()+facet_grid(Overlap~siteID)+
  scale_fill_manual(values=c('black','purple','grey60'))+ylab('% 5mC')+
  coord_cartesian(ylim=c(0,1))+theme(axis.text.x=element_blank(),axis.title.x=element_blank())

hyb

#save it 
jpeg(&quot;plots/HZ-Intermediacy.jpg&quot;,units=&quot;in&quot;,res=300, height=8, width=10)
theme_set(theme_classic(base_size = 16))
grid.arrange(hyb,nrow=1)
dev.off()
</pre>
== CG-HZ Overlap ==

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)
library(maditr)
library(viridis)

#import truth set DMRs
truth_dmr_CG &lt;- read.csv('CG_DMA_DMRs_5x_bonferonni.csv',header=TRUE)
head(truth_dmr_CG)

hz &lt;- read.csv('HZ_DMA_DMRs_5x_bonferonni.csv',header=TRUE)


hz_cg &lt;- merge(hz,truth_dmr_CG,by='site')

### try CG-HZ overlap 
hz_cg %&gt;% dplyr::count(DMR.x,DMR.y)
dmr_min &lt;- hz_cg
dmr_min &lt;- dmr_min %&gt;% mutate(Overlap = ifelse(DMR.x == &quot;SPECIES&quot; &amp; 
                                                 (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SPECIES&quot; | DMR.y == &quot;SPECIES_STAGE&quot; | DMR.y == &quot;ALL&quot;), &quot;SPECIES&quot;,
                                               ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                        (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SEX&quot; | DMR.y == &quot;ALL&quot; ) , &quot;SEX&quot;,
                                                      ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                               (DMR.y == &quot;SPECIES_STAGE&quot; | DMR.y == &quot;STAGE&quot;) , &quot;STAGE&quot;,
                                                             ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                                      (DMR.y == &quot;UNKNOWN&quot;) , &quot;UNKNOWN&quot;,&quot;UNCLASSIFIED&quot;)))))

dmr_min %&gt;% dplyr::count(Overlap)

#bootstraps
nboots &lt;- 100
HZ_species &lt;- NULL
HZ_sex &lt;- NULL
HZ_stage &lt;- NULL
HZ_unclassified &lt;- NULL
HZ_other &lt;- NULL
HZ_pval &lt;- NULL
HZ_means &lt;- NULL
HZ_noint &lt;- NULL

counter = 0

for (j in seq(1, nboots)) {
  cat('\n Running iteration: ',counter,'\n')
  #obtain stratified sample
  counter=counter+1
  strat_sample &lt;- dmr_min %&gt;%
    group_by(Overlap) %&gt;%
    sample_n(size=2,replace=FALSE)
  
  #re-form model 
  datmeth &lt;- read.csv(&quot;HZ_GLMM_Input_5x.csv&quot;,header=TRUE)
  datmeth$site &lt;- datmeth$CGI
  head(datmeth)
  nrow(datmeth)/24
  
  parents &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up')
  hybrids &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up',negate=TRUE)
  hyb3 &lt;- sample(hybrids,3,replace=FALSE)
  full &lt;- c(parents,hyb3)
  
  #only keep windows identified
  mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                      .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(strat_sample$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))
  
  mod_input2 &lt;- mod_input1[grepl(paste0(full,collapse=&quot;$|^&quot;),mod_input1$ID),]
  #keep levels 
  hzmrg &lt;- strat_sample[grepl('^site|Overlap',names(strat_sample))]
  mod_input &lt;- merge(mod_input2,hzmrg)
  nrow(mod_input)/9
  datmeth &lt;- mod_input
  
  #set these as factor variables 
  datmeth$Classification &lt;- as.factor(datmeth$Classification)
  datmeth$Locality &lt;- as.factor(datmeth$Locality)
  datmeth$Year &lt;- as.factor(datmeth$Year)
  datmeth$ID &lt;- as.factor(datmeth$ID)
  
  #and scale the continuous variables
  datmeth &lt;- datmeth %&gt;% mutate_at(c('Hybrid_Index'), ~(scale(.) %&gt;% as.vector))
  
  plotDat &lt;- NULL 
  tryCatch({
    for (i in seq(1, nrow(datmeth), by = 9)) {
    
    CpGsite &lt;- datmeth[i:(i + 8), ]
    
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Classification + (1 | Year) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+08)))
    dats &lt;- emmip(glmm_CpG, ~ Classification , type = &quot;response&quot;, CIs = TRUE,plotit=FALSE) 
    site &lt;- CpGsite[1:3,1]
    level &lt;- CpGsite[1:3,11]
    group &lt;- dats[1]
    mean &lt;- dats[2]
    se &lt;- dats[3]
    loops &lt;- cbind(site,level,group,mean,se)
    plotDat &lt;- rbind(plotDat,loops)
    
    }
    
  plotDat
  plotDat_LongSE &lt;- dcast(plotDat, site ~ Classification, value.var = 'SE')
  plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Classification, value.var = 'yvar')
  names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
  plotDat_LongMEAN$ParentalMidPoint &lt;- ((plotDat_LongMEAN$Cornix + plotDat_LongMEAN$Corone)/2)
  plotDat_LongMEAN$HybDistance &lt;- (plotDat_LongMEAN$Hybrid - plotDat_LongMEAN$ParentalMidPoint)
  
  #add simple intermediacy factor 
  plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                          Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
  hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate','HybDistance')]
  for_tab &lt;- merge(hyb_level,plotDat,by='site')
  k_tab &lt;- unique(for_tab[,c('site','Intermediate','level','HybDistance')])
  
  #calculate distance between hybrids and the parental midpoint 
  hyb_means &lt;- as.data.frame(k_tab %&gt;% group_by(level) %&gt;% dplyr::summarize(Mean = mean(HybDistance)))
  hyb_means$ITERATION &lt;- counter
  
  #test significant differences in counts, if there are no intermediate events, this will add a column of zeroes
  con1 &lt;- table(k_tab$level,k_tab$Intermediate)
  con1
  
  tryCatch({
    res &lt;- fisher.test(con1)
    con2 &lt;- table(k_tab$level,k_tab$HybDistance)
    con2
    
    spec &lt;-  data.frame(ITERATION = counter, LEVEL = 'SPECIES',INTERMEDIATE = con1[2,1], MIXED = con1[2,2])
    stag &lt;-  data.frame(ITERATION = counter, LEVEL = 'STAGE',INTERMEDIATE = con1[3,1], MIXED = con1[3,2])
    fals &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNCLASSIFIED',INTERMEDIATE = con1[4,1], MIXED = con1[4,2])
    sexx &lt;-  data.frame(ITERATION = counter, LEVEL = 'SEX',INTERMEDIATE = con1[1,1], MIXED = con1[1,2])
    other &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNKNOWN',INTERMEDIATE = con1[5,1], MIXED = con1[5,2])
    pvals &lt;-  data.frame(pvalue = res$p.value)
    
    
    #bind loops
    HZ_species &lt;- rbind(HZ_species, spec)
    HZ_stage &lt;- rbind(HZ_stage, stag)
    HZ_sex &lt;- rbind(HZ_sex, sexx)
    HZ_unclassified &lt;- rbind(HZ_unclassified, fals)
    HZ_other &lt;- rbind(HZ_other, other)
    HZ_pval &lt;- rbind(HZ_pval,pvals)
    HZ_means &lt;- rbind(HZ_means,hyb_means)
    
  }, error=function(e){HZ_noint &lt;- rbind(HZ_noint,counter);cat(counter,&quot;BAD \n&quot;)})
  
    }, error=function(e){cat(counter,&quot;: FAILED \n&quot;)})
  
  
}

HZ_distance &lt;- HZ_means
HZ_distance &lt;- HZ_distance[!grepl('UNCLASSIFIED',HZ_distance$level),]
HZ_distance$level &lt;- factor(HZ_distance$level, levels = c('UNKNOWN','SEX','STAGE', 'SPECIES'))
a &lt;- ggplot(HZ_distance,aes(x=level,fill=level, y=Mean))+
  geom_boxplot(show.legend=FALSE)+ylab('Distance to Parentals')+xlab('')+
  scale_fill_manual(values=viridis(6))+
  stat_boxplot(geom ='errorbar', width = 0.25) +
  geom_hline(yintercept=0,lty=2,lwd=1,col=&quot;black&quot;)+
  theme_classic()
#coord_cartesian(ylim=c(-1,1))
a


  bootdat &lt;- rbind(HZ_species,HZ_stage,HZ_sex,HZ_other)
bootdat

meltboot &lt;- melt(bootdat,id.vars = c('LEVEL','ITERATION'))

meltboot$LEVEL &lt;- factor(meltboot$LEVEL, levels = c('UNKNOWN','SEX','STAGE', 'SPECIES'))
b &lt;- ggplot(meltboot,aes(x=LEVEL,fill=variable,y=value))+
  geom_boxplot()+ylab('Number of Replicates')+xlab('')+
  scale_fill_manual(values=c('purple','gray'))+
  theme_classic()
b

c &lt;- ggplot(HZ_pval, aes(x=pvalue))+
  geom_histogram(aes(y = ..density..),bins=5) +
  geom_density(alpha = 0.1, fill = &quot;turquoise&quot;)+
  ylab(&quot;Density&quot;)+xlab(&quot;p-Value&quot;)+
  theme_classic()
c

#save it 
jpeg(&quot;plots/HZ-CG-BootstrapDistance.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(a,nrow=1)
dev.off()


#save it 
jpeg(&quot;plots/HZ-CG-Bootstrap.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(b,nrow=1)
dev.off()

#save it 
jpeg(&quot;plots/HZ-CG-Bootstrap_pvals.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=4)
theme_set(theme_classic(base_size = 16))
grid.arrange(c,nrow=1)
dev.off()</pre>
== WGBS-HZ Overlap ==

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)
library(maditr)
library(viridis)

#import truth set DMRs
truth_dmr_WGBS &lt;- read.csv('WGBS_DMA_DMRs_5x_bonferonni.csv',header=TRUE)
head(truth_dmr_WGBS)

hz &lt;- read.csv('HZ_DMA_DMRs_5x_bonferonni.csv',header=TRUE)


hz_wgbs &lt;- merge(hz,truth_dmr_WGBS,by='site')

### try WGBS-HZ overlap 
dmr_min &lt;- hz_wgbs
hz_wgbs %&gt;% dplyr::count(DMR.x,DMR.y)
dmr_min &lt;- dmr_min %&gt;% mutate(Overlap = ifelse(DMR.x == &quot;SPECIES&quot; &amp; 
                                                 (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SPECIES&quot; | DMR.y == &quot;SPECIES_TISSUE&quot; | DMR.y == &quot;ALL&quot;), &quot;SPECIES&quot;,
                                               ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                        (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SEX&quot; | DMR.y == &quot;ALL&quot; ) , &quot;SEX&quot;,
                                                      ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                               (DMR.y == &quot;SPECIES_TISSUE&quot; | DMR.y == &quot;TISSUE&quot;) , &quot;TISSUE&quot;,
                                                             ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                                      (DMR.y == &quot;UNKNOWN&quot;) , &quot;UNKNOWN&quot;,&quot;UNCLASSIFIED&quot;)))))

dmr_min %&gt;% dplyr::count(Overlap)

#bootstraps
nboots &lt;- 100
HZ_species &lt;- NULL
HZ_sex &lt;- NULL
HZ_tissue &lt;- NULL
HZ_unclassified &lt;- NULL
HZ_other &lt;- NULL
HZ_pval &lt;- NULL
HZ_means &lt;- NULL
HZ_noint &lt;- NULL

counter = 0

for (j in seq(1, nboots)) {
  cat('\n Running iteration: ',counter,'\n')
  #obtain stratified sample
  counter=counter+1
  strat_sample &lt;- dmr_min %&gt;%
    group_by(Overlap) %&gt;%
    sample_n(size=2,replace=FALSE)
  
  #re-form model 
  datmeth &lt;- read.csv(&quot;HZ_GLMM_Input_5x.csv&quot;,header=TRUE)
  datmeth$site &lt;- datmeth$CGI
  head(datmeth)
  nrow(datmeth)/24
  
  parents &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up')
  hybrids &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up',negate=TRUE)
  hyb3 &lt;- sample(hybrids,3,replace=FALSE)
  full &lt;- c(parents,hyb3)
  
  #only keep windows identified
  mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                      .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(strat_sample$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))
  
  mod_input2 &lt;- mod_input1[grepl(paste0(full,collapse=&quot;$|^&quot;),mod_input1$ID),]
  #keep levels 
  hzmrg &lt;- strat_sample[grepl('^site|Overlap',names(strat_sample))]
  mod_input &lt;- merge(mod_input2,hzmrg)
  nrow(mod_input)/9
  datmeth &lt;- mod_input
  
  #set these as factor variables 
  datmeth$Classification &lt;- as.factor(datmeth$Classification)
  datmeth$Locality &lt;- as.factor(datmeth$Locality)
  datmeth$Year &lt;- as.factor(datmeth$Year)
  datmeth$ID &lt;- as.factor(datmeth$ID)
  
  #and scale the continuous variables
  datmeth &lt;- datmeth %&gt;% mutate_at(c('Hybrid_Index'), ~(scale(.) %&gt;% as.vector))
  
  plotDat &lt;- NULL 
  tryCatch({
    for (i in seq(1, nrow(datmeth), by = 9)) {
      CpGsite &lt;- datmeth[i:(i + 8), ]
      
      glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                          Classification + (1 | Year) ,data = CpGsite, family = &quot;binomial&quot;,
                        control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                               optCtrl = list(maxfun = 2e+08)))
      dats &lt;- emmip(glmm_CpG, ~ Classification , type = &quot;response&quot;, CIs = TRUE,plotit=FALSE) 
      site &lt;- CpGsite[1:3,1]
      level &lt;- CpGsite[1:3,11]
      group &lt;- dats[1]
      mean &lt;- dats[2]
      se &lt;- dats[3]
      loops &lt;- cbind(site,level,group,mean,se)
      plotDat &lt;- rbind(plotDat,loops)
    }
  
  plotDat
  plotDat_LongSE &lt;- dcast(plotDat, site ~ Classification, value.var = 'SE')
  plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Classification, value.var = 'yvar')
  names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
  plotDat_LongMEAN$ParentalMidPoint &lt;- ((plotDat_LongMEAN$Cornix + plotDat_LongMEAN$Corone)/2)
  plotDat_LongMEAN$HybDistance &lt;- (plotDat_LongMEAN$Hybrid - plotDat_LongMEAN$ParentalMidPoint)
  
  #add simple intermediacy factor 
  plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                          Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
  hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate','HybDistance')]
  for_tab &lt;- merge(hyb_level,plotDat,by='site')
  k_tab &lt;- unique(for_tab[,c('site','Intermediate','level','HybDistance')])
  
  #calculate distance between hybrids and the parental midpoint 
  hyb_means &lt;- as.data.frame(k_tab %&gt;% group_by(level) %&gt;% dplyr::summarize(Mean = mean(HybDistance)))
  hyb_means$ITERATION &lt;- counter
  
  #test significant differences in counts, if there are no intermediate events, this will add a column of zeroes
  con1 &lt;- table(k_tab$level,k_tab$Intermediate)
  con1
  
  tryCatch({
    res &lt;- fisher.test(con1)
    con2 &lt;- table(k_tab$level,k_tab$HybDistance)
    con2
    
    spec &lt;-  data.frame(ITERATION = counter, LEVEL = 'SPECIES',INTERMEDIATE = con1[2,1], MIXED = con1[2,2])
    tiss &lt;-  data.frame(ITERATION = counter, LEVEL = 'TISSUE',INTERMEDIATE = con1[3,1], MIXED = con1[3,2])
    fals &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNCLASSIFIED',INTERMEDIATE = con1[4,1], MIXED = con1[4,2])
    sexx &lt;-  data.frame(ITERATION = counter, LEVEL = 'SEX',INTERMEDIATE = con1[1,1], MIXED = con1[1,2])
    other &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNKNOWN',INTERMEDIATE = con1[5,1], MIXED = con1[5,2])
    pvals &lt;-  data.frame(pvalue = res$p.value)
    
    
    #bind loops
    HZ_species &lt;- rbind(HZ_species, spec)
    HZ_tissue &lt;- rbind(HZ_tissue, tiss)
    HZ_sex &lt;- rbind(HZ_sex, sexx)
    HZ_unclassified &lt;- rbind(HZ_unclassified, fals)
    HZ_other &lt;- rbind(HZ_other, other)
    HZ_pval &lt;- rbind(HZ_pval,pvals)
    HZ_means &lt;- rbind(HZ_means,hyb_means)
    
  }, error=function(e){HZ_noint &lt;- rbind(HZ_noint,counter);cat(counter,&quot;BAD \n&quot;)})
  
    }, error=function(e){cat(counter,&quot;: FAILED \n&quot;)})
  
  
}

HZ_distance &lt;- HZ_means
HZ_distance &lt;- HZ_distance[!grepl('UNCLASSIFIED',HZ_distance$level),]
HZ_distance$level &lt;- factor(HZ_distance$level, levels = c('UNKNOWN','SEX','TISSUE', 'SPECIES'))
a &lt;- ggplot(HZ_distance,aes(x=level,fill=level, y=Mean))+
  geom_boxplot(show.legend=FALSE)+ylab('Distance to Parentals')+xlab('')+
  scale_fill_manual(values=viridis(6))+
  stat_boxplot(geom ='errorbar', width = 0.25) +
  geom_hline(yintercept=0,lty=2,lwd=1,col=&quot;black&quot;)+
  theme_classic()
#coord_cartesian(ylim=c(-1,1))
a


bootdat &lt;- rbind(HZ_species,HZ_tissue,HZ_sex,HZ_other)
bootdat

meltboot &lt;- melt(bootdat,id.vars = c('LEVEL','ITERATION'))

meltboot$LEVEL &lt;- factor(meltboot$LEVEL, levels = c('UNKNOWN','SEX','TISSUE', 'SPECIES'))
b &lt;- ggplot(meltboot,aes(x=LEVEL,fill=variable,y=value))+
  geom_boxplot()+ylab('Number of Replicates')+xlab('')+
  scale_fill_manual(values=c('purple','gray'))+
  theme_classic()
b

c &lt;- ggplot(HZ_pval, aes(x=pvalue))+
  geom_histogram(aes(y = ..density..),bins=5) +
  geom_density(alpha = 0.1, fill = &quot;turquoise&quot;)+
  ylab(&quot;Density&quot;)+xlab(&quot;p-Value&quot;)+
  theme_classic()
c

#save it 
jpeg(&quot;plots/HZ-CG-BootstrapDistance.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(a,nrow=1)
dev.off()


#save it 
jpeg(&quot;plots/HZ-CG-Bootstrap.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(b,nrow=1)
dev.off()

#save it 
jpeg(&quot;plots/HZ-CG-Bootstrap_pvals.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=4)
theme_set(theme_classic(base_size = 16))
grid.arrange(c,nrow=1)
dev.off()</pre>
= ~~ 250BP ~~ =

<pre class="">for i in $(ls *.CpG_5mC.cov.gz | sed 's/\..*//g'); do 
zcat ${i}.CpG_5mC.cov.gz | bedtools intersect -a - -b 250BP.bed -wa -wb | awk '{OFS=&quot;\t&quot;}{print $7, $8, $9, $4, $5, $6, $7&quot;_&quot;$8&quot;_&quot;$9}' &gt; ${i}.250BP.bed
done</pre>
== CG 5x ==

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/CG/dplyr/&quot;)

#import all the data and average by 250BP
tab &lt;- read.table('D_Ko_C29_BL_ADL_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C29_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C29_ADL_F) &lt;- c('site','chr','start','end','numCs1','numTs1','Sites1');C29_ADL_F$C29_ADL_F &lt;- (C29_ADL_F$numCs1/(C29_ADL_F$numCs1+C29_ADL_F$numTs1))
tab &lt;- read.table('D_Ko_C29_BL_CHK_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C29_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C29_CHK_F) &lt;- c('site','chr','start','end','numCs2','numTs2','Sites2');C29_CHK_F$C29_CHK_F &lt;- (C29_CHK_F$numCs2/(C29_CHK_F$numCs2+C29_CHK_F$numTs2))
tab &lt;- read.table('D_Ko_C29_BL_YRL_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C29_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C29_YRL_F) &lt;- c('site','chr','start','end','numCs3','numTs3','Sites3');C29_YRL_F$C29_YRL_F &lt;- (C29_YRL_F$numCs3/(C29_YRL_F$numCs3+C29_YRL_F$numTs3))
tab &lt;- read.table('D_Ko_C31_BL_ADL_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C31_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C31_ADL_M) &lt;- c('site','chr','start','end','numCs4','numTs4','Sites4');C31_ADL_M$C31_ADL_M &lt;- (C31_ADL_M$numCs4/(C31_ADL_M$numCs4+C31_ADL_M$numTs4))
tab &lt;- read.table('D_Ko_C31_BL_YRL_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C31_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C31_YRL_M) &lt;- c('site','chr','start','end','numCs5','numTs5','Sites5');C31_YRL_M$C31_YRL_M &lt;- (C31_YRL_M$numCs5/(C31_YRL_M$numCs5+C31_YRL_M$numTs5))
tab &lt;- read.table('D_Ko_C36_BL_ADL_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C36_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C36_ADL_M) &lt;- c('site','chr','start','end','numCs6','numTs6','Sites6');C36_ADL_M$C36_ADL_M &lt;- (C36_ADL_M$numCs6/(C36_ADL_M$numCs6+C36_ADL_M$numTs6))
tab &lt;- read.table('D_Ko_C36_BL_CHK_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C36_CHK_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C36_CHK_M) &lt;- c('site','chr','start','end','numCs7','numTs7','Sites7');C36_CHK_M$C36_CHK_M &lt;- (C36_CHK_M$numCs7/(C36_CHK_M$numCs7+C36_CHK_M$numTs7))
tab &lt;- read.table('D_Ko_C36_BL_YRL_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C36_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C36_YRL_M) &lt;- c('site','chr','start','end','numCs8','numTs8','Sites8');C36_YRL_M$C36_YRL_M &lt;- (C36_YRL_M$numCs8/(C36_YRL_M$numCs8+C36_YRL_M$numTs8))
tab &lt;- read.table('D_Ko_C45_BL_ADL_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_ADL_F) &lt;- c('site','chr','start','end','numCs9','numTs9','Sites9');C45_ADL_F$C45_ADL_F &lt;- (C45_ADL_F$numCs9/(C45_ADL_F$numCs9+C45_ADL_F$numTs9))
tab &lt;- read.table('D_Ko_C45_BL_CHK_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_CHK_F) &lt;- c('site','chr','start','end','numCs10','numTs10','Sites10');C45_CHK_F$C45_CHK_F &lt;- (C45_CHK_F$numCs10/(C45_CHK_F$numCs10+C45_CHK_F$numTs10))
tab &lt;- read.table('D_Ko_C45_BL_YRL_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_YRL_F) &lt;- c('site','chr','start','end','numCs11','numTs11','Sites11');C45_YRL_F$C45_YRL_F &lt;- (C45_YRL_F$numCs11/(C45_YRL_F$numCs11+C45_YRL_F$numTs11))
tab &lt;- read.table('S_Up_H59_BL_ADL_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_ADL_M) &lt;- c('site','chr','start','end','numCs12','numTs12','Sites12');H59_ADL_M$H59_ADL_M &lt;- (H59_ADL_M$numCs12/(H59_ADL_M$numCs12+H59_ADL_M$numTs12))
tab &lt;- read.table('S_Up_H59_BL_CHK_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_CHK_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_CHK_M) &lt;- c('site','chr','start','end','numCs13','numTs13','Sites13');H59_CHK_M$H59_CHK_M &lt;- (H59_CHK_M$numCs13/(H59_CHK_M$numCs13+H59_CHK_M$numTs13))
tab &lt;- read.table('S_Up_H59_BL_YRL_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_YRL_M) &lt;- c('site','chr','start','end','numCs14','numTs14','Sites14');H59_YRL_M$H59_YRL_M &lt;- (H59_YRL_M$numCs14/(H59_YRL_M$numCs14+H59_YRL_M$numTs14))
tab &lt;- read.table('S_Up_H60_BL_ADL_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_ADL_F) &lt;- c('site','chr','start','end','numCs15','numTs15','Sites15');H60_ADL_F$H60_ADL_F &lt;- (H60_ADL_F$numCs15/(H60_ADL_F$numCs15+H60_ADL_F$numTs15))
tab &lt;- read.table('S_Up_H60_BL_CHK_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_CHK_F) &lt;- c('site','chr','start','end','numCs16','numTs16','Sites16');H60_CHK_F$H60_CHK_F &lt;- (H60_CHK_F$numCs16/(H60_CHK_F$numCs16+H60_CHK_F$numTs16))
tab &lt;- read.table('S_Up_H60_BL_YRL_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_YRL_F) &lt;- c('site','chr','start','end','numCs17','numTs17','Sites17');H60_YRL_F$H60_YRL_F &lt;- (H60_YRL_F$numCs17/(H60_YRL_F$numCs17+H60_YRL_F$numTs17))
tab &lt;- read.table('S_Up_H65_BL_ADL_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H65_ADL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H65_ADL_F) &lt;- c('site','chr','start','end','numCs18','numTs18','Sites18');H65_ADL_F$H65_ADL_F &lt;- (H65_ADL_F$numCs18/(H65_ADL_F$numCs18+H65_ADL_F$numTs18))
tab &lt;- read.table('S_Up_H65_BL_CHK_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H65_CHK_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H65_CHK_F) &lt;- c('site','chr','start','end','numCs19','numTs19','Sites19');H65_CHK_F$H65_CHK_F &lt;- (H65_CHK_F$numCs19/(H65_CHK_F$numCs19+H65_CHK_F$numTs19))
tab &lt;- read.table('S_Up_H65_BL_YRL_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H65_YRL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H65_YRL_F) &lt;- c('site','chr','start','end','numCs20','numTs20','Sites20');H65_YRL_F$H65_YRL_F &lt;- (H65_YRL_F$numCs20/(H65_YRL_F$numCs20+H65_YRL_F$numTs20))
tab &lt;- read.table('S_Up_H75_BL_ADL_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H75_ADL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H75_ADL_M) &lt;- c('site','chr','start','end','numCs21','numTs21','Sites21');H75_ADL_M$H75_ADL_M &lt;- (H75_ADL_M$numCs21/(H75_ADL_M$numCs21+H75_ADL_M$numTs21))
tab &lt;- read.table('S_Up_H75_BL_CHK_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H75_CHK_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H75_CHK_M) &lt;- c('site','chr','start','end','numCs22','numTs22','Sites22');H75_CHK_M$H75_CHK_M &lt;- (H75_CHK_M$numCs22/(H75_CHK_M$numCs22+H75_CHK_M$numTs22))
tab &lt;- read.table('S_Up_H75_BL_YRL_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H75_YRL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H75_YRL_M) &lt;- c('site','chr','start','end','numCs23','numTs23','Sites23');H75_YRL_M$H75_YRL_M &lt;- (H75_YRL_M$numCs23/(H75_YRL_M$numCs23+H75_YRL_M$numTs23))

head(H75_YRL_M)

master &lt;- Reduce(function(x,y) merge(x = x, y = y, by=c('site','chr','start','end')),
                 list(C29_ADL_F,C29_CHK_F,C29_YRL_F,C31_ADL_M,C31_YRL_M,C36_ADL_M,C36_CHK_M,C36_YRL_M,C45_ADL_F,C45_CHK_F,C45_YRL_F,H59_ADL_M,H59_CHK_M,H59_YRL_M,H60_ADL_F,H60_CHK_F,H60_YRL_F,H65_ADL_F,H65_CHK_F,H65_YRL_F,H75_ADL_M,H75_CHK_M,H75_YRL_M))
head(master)

#calculate coverage and CpGs
cov &lt;- master %&gt;% mutate(minsite1 = ifelse(Sites1 &lt; 3, NA, Sites1),
                         minsite2 = ifelse(Sites2 &lt; 3, NA, Sites2),
                         minsite3 = ifelse(Sites3 &lt; 3, NA, Sites3),
                         minsite4 = ifelse(Sites4 &lt; 3, NA, Sites4),
                         minsite5 = ifelse(Sites5 &lt; 3, NA, Sites5),
                         minsite6 = ifelse(Sites6 &lt; 3, NA, Sites6),
                         minsite7 = ifelse(Sites7 &lt; 3, NA, Sites7),
                         minsite8 = ifelse(Sites8 &lt; 3, NA, Sites8),
                         minsite9 = ifelse(Sites9 &lt; 3, NA, Sites9),
                         minsite10 = ifelse(Sites10 &lt; 3, NA, Sites10),
                         minsite11 = ifelse(Sites11 &lt; 3, NA, Sites11),
                         minsite12 = ifelse(Sites12 &lt; 3, NA, Sites12),
                         minsite13 = ifelse(Sites13 &lt; 3, NA, Sites13),
                         minsite14 = ifelse(Sites14 &lt; 3, NA, Sites14),
                         minsite15 = ifelse(Sites15 &lt; 3, NA, Sites15),
                         minsite16 = ifelse(Sites16 &lt; 3, NA, Sites16),
                         minsite17 = ifelse(Sites17 &lt; 3, NA, Sites17),
                         minsite18 = ifelse(Sites18 &lt; 3, NA, Sites18),
                         minsite19 = ifelse(Sites19 &lt; 3, NA, Sites19),
                         minsite20 = ifelse(Sites20 &lt; 3, NA, Sites20),
                         minsite21 = ifelse(Sites21 &lt; 3, NA, Sites21),
                         minsite22 = ifelse(Sites22 &lt; 3, NA, Sites22),
                         minsite23 = ifelse(Sites23 &lt; 3, NA, Sites23))

#count NAs
colSums(is.na(cov))

#filter according to missingness
sitedat &lt;- cov[rowSums(is.na(cov[grepl('^minsite', names(cov))])) &lt;= 4, ]
nrow(cov)
nrow(sitedat)

master &lt;- sitedat

#define groups
master$MALE &lt;- rowMeans(master[grepl('_M$', names(master))],na.rm=TRUE) #0=F  
master$FEMALE &lt;- rowMeans(master[grepl('_F$', names(master))],na.rm=TRUE) #1=M
master$ADULT &lt;- rowMeans(master[grepl('_ADL|_YRL', names(master))],na.rm=TRUE) #0=A
master$CHICK &lt;- rowMeans(master[grepl('_CHK_', names(master))],na.rm=TRUE) #1=C
master$HOODED &lt;- rowMeans(master[grepl('^H', names(master))],na.rm=TRUE) #1=C
master$CARRION &lt;- rowMeans(master[grepl('^C', names(master))],na.rm=TRUE) #0=H
compare &lt;- master[,c(1,(ncol(master)-4-1):ncol(master))]
head(compare)
#now we must do pairwise comparisons between our 3 treatments for % 5mC
compare[8] &lt;- compare[2]-compare[3]
compare[9] &lt;- compare[4]-compare[5]
compare[10] &lt;- compare[6]-compare[7]
head(compare)
win_diff &lt;- compare[,c(8,9,10)]

#merge the total percent diff with the original frame
master_meth &lt;- cbind(master,win_diff)
colnames(master_meth)[colnames(master_meth) == 'MALE.1'] &lt;- 'sex_M.F'
colnames(master_meth)[colnames(master_meth) == 'ADULT.1'] &lt;- 'stage_ADL.CHK'
colnames(master_meth)[colnames(master_meth) == 'HOODED.1'] &lt;- 'species_H.C'
nrow(master_meth)
names(master_meth)


#now subset for GLMM # C=1 H=0 / F=0 M=1 / ADL+YRL=0 CHK=1
IND1 &lt;- as.data.frame(c(master_meth[1],&quot;C29&quot;,master_meth[5], master_meth[6],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND2 &lt;- as.data.frame(c(master_meth[1],&quot;C29&quot;,master_meth[9], master_meth[10],&quot;1&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND3 &lt;- as.data.frame(c(master_meth[1],&quot;C29&quot;,master_meth[13], master_meth[14],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND4 &lt;- as.data.frame(c(master_meth[1],&quot;C31&quot;,master_meth[17], master_meth[18],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND5 &lt;- as.data.frame(c(master_meth[1],&quot;C31&quot;,master_meth[21], master_meth[22],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND6 &lt;- as.data.frame(c(master_meth[1],&quot;C36&quot;,master_meth[25], master_meth[26],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND7 &lt;- as.data.frame(c(master_meth[1],&quot;C36&quot;,master_meth[29], master_meth[30],&quot;1&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND8 &lt;- as.data.frame(c(master_meth[1],&quot;C36&quot;,master_meth[33], master_meth[34],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND9 &lt;- as.data.frame(c(master_meth[1],&quot;C45&quot;,master_meth[37], master_meth[38],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND10 &lt;- as.data.frame(c(master_meth[1],&quot;C45&quot;,master_meth[41], master_meth[42],&quot;1&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND11 &lt;- as.data.frame(c(master_meth[1],&quot;C45&quot;,master_meth[45], master_meth[46],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND12 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[49], master_meth[50],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND13 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[53], master_meth[54],&quot;0&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND14 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[57], master_meth[58],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND15 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[61], master_meth[62],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND16 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[65], master_meth[66],&quot;0&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND17 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[69], master_meth[70],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND18 &lt;- as.data.frame(c(master_meth[1],&quot;H65&quot;,master_meth[73], master_meth[74],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND19 &lt;- as.data.frame(c(master_meth[1],&quot;H65&quot;,master_meth[77], master_meth[78],&quot;0&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND20 &lt;- as.data.frame(c(master_meth[1],&quot;H65&quot;,master_meth[81], master_meth[82],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND21 &lt;- as.data.frame(c(master_meth[1],&quot;H75&quot;,master_meth[85], master_meth[86],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND22 &lt;- as.data.frame(c(master_meth[1],&quot;H75&quot;,master_meth[89], master_meth[90],&quot;0&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))
IND23 &lt;- as.data.frame(c(master_meth[1],&quot;H75&quot;,master_meth[93], master_meth[94],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Stage&quot;))

head(IND4)
head(IND23)

#Bind them all together and order it by window
datmeth &lt;- rbind(IND1,IND2,IND3,IND4,IND5,IND6,IND7,IND8,IND9,IND10,IND11,IND12,IND13,IND14,IND15,IND16,IND17,IND18,IND19,IND20,IND21,IND22,IND23)
datmeth &lt;- datmeth[order(datmeth$CGI),]

head(datmeth)

#sanity check 
nrow(datmeth)/23

#save some files we might need later 
write.csv(datmeth,file=&quot;CG_GLMM_Input_5x.csv&quot;,row.names=FALSE)
write.csv(master_meth,file=&quot;CG_FULL_5x.csv&quot;,row.names=FALSE)

#now we can start here 
datmeth &lt;- read.csv(&quot;CG_GLMM_Input_5x.csv&quot;,header=TRUE)
head(datmeth)
nrow(datmeth)/23
#set these as factor variables 
datmeth$Species &lt;- as.factor(datmeth$Species)
datmeth$Stage &lt;- as.factor(datmeth$Stage)
datmeth$Sex &lt;- as.factor(datmeth$Sex)
datmeth$ID &lt;- as.factor(datmeth$ID)

##### MODEL #####
DMA_GLMM_pValues &lt;- NULL
DMA_GLMM_Estimates &lt;- NULL
DMA_GLMM_SEs &lt;- NULL
DMA_GLMM_RandomEffect_Var &lt;- NULL
DMA_GLMM_DispersionStat &lt;- NULL
DMA_GLMM_Singular &lt;- NULL

for (i in seq(1, nrow(datmeth), by = 23)) {
  tryCatch({
    cat('\n Running model for CpG site: ',((i-1)/23))
    # model each site
    CpGsite &lt;- datmeth[i:(i + 22), ]
    # run the model and get the contrasts between sex, stage, species
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Sex + Stage + Species + (1 | ID) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+08)))
    DMA_GLMM_Singularf &lt;- isSingular(glmm_CpG)
    sum_mod &lt;- summary(glmm_CpG)
    
    ## 1 random effects ( (1 | ID) )
    GLMM_RandomEffect_Var &lt;- as.data.frame(VarCorr(glmm_CpG))$sdcor
    
    # calculate dispersion statistic (following AF Zuur, JM Hilbe
    # &amp; EN Ieno. A beginner’s guide to GLM and GLMM with R - a
    # frequentist and Bayesian perspective for
    # ecologists(Highland Statistics Ltd., 2013).)
    E1 &lt;- residuals(glmm_CpG)
    # number of parameters: fixed effects + 1 random effect
    p1 &lt;- length(fixef(glmm_CpG)) + 1
    GLMM_DispersionStat &lt;- sum(E1^2)/(nrow(CpGsite) - p1)
    # format estimates to add estimates for each loop to
    # estimates from previous loops
    
    # TO GET THE COLUMN HEADERS WITH THE CONTRASTS, check the excel file. First I look at the glmm_CpG_contrast object, which lists the models in order of 1-8, for this comparison. From here, make the 28 pairwise comparison charts, and substitute the 0 and 1 with your variables
    GLMM_Estimates_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,1], Stage1 = sum_mod$coefficients[3,1], Species1 = sum_mod$coefficients[4,1])
    GLMM_SEs_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,2], Stage1 = sum_mod$coefficients[3,2], Species1 = sum_mod$coefficients[4,2])
    GLMM_pValues_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,4], Stage1 = sum_mod$coefficients[3,4], Species1 = sum_mod$coefficients[4,4])
    GLMM_RandomEffect_Var_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                      1]), ID = GLMM_RandomEffect_Var[1])
    GLMM_DispersionStat_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                    1]), DispStat = GLMM_DispersionStat)
    # add estimates for each loop to estimates from previous
    # loops
    DMA_GLMM_pValues &lt;- rbind(DMA_GLMM_pValues, GLMM_pValues_f)
    DMA_GLMM_Estimates &lt;- rbind(DMA_GLMM_Estimates, GLMM_Estimates_f)
    DMA_GLMM_SEs &lt;- rbind(DMA_GLMM_SEs, GLMM_SEs_f)
    DMA_GLMM_RandomEffect_Var &lt;- rbind(DMA_GLMM_RandomEffect_Var,GLMM_RandomEffect_Var_f)
    DMA_GLMM_DispersionStat &lt;- rbind(DMA_GLMM_DispersionStat,GLMM_DispersionStat_f)
    DMA_GLMM_Singular &lt;- rbind(DMA_GLMM_Singular,DMA_GLMM_Singularf)
    
    #Save errors to this output
  }, error=function(e){cat(unique(CpGsite[,1]), &quot;\n&quot;)
    
  }
  )
}

# 3. Save loop results
save(DMA_GLMM_pValues, DMA_GLMM_Estimates, DMA_GLMM_SEs, DMA_GLMM_RandomEffect_Var,
     DMA_GLMM_DispersionStat,DMA_GLMM_Singular, file = &quot;CG_DMA_CrowResults_5x.RData&quot;)

#should be the samem otherwise we have models that didn't converge 
nrow(DMA_GLMM_pValues)
nrow(datmeth)/23</pre>
=== Volcanos ===

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(LICORS)
library(matrixStats)
library(viridis)
library(RColorBrewer)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/CG/dplyr&quot;)

load(&quot;CG_DMA_CrowResults_5x.RData&quot;)

#check out some of the data
head(DMA_GLMM_Estimates)
dim(DMA_GLMM_Estimates)
head(DMA_GLMM_pValues)
head(DMA_GLMM_SEs)
head(DMA_GLMM_Singular)


#let's check out the distributio of 5mC contrasts
multi.hist(DMA_GLMM_Estimates[,2:4],nrow=1,ncol=NULL,breaks=21)

#plot dispersion boxplot, we will exclude any sites outside the 99% interval
disp_limits &lt;- hdi(DMA_GLMM_DispersionStat$DispStat,credMass = 0.99)
disp_limits

# lower     upper 
# 0.0251642 1.3674338 

jpeg(&quot;plots/CG_dispersion_plot.jpg&quot;,units=&quot;in&quot;,res=300, height=6, width=5)
theme_set(theme_classic(base_size = 16))
dplot &lt;- ggplot(DMA_GLMM_DispersionStat,aes(y=DispStat,x=0))+geom_violin()+theme_classic(base_size = 16)+
  geom_jitter(width=0.1)+
  geom_text(aes(y = (disp_limits[2]+0.05),x=0.2, label = &quot;Upper Limit&quot;))+
  geom_hline(yintercept = disp_limits[2],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  geom_text(aes(y = (disp_limits[1]+0.05),x=0.2, label = &quot;Lower Limit&quot;))+
  geom_hline(yintercept = disp_limits[1],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  xlab(&quot;&quot;)+ylab(&quot;Dispersion Statistic&quot;)+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
grid.arrange(dplot)
dev.off()

#subset bad sites
bad_sites &lt;- subset(DMA_GLMM_DispersionStat,DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2])
nrow(bad_sites)

# calculate 10% differences, now we care about direction so we re-do this, since before it was absolute value 
meth &lt;- read.csv(&quot;CG_FULL_5x.csv&quot;,header=TRUE)
head(meth)

names(DMA_GLMM_pValues) &lt;- c('site','pSex','pStage','pSpecies')
names(DMA_GLMM_Estimates) &lt;- c('site','eSex','eStage','eSpecies')
names(DMA_GLMM_SEs) &lt;- c('site','sSex','sStage','sSpecies')
DMA_RF_S &lt;- cbind(DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular)
names(DMA_RF_S) &lt;- c('site','RandomEffect','IsSingular')
master_meth1 &lt;- merge(meth, DMA_GLMM_pValues, by='site')
master_meth2 &lt;- merge(master_meth1, DMA_GLMM_Estimates, by='site')
master_meth3 &lt;- merge(master_meth2, DMA_GLMM_SEs, by='site')
master_meth4 &lt;- merge(master_meth3, DMA_GLMM_DispersionStat, by='site')
master_meth &lt;- merge(master_meth4, DMA_RF_S, by='site')
head(master_meth)
nrow(master_meth)

#### Volcano with bonferonni
pthresh &lt;- (0.05/nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(pSex &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; pSpecies &gt; pthresh &amp; pStage &gt; pthresh, &quot;SEX&quot;, 
                                                   ifelse(pSpecies &lt; pthresh &amp; abs(species_H.C) &gt; 0.05 &amp;  pSex &gt; pthresh &amp; pStage &gt; pthresh,&quot;SPECIES&quot;,
                                                          ifelse(pStage &lt; pthresh &amp; abs(stage_ADL.CHK) &gt; 0.05  &amp; pSex &gt; pthresh &amp; pSpecies &gt; pthresh ,&quot;STAGE&quot;,
                                                                 ifelse(pSex &lt; pthresh &amp; pSpecies &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp;  pStage &gt; pthresh ,&quot;SEX_SPECIES&quot;, 
                                                                        ifelse(pSex &lt; pthresh &amp; pStage &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(stage_ADL.CHK) &gt; 0.05 &amp; pSex &gt; pthresh ,&quot;SEX_STAGE&quot;,
                                                                               ifelse(pSpecies &lt; pthresh &amp; pStage &lt; pthresh &amp; abs(species_H.C) &gt; 0.05 &amp; abs(stage_ADL.CHK) &gt; 0.05 &amp;  pSex &gt; pthresh ,&quot;SPECIES_STAGE&quot;,
                                                                                      ifelse(pSpecies &lt; pthresh &amp; pStage &lt; pthresh &amp;  pSex &lt; pthresh ,&quot;ALL&quot;,&quot;UNKNOWN&quot;))))))))
master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

### Or with FDR
pval &lt;- 0.05
master_meth$fSex &lt;- p.adjust(master_meth$pSex,method='BH',n=nrow(master_meth))
master_meth$fStage &lt;- p.adjust(master_meth$pStage,method='BH',n=nrow(master_meth))
master_meth$fSpecies &lt;- p.adjust(master_meth$pSpecies,method='BH',n=nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(fSex &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; fSpecies &gt; pval &amp; fStage &gt; pval, &quot;SEX&quot;, 
                                                   ifelse(fSpecies &lt; pval &amp; abs(species_H.C) &gt; 0.05 &amp;  fSex &gt; pval &amp; fStage &gt; pval,&quot;SPECIES&quot;,
                                                          ifelse(fStage &lt; pval &amp; abs(stage_ADL.CHK) &gt; 0.05  &amp; fSex &gt; pval &amp; fSpecies &gt; pval ,&quot;STAGE&quot;,
                                                                 ifelse(fSex &lt; pval &amp; fSpecies &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp;  fStage &gt; pval ,&quot;SEX_SPECIES&quot;, 
                                                                        ifelse(fSex &lt; pval &amp; fStage &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(stage_ADL.CHK) &gt; 0.05 &amp; fSex &gt; pval ,&quot;SEX_STAGE&quot;,
                                                                               ifelse(fSpecies &lt; pval &amp; fStage &lt; pval &amp; abs(species_H.C) &gt; 0.05 &amp; abs(stage_ADL.CHK) &gt; 0.05 &amp;  fSex &gt; pval ,&quot;SPECIES_STAGE&quot;,
                                                                                      ifelse(fSpecies &lt; pval &amp; fStage &lt; pval &amp;  fSex &lt; pval ,&quot;ALL&quot;,&quot;UNKNOWN&quot;))))))))


master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

#save for manhattan
write.csv(master_meth,file='CG_Manhattan_5x_bonferonni.csv')

#hunt for colors
#display.brewer.all(colorblindFriendly=TRUE) 
cols &lt;- brewer.pal(8,'Dark2')
#cols &lt;- inferno(5)
shapes &lt;- c(15,16,17,18,16,16,1)

#plot
p1 &lt;- ggplot(master_meth, aes(x=sex_M.F,y=threshold(-log10(pSex),max=quantile(-log10(pSex),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;STAGE&quot;=cols[2],&quot;SEX_STAGE&quot;=cols[6],&quot;SPECIES_STAGE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Sex&quot;)+
  ylab('-log10(p)')
p1

p2 &lt;- ggplot(master_meth, aes(x=stage_ADL.CHK,y=threshold(-log10(pStage),max=quantile(-log10(pStage),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR), size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;STAGE&quot;=cols[2],&quot;SEX_STAGE&quot;=cols[6],&quot;SPECIES_STAGE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Stage&quot;)+
  ylab('-log10(p)')
p2

p3 &lt;- ggplot(master_meth, aes(x=species_H.C,y=threshold(-log10(pSpecies),max=quantile(-log10(pSpecies),0.99)))) +
  geom_point(aes(colour = DMR,pch= DMR), size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;STAGE&quot;=cols[2],&quot;SEX_STAGE&quot;=cols[6],&quot;SPECIES_STAGE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  scale_shape_manual(values=shapes)+
  ggtitle(&quot;Species&quot;)+
  ylab('-log10(p)')
p3

#save it 
jpeg(&quot;plots/CG_DMA_Volcano_5x_bonferonni.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=12)
theme_set(theme_classic(base_size = 16))
grid.arrange(p1,p3,p2,nrow=1)
dev.off()


#save file
write.csv(master_meth,file='CG_DMA_DMRS_5x_bonferonni.csv',row.names=FALSE)
</pre>
== HZ 5x ==

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/HZ/dplyr/&quot;)

#import all the data and average by 250BP

tab &lt;- read.table('D_Ba_H02_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H02 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H02) &lt;- c('site','chr','start','end','numCs1','numTs1','Sites1');D_Ba_H02$D_Ba_H02 &lt;- (D_Ba_H02$numCs1/(D_Ba_H02$numCs1+D_Ba_H02$numTs1))
tab &lt;- read.table('D_Ba_H09_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H09 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H09) &lt;- c('site','chr','start','end','numCs2','numTs2','Sites2');D_Ba_H09$D_Ba_H09 &lt;- (D_Ba_H09$numCs2/(D_Ba_H09$numCs2+D_Ba_H09$numTs2))
tab &lt;- read.table('D_Ba_H19_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H19 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H19) &lt;- c('site','chr','start','end','numCs3','numTs3','Sites3');D_Ba_H19$D_Ba_H19 &lt;- (D_Ba_H19$numCs3/(D_Ba_H19$numCs3+D_Ba_H19$numTs3))
tab &lt;- read.table('D_Ba_H21_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ba_H21 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ba_H21) &lt;- c('site','chr','start','end','numCs4','numTs4','Sites4');D_Ba_H21$D_Ba_H21 &lt;- (D_Ba_H21$numCs4/(D_Ba_H21$numCs4+D_Ba_H21$numTs4))
tab &lt;- read.table('D_Hi_C03_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Hi_C03 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Hi_C03) &lt;- c('site','chr','start','end','numCs5','numTs5','Sites5');D_Hi_C03$D_Hi_C03 &lt;- (D_Hi_C03$numCs5/(D_Hi_C03$numCs5+D_Hi_C03$numTs5))
tab &lt;- read.table('D_Ko_C22_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ko_C22 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ko_C22) &lt;- c('site','chr','start','end','numCs6','numTs6','Sites6');D_Ko_C22$D_Ko_C22 &lt;- (D_Ko_C22$numCs6/(D_Ko_C22$numCs6+D_Ko_C22$numTs6))
tab &lt;- read.table('D_Ko_C40_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ko_C40 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ko_C40) &lt;- c('site','chr','start','end','numCs7','numTs7','Sites7');D_Ko_C40$D_Ko_C40 &lt;- (D_Ko_C40$numCs7/(D_Ko_C40$numCs7+D_Ko_C40$numTs7))
tab &lt;- read.table('D_Ko_C42_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ko_C42 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ko_C42) &lt;- c('site','chr','start','end','numCs8','numTs8','Sites8');D_Ko_C42$D_Ko_C42 &lt;- (D_Ko_C42$numCs8/(D_Ko_C42$numCs8+D_Ko_C42$numTs8))
tab &lt;- read.table('D_Ku_H02_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ku_H02 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ku_H02) &lt;- c('site','chr','start','end','numCs9','numTs9','Sites9');D_Ku_H02$D_Ku_H02 &lt;- (D_Ku_H02$numCs9/(D_Ku_H02$numCs9+D_Ku_H02$numTs9))
tab &lt;- read.table('D_Lo_C19_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Lo_C19 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Lo_C19) &lt;- c('site','chr','start','end','numCs10','numTs10','Sites10');D_Lo_C19$D_Lo_C19 &lt;- (D_Lo_C19$numCs10/(D_Lo_C19$numCs10+D_Lo_C19$numTs10))
tab &lt;- read.table('D_Lo_C20_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Lo_C20 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Lo_C20) &lt;- c('site','chr','start','end','numCs11','numTs11','Sites11');D_Lo_C20$D_Lo_C20 &lt;- (D_Lo_C20$numCs11/(D_Lo_C20$numCs11+D_Lo_C20$numTs11))
tab &lt;- read.table('D_Ne_Y03_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y03 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y03) &lt;- c('site','chr','start','end','numCs12','numTs12','Sites12');D_Ne_Y03$D_Ne_Y03 &lt;- (D_Ne_Y03$numCs12/(D_Ne_Y03$numCs12+D_Ne_Y03$numTs12))
tab &lt;- read.table('D_Ne_Y14_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y14 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y14) &lt;- c('site','chr','start','end','numCs13','numTs13','Sites13');D_Ne_Y14$D_Ne_Y14 &lt;- (D_Ne_Y14$numCs13/(D_Ne_Y14$numCs13+D_Ne_Y14$numTs13))
tab &lt;- read.table('D_Ne_Y31_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y31 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y31) &lt;- c('site','chr','start','end','numCs14','numTs14','Sites14');D_Ne_Y31$D_Ne_Y31 &lt;- (D_Ne_Y31$numCs14/(D_Ne_Y31$numCs14+D_Ne_Y31$numTs14))
tab &lt;- read.table('D_Ne_Y36_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y36 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y36) &lt;- c('site','chr','start','end','numCs15','numTs15','Sites15');D_Ne_Y36$D_Ne_Y36 &lt;- (D_Ne_Y36$numCs15/(D_Ne_Y36$numCs15+D_Ne_Y36$numTs15))
tab &lt;- read.table('D_Ne_Y40_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y40 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y40) &lt;- c('site','chr','start','end','numCs16','numTs16','Sites16');D_Ne_Y40$D_Ne_Y40 &lt;- (D_Ne_Y40$numCs16/(D_Ne_Y40$numCs16+D_Ne_Y40$numTs16))
tab &lt;- read.table('D_Ne_Y42_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Ne_Y42 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Ne_Y42) &lt;- c('site','chr','start','end','numCs17','numTs17','Sites17');D_Ne_Y42$D_Ne_Y42 &lt;- (D_Ne_Y42$numCs17/(D_Ne_Y42$numCs17+D_Ne_Y42$numTs17))
tab &lt;- read.table('D_Rb_Y07_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y07 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y07) &lt;- c('site','chr','start','end','numCs18','numTs18','Sites18');D_Rb_Y07$D_Rb_Y07 &lt;- (D_Rb_Y07$numCs18/(D_Rb_Y07$numCs18+D_Rb_Y07$numTs18))
tab &lt;- read.table('D_Rb_Y08_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y08 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y08) &lt;- c('site','chr','start','end','numCs19','numTs19','Sites19');D_Rb_Y08$D_Rb_Y08 &lt;- (D_Rb_Y08$numCs19/(D_Rb_Y08$numCs19+D_Rb_Y08$numTs19))
tab &lt;- read.table('D_Rb_Y13_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y13 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y13) &lt;- c('site','chr','start','end','numCs20','numTs20','Sites20');D_Rb_Y13$D_Rb_Y13 &lt;- (D_Rb_Y13$numCs20/(D_Rb_Y13$numCs20+D_Rb_Y13$numTs20))
tab &lt;- read.table('D_Rb_Y15_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);D_Rb_Y15 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(D_Rb_Y15) &lt;- c('site','chr','start','end','numCs21','numTs21','Sites21');D_Rb_Y15$D_Rb_Y15 &lt;- (D_Rb_Y15$numCs21/(D_Rb_Y15$numCs21+D_Rb_Y15$numTs21))
tab &lt;- read.table('S_Up_H77_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);S_Up_H77 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(S_Up_H77) &lt;- c('site','chr','start','end','numCs22','numTs22','Sites22');S_Up_H77$S_Up_H77 &lt;- (S_Up_H77$numCs22/(S_Up_H77$numCs22+S_Up_H77$numTs22))
tab &lt;- read.table('S_Up_H80_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);S_Up_H80 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(S_Up_H80) &lt;- c('site','chr','start','end','numCs23','numTs23','Sites23');S_Up_H80$S_Up_H80 &lt;- (S_Up_H80$numCs23/(S_Up_H80$numCs23+S_Up_H80$numTs23))
tab &lt;- read.table('S_Up_H81_BL_CHK_M.250BP.bed',header=FALSE); tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);S_Up_H81 &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(S_Up_H81) &lt;- c('site','chr','start','end','numCs24','numTs24','Sites24');S_Up_H81$S_Up_H81 &lt;- (S_Up_H81$numCs24/(S_Up_H81$numCs24+S_Up_H81$numTs24))

head(S_Up_H81)

master &lt;- Reduce(function(x,y) merge(x = x, y = y, by=c('site','chr','start','end')),
                 list(D_Ba_H02,D_Ba_H09,D_Ba_H19,D_Ba_H21,D_Hi_C03,D_Ko_C22,D_Ko_C40,D_Ko_C42,D_Ku_H02,D_Lo_C19,D_Lo_C20,D_Ne_Y03,D_Ne_Y14,D_Ne_Y31,D_Ne_Y36,D_Ne_Y40,D_Ne_Y42,D_Rb_Y07,D_Rb_Y08,D_Rb_Y13,D_Rb_Y15,S_Up_H77,S_Up_H80,S_Up_H81))
head(master)

#calculate coverage and CpGs
cov &lt;- master %&gt;% mutate(minsite1 = ifelse(Sites1 &lt; 3, NA, Sites1),
                         minsite2 = ifelse(Sites2 &lt; 3, NA, Sites2),
                         minsite3 = ifelse(Sites3 &lt; 3, NA, Sites3),
                         minsite4 = ifelse(Sites4 &lt; 3, NA, Sites4),
                         minsite5 = ifelse(Sites5 &lt; 3, NA, Sites5),
                         minsite6 = ifelse(Sites6 &lt; 3, NA, Sites6),
                         minsite7 = ifelse(Sites7 &lt; 3, NA, Sites7),
                         minsite8 = ifelse(Sites8 &lt; 3, NA, Sites8),
                         minsite9 = ifelse(Sites9 &lt; 3, NA, Sites9),
                         minsite10 = ifelse(Sites10 &lt; 3, NA, Sites10),
                         minsite11 = ifelse(Sites11 &lt; 3, NA, Sites11),
                         minsite12 = ifelse(Sites12 &lt; 3, NA, Sites12),
                         minsite13 = ifelse(Sites13 &lt; 3, NA, Sites13),
                         minsite14 = ifelse(Sites14 &lt; 3, NA, Sites14),
                         minsite15 = ifelse(Sites15 &lt; 3, NA, Sites15),
                         minsite16 = ifelse(Sites16 &lt; 3, NA, Sites16),
                         minsite17 = ifelse(Sites17 &lt; 3, NA, Sites17),
                         minsite18 = ifelse(Sites18 &lt; 3, NA, Sites18),
                         minsite19 = ifelse(Sites19 &lt; 3, NA, Sites19),
                         minsite20 = ifelse(Sites20 &lt; 3, NA, Sites20),
                         minsite21 = ifelse(Sites21 &lt; 3, NA, Sites21),
                         minsite22 = ifelse(Sites22 &lt; 3, NA, Sites22),
                         minsite23 = ifelse(Sites23 &lt; 3, NA, Sites23),
                         minsite24 = ifelse(Sites24 &lt; 3, NA, Sites24))

#count NAs
colSums(is.na(cov))

#filter according to missingness
sitedat &lt;- cov[rowSums(is.na(cov[grepl('^minsite', names(cov))])) &lt;= 4, ]
nrow(cov)
nrow(sitedat)

master &lt;- sitedat
nrow(master)

#count NAs
colSums(is.na(master))

#define groups
master$HOODED &lt;- rowMeans(master[grepl('^S_Up', names(master))],na.rm=TRUE)
master$CARRION &lt;- rowMeans(master[grepl('^D_Ko', names(master))],na.rm=TRUE)

compare &lt;- master[,c(1,(ncol(master)-0-1):ncol(master))]
head(compare)
#now we must do 15 pairwise comparisons between our 3 treatments for % 5mC, keep track of this in the template file
compare[4] &lt;- compare[2]-compare[3]

head(compare)
win_diff &lt;- compare[,c(4)]

#merge the total percent diff with the original frame
master_meth &lt;- cbind(master,win_diff)
colnames(master_meth)[colnames(master_meth) == 'win_diff'] &lt;- 'species_H.C'
nrow(master_meth)
names(master_meth)

#create the GLMM input #C=0 Hybrid=1 H=2 / Years / etc
IND1 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H02&quot;,master_meth[5], master_meth[6],&quot;0.574193&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND2 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H09&quot;,master_meth[9], master_meth[10],&quot;0.5466904&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND3 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H19&quot;,master_meth[13], master_meth[14],&quot;0.4055915&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND4 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ba_H21&quot;,master_meth[17], master_meth[18],&quot;0.5258975&quot;,&quot;0&quot;,&quot;588&quot;,&quot;1&quot;,&quot;Ba_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND5 &lt;- as.data.frame(c(master_meth[1],&quot;D_Hi_C03&quot;,master_meth[21], master_meth[22],&quot;0.4279232&quot;,&quot;1&quot;,&quot;466&quot;,&quot;1&quot;,&quot;Hi_0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND6 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ko_C22&quot;,master_meth[25], master_meth[26],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;Ko_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND7 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ko_C40&quot;,master_meth[29], master_meth[30],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;Ko_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND8 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ko_C42&quot;,master_meth[33], master_meth[34],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;Ko_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND9 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ku_H02&quot;,master_meth[37], master_meth[38],&quot;0.7063256&quot;,&quot;0&quot;,&quot;589&quot;,&quot;1&quot;,&quot;Ku_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND10 &lt;- as.data.frame(c(master_meth[1],&quot;D_Lo_C19&quot;,master_meth[41], master_meth[42],&quot;0.2260644&quot;,&quot;1&quot;,&quot;440&quot;,&quot;1&quot;,&quot;Lo_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND11 &lt;- as.data.frame(c(master_meth[1],&quot;D_Lo_C20&quot;,master_meth[45], master_meth[46],&quot;0.3307552&quot;,&quot;1&quot;,&quot;440&quot;,&quot;1&quot;,&quot;Lo_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND12 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y03&quot;,master_meth[49], master_meth[50],&quot;0.4295311&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND13 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y14&quot;,master_meth[53], master_meth[54],&quot;0.6457692&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND14 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y31&quot;,master_meth[57], master_meth[58],&quot;0.7511844&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND15 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y36&quot;,master_meth[61], master_meth[62],&quot;0.6105241&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND16 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y40&quot;,master_meth[65], master_meth[66],&quot;0.6080164&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND17 &lt;- as.data.frame(c(master_meth[1],&quot;D_Ne_Y42&quot;,master_meth[69], master_meth[70],&quot;0.5530574&quot;,&quot;2&quot;,&quot;546&quot;,&quot;1&quot;,&quot;Ne_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND18 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y07&quot;,master_meth[73], master_meth[74],&quot;0.6271691&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_2&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND19 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y08&quot;,master_meth[77], master_meth[78],&quot;0.5266439&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND20 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y13&quot;,master_meth[81], master_meth[82],&quot;0.7101439&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND21 &lt;- as.data.frame(c(master_meth[1],&quot;D_Rb_Y15&quot;,master_meth[85], master_meth[86],&quot;0.4707096&quot;,&quot;2&quot;,&quot;513&quot;,&quot;1&quot;,&quot;Rb_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND22 &lt;- as.data.frame(c(master_meth[1],&quot;S_Up_H77&quot;,master_meth[89], master_meth[90],&quot;1&quot;,&quot;1&quot;,&quot;1476&quot;,&quot;2&quot;,&quot;Up_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND23 &lt;- as.data.frame(c(master_meth[1],&quot;S_Up_H80&quot;,master_meth[93], master_meth[94],&quot;1&quot;,&quot;1&quot;,&quot;1476&quot;,&quot;2&quot;,&quot;Up_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))
IND24 &lt;- as.data.frame(c(master_meth[1],&quot;S_Up_H81&quot;,master_meth[97], master_meth[98],&quot;1&quot;,&quot;1&quot;,&quot;1476&quot;,&quot;2&quot;,&quot;Up_1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Hybrid_Index&quot;,&quot;Year&quot;,&quot;Distance&quot;,&quot;Classification&quot;,&quot;Locality&quot;))

head(IND4)
head(IND24)

#Bind them all together and order it by window
datmeth &lt;- rbind(IND1,IND2,IND3,IND4,IND5,IND6,IND7,IND8,IND9,IND10,IND11,IND12,IND13,IND14,IND15,IND16,IND17,IND18,IND19,IND20,IND21,IND22,IND23,IND24)
datmeth &lt;- datmeth[order(datmeth$CGI),]

head(datmeth)

#sanity check 
nrow(datmeth)/24

#plot correlations between variables
dats &lt;- read.table(&quot;metadata_hz.txt&quot;,header=TRUE)
text &lt;- cor(dats$Hybrid_Index,dats$Year,method='pearson')
ggplot(dats,aes(x=Year,y=Hybrid_Index,col=Hybrid_Index))+geom_point()+theme_classic()+
  scale_color_gradient(low='black',high='grey90')+
  geom_smooth(method='lm')+ggtitle('Distance to Hybrid Index')+
  geom_text(aes(-Inf,Inf),label=paste(&quot;Pearson cor = &quot;,round(text,2)),vjust=2,hjust=-.15,cex=4,col='black')


#save some files we might need later 
write.csv(datmeth,file=&quot;HZ_GLMM_Input_5x.csv&quot;,row.names=FALSE)
write.csv(master_meth,file=&quot;HZ_FULL_5x.csv&quot;,row.names=FALSE)

#now we can start here 
datmeth &lt;- read.csv(&quot;HZ_GLMM_Input_5x.csv&quot;,header=TRUE)
head(datmeth)
nrow(datmeth)/24
#set these as factor variables 
datmeth$Hybrid_Index &lt;- as.numeric(datmeth$Hybrid_Index)
datmeth$Year &lt;- as.factor(datmeth$Year)
datmeth$Locality &lt;- as.factor(datmeth$Locality)
datmeth$ID &lt;- as.factor(datmeth$ID)
datmeth$Classification &lt;- as.factor(datmeth$Classification)

#and scale the continuous variables
datmeth &lt;- datmeth %&gt;% mutate_at(c('Hybrid_Index', 'Distance'), ~(scale(.) %&gt;% as.vector))

##### MODEL #####
DMA_GLMM_pValues &lt;- NULL
DMA_GLMM_Estimates &lt;- NULL
DMA_GLMM_RandomEffect_Var &lt;- NULL
DMA_GLMM_SEs &lt;- NULL
DMA_GLMM_DispersionStat &lt;- NULL
DMA_GLMM_Singular &lt;- NULL

for (i in seq(1, nrow(datmeth), by = 24)) {
  tryCatch({
    cat('\n Running model for CpG site: ',((i-1)/24))
    # model each site
    CpGsite &lt;- datmeth[i:(i + 23), ]
    # run the model examining relationship between hybrid index and locality 
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Hybrid_Index + (1|Year) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+08)))
    DMA_GLMM_Singularf &lt;- isSingular(glmm_CpG)
    sum_mod &lt;- summary(glmm_CpG)
    
    ## For random effect 
    GLMM_RandomEffect_Var &lt;- as.data.frame(VarCorr(glmm_CpG))$sdcor
    
    # calculate dispersion statistic (following AF Zuur, JM Hilbe
    # &amp; EN Ieno. A beginner’s guide to GLM and GLMM with R - a
    # frequentist and Bayesian perspective for
    # ecologists(Highland Statistics Ltd., 2013).)
    E1 &lt;- residuals(glmm_CpG)
    # number of parameters: fixed effects + 1 random effect
    p1 &lt;- length(fixef(glmm_CpG)) + 1
    GLMM_DispersionStat &lt;- sum(E1^2)/(nrow(CpGsite) - p1)
    # format estimates to add estimates for each loop to
    # estimates from previous loops
    
    GLMM_pValues_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Hybrid_Index = sum_mod$coefficients[2,4])
    GLMM_SEs_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Hybrid_Index = sum_mod$coefficients[2,2])
    GLMM_Estimates_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Hybrid_Index = sum_mod$coefficients[2,1])
    GLMM_DispersionStat_f &lt;- data.frame(site = as.character(CpGsite[1,1]), DispStat = GLMM_DispersionStat)
    GLMM_RandomEffect_Var_f &lt;- data.frame(site = as.character(CpGsite[1,1]), ID = GLMM_RandomEffect_Var[1])
    # add estimates for each loop to estimates from previous
    # loops
    DMA_GLMM_pValues &lt;- rbind(DMA_GLMM_pValues, GLMM_pValues_f)
    DMA_GLMM_Estimates &lt;- rbind(DMA_GLMM_Estimates, GLMM_Estimates_f)
    DMA_GLMM_SEs &lt;- rbind(DMA_GLMM_SEs, GLMM_SEs_f)
    DMA_GLMM_RandomEffect_Var &lt;- rbind(DMA_GLMM_RandomEffect_Var,GLMM_RandomEffect_Var_f)
    DMA_GLMM_DispersionStat &lt;- rbind(DMA_GLMM_DispersionStat,GLMM_DispersionStat_f)
    DMA_GLMM_Singular &lt;- rbind(DMA_GLMM_Singular,DMA_GLMM_Singularf)
    
    #Save errors to this output
  }, error=function(e){cat(unique(CpGsite[,1]), &quot;\n&quot;)
  }
  )
}

# 3. Save loop results
save(DMA_GLMM_pValues, DMA_GLMM_Estimates, DMA_GLMM_SEs, 
     DMA_GLMM_DispersionStat, DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular, file = &quot;HZ_DMA_CrowResults_5x.RData&quot;)

#should be the samem otherwise we have models that didn't converge 
nrow(DMA_GLMM_pValues)
nrow(datmeth)/24
</pre>
=== Volcanos ===

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(LICORS)
library(RColorBrewer)
library(viridis)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/HZ/dplyr/&quot;)

load(&quot;HZ_DMA_CrowResults_5x.RData&quot;)

#check out some of the data
head(DMA_GLMM_Estimates)
dim(DMA_GLMM_Estimates)
head(DMA_GLMM_pValues)
head(DMA_GLMM_SEs)


#let's check out the distributio of 5mC contrasts
multi.hist(DMA_GLMM_Estimates[,2:2],nrow=NULL,ncol=NULL,breaks=21)

#plot dispersion boxplot, we will exclude any sites outside the 99% interval
disp_limits &lt;- hdi(DMA_GLMM_DispersionStat$DispStat,credMass = 0.99)
disp_limits

#lower       upper 
#0.002117176 0.459554568

jpeg(&quot;plots/HZ_dispersion_plot.jpg&quot;,units=&quot;in&quot;,res=300, height=6, width=5)
theme_set(theme_classic(base_size = 16))
dplot &lt;- ggplot(DMA_GLMM_DispersionStat,aes(y=DispStat,x=0))+geom_violin()+theme_classic(base_size = 16)+
  geom_jitter(width=0.1)+
  geom_text(aes(y = (disp_limits[2]+0.05),x=0.2, label = &quot;Upper Limit&quot;))+
  geom_hline(yintercept = disp_limits[2],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  geom_text(aes(y = (disp_limits[1]+0.05),x=0.2, label = &quot;Lower Limit&quot;))+
  geom_hline(yintercept = disp_limits[1],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  xlab(&quot;&quot;)+ylab(&quot;Dispersion Statistic&quot;)+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
grid.arrange(dplot)
dev.off()

#subset bad sites
bad_sites &lt;- subset(DMA_GLMM_DispersionStat,DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2])
nrow(bad_sites)

# calculate 10% differences, now we care about direction so we re-do this, since before it was absolute value 
meth &lt;- read.csv(&quot;HZ_FULL_5x.csv&quot;,header=TRUE)
dim(meth)
head(meth)

names(DMA_GLMM_pValues) &lt;- c('site','pHI')
names(DMA_GLMM_Estimates) &lt;- c('site','eHI')
names(DMA_GLMM_SEs) &lt;- c('site','sHI')
DMA_RF_S &lt;- cbind(DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular)
names(DMA_RF_S) &lt;- c('site','RandomEffect','IsSingular')
master_meth1 &lt;- merge(meth, DMA_GLMM_pValues, by='site')
master_meth2 &lt;- merge(master_meth1, DMA_GLMM_Estimates, by='site')
master_meth3 &lt;- merge(master_meth2, DMA_GLMM_SEs, by='site')
master_meth4 &lt;- merge(master_meth3, DMA_GLMM_DispersionStat, by='site')
master_meth &lt;- merge(master_meth4, DMA_RF_S, by='site')
head(master_meth)
nrow(master_meth)

#### Volcano with bonferonni
pthresh &lt;- (0.05/nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse((pHI &lt; pthresh &amp; abs(species_H.C) &gt; 0.05) , &quot;SPECIES&quot;,&quot;UNKNOWN&quot;))

master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

### With FDR, first select sites that are significant for each variable, but non-significant for the other variables 
pval &lt;- 0.05
master_meth$fHI &lt;- p.adjust(master_meth$pHI,method='BH',n=nrow(master_meth))

master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse((fHI &lt; pval &amp; abs(species_H.C) &gt; 0.05) , &quot;SPECIES&quot;,&quot;UNKNOWN&quot;))

#remove overdispersed sites 
master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)


#save for manhattan
write.csv(master_meth,file='HZ_Manhattan_5x_bonferonni.csv')

#hunt for colors
display.brewer.all(colorblindFriendly=TRUE) 
cols &lt;- brewer.pal(5,'Paired')
#cols &lt;- viridis(7)
shapes &lt;- c(16,1)

#plot SPECIES
p1 &lt;- ggplot(master_meth, aes(x=species_H.C, y=threshold(-log10(pHI),max=quantile(-log10(pHI),0.99))))+
  geom_point(aes(colour = DMR,shape=DMR), size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SPECIES&quot;=cols[3]))+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  ggtitle(&quot;Species&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(0.05),lwd=1,lty=2,col=&quot;maroon&quot;)+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ylab('-log10(P)')
p1

#save it 
jpeg(&quot;plots/HZ_DMA_Volcano_5x_bonferonni.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(p1,nrow=1)
dev.off()

#save file
write.csv(master_meth,file='HZ_DMA_DMRS_5x_bonferonni.csv',row.names=FALSE)</pre>
== WGBS 5x ==

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/WGBS/dplyr/&quot;)

#import all the data and average by 250BP
tab &lt;- read.table('D_Ko_C31_BL_ADL_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C31_BL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C31_BL_M) &lt;- c('site','chr','start','end','numCs1','numTs1','Sites1');C31_BL_M$C31_BL_M &lt;- (C31_BL_M$numCs1/(C31_BL_M$numCs1+C31_BL_M$numTs1))
tab &lt;- read.table('D_Ko_C45_BL_ADL_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);C45_BL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(C45_BL_F) &lt;- c('site','chr','start','end','numCs2','numTs2','Sites2');C45_BL_F$C45_BL_F &lt;- (C45_BL_F$numCs2/(C45_BL_F$numCs2+C45_BL_F$numTs2))
tab &lt;- read.table('S_Up_H59_BL_ADL_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_BL_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_BL_M) &lt;- c('site','chr','start','end','numCs3','numTs3','Sites3');H59_BL_M$H59_BL_M &lt;- (H59_BL_M$numCs3/(H59_BL_M$numCs3+H59_BL_M$numTs3))
tab &lt;- read.table('S_Up_H59_M_ADL_M.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H59_M_M &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H59_M_M) &lt;- c('site','chr','start','end','numCs4','numTs4','Sites4');H59_M_M$H59_M_M &lt;- (H59_M_M$numCs4/(H59_M_M$numCs4+H59_M_M$numTs4))
tab &lt;- read.table('S_Up_H60_BL_ADL_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_BL_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_BL_F) &lt;- c('site','chr','start','end','numCs5','numTs5','Sites5');H60_BL_F$H60_BL_F &lt;- (H60_BL_F$numCs5/(H60_BL_F$numCs5+H60_BL_F$numTs5))
tab &lt;- read.table('S_Up_H60_M_ADL_F.250BP.bed',header=FALSE);  tab &lt;- subset(tab, (V5 + V6) &gt; 5); tab1 &lt;- tab %&gt;% group_by(V7) %&gt;% mutate(numCs = sum(V5), numTs = sum(V6), Sites = n()); tab2 &lt;- as.data.frame(tab1[!duplicated(tab1[ , c('V7')]),]);H60_M_F &lt;- tab2[,c(7,1,2,3,8,9,10)]; names(H60_M_F) &lt;- c('site','chr','start','end','numCs6','numTs6','Sites6');H60_M_F$H60_M_F &lt;- (H60_M_F$numCs6/(H60_M_F$numCs6+H60_M_F$numTs6))

head(C31_BL_M)

master &lt;- Reduce(function(x,y) merge(x = x, y = y, by=c('site','chr','start','end')),
                 list(C31_BL_M,C45_BL_F,H59_BL_M,H59_M_M,H60_BL_F,H60_M_F))
head(master)

#calculate coverage and CpGs
cov &lt;- master %&gt;% mutate(minsite1 = ifelse(Sites1 &lt; 3, NA, Sites1),
                         minsite2 = ifelse(Sites2 &lt; 3, NA, Sites2),
                         minsite3 = ifelse(Sites3 &lt; 3, NA, Sites3),
                         minsite4 = ifelse(Sites4 &lt; 3, NA, Sites4),
                         minsite5 = ifelse(Sites5 &lt; 3, NA, Sites5),
                         minsite6 = ifelse(Sites6 &lt; 3, NA, Sites6))



#count NAs
colSums(is.na(cov))

#filter according to missingness
sitedat &lt;- cov[rowSums(is.na(cov[grepl('^minsite', names(cov))])) == 0, ]
nrow(sitedat)

master &lt;- sitedat

#define groups
master$MALE &lt;- rowMeans(master[grepl('_M$', names(master))],na.rm=TRUE) #M=1
master$FEMALE &lt;- rowMeans(master[grepl('_F$', names(master))],na.rm=TRUE) #F=0
master$BLOOD &lt;- rowMeans(master[grepl('_BL_', names(master))],na.rm=TRUE) #BL=0
master$SPLEEN &lt;- rowMeans(master[grepl('_M_', names(master))],na.rm=TRUE) #M=1
master$HOODED &lt;- rowMeans(master[grepl('^H', names(master))],na.rm=TRUE) #H=0
master$CARRION &lt;- rowMeans(master[grepl('^C', names(master))],na.rm=TRUE) #C=1
compare &lt;- master[,c(1,(ncol(master)-4-1):ncol(master))]
head(compare)
#now we must do pairwise comparisons between our 3 treatments for % 5mC
compare[8] &lt;- compare[2]-compare[3]
compare[9] &lt;- compare[4]-compare[5]
compare[10] &lt;- compare[6]-compare[7]
head(compare)
win_diff &lt;- compare[,c(8,9,10)]

#merge the total percent diff with the original frame
master_meth &lt;- cbind(master,win_diff)
colnames(master_meth)[colnames(master_meth) == 'MALE.1'] &lt;- 'sex_M.F'
colnames(master_meth)[colnames(master_meth) == 'BLOOD.1'] &lt;- 'tissue_BL.M'
colnames(master_meth)[colnames(master_meth) == 'HOODED.1'] &lt;- 'species_H.C'
nrow(master_meth)
names(master_meth)

#now subset for GLMM # C=1 H=0 / M=1 F=0 / BL=0 M=1
IND1 &lt;- as.data.frame(c(master_meth[1],&quot;C31&quot;,master_meth[5], master_meth[6],&quot;1&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND2 &lt;- as.data.frame(c(master_meth[1],&quot;C45&quot;,master_meth[9], master_meth[10],&quot;1&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND3 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[13], master_meth[14],&quot;0&quot;,&quot;1&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND4 &lt;- as.data.frame(c(master_meth[1],&quot;H59&quot;,master_meth[17], master_meth[18],&quot;0&quot;,&quot;1&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND5 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[21], master_meth[22],&quot;0&quot;,&quot;0&quot;,&quot;0&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))
IND6 &lt;- as.data.frame(c(master_meth[1],&quot;H60&quot;,master_meth[25], master_meth[26],&quot;0&quot;,&quot;0&quot;,&quot;1&quot;),col.names=c(&quot;CGI&quot;,&quot;ID&quot;,&quot;MethCounts&quot;,&quot;UnMethCounts&quot;,&quot;Species&quot;,&quot;Sex&quot;,&quot;Tissue&quot;))

head(IND4)
head(IND1)

#Bind them all together and order it by window
datmeth &lt;- rbind(IND1,IND2,IND3,IND4,IND5,IND6)
datmeth &lt;- datmeth[order(datmeth$CGI),]

head(datmeth)

#sanity check 
nrow(datmeth)/6

#save some files we might need later 
write.csv(datmeth,file=&quot;WGBS_GLMM_Input_5x.csv&quot;,row.names=FALSE)
write.csv(master_meth,file=&quot;WGBS_FULL_5x.csv&quot;,row.names=FALSE)

#now we can start here 
datmeth &lt;- read.csv(&quot;WGBS_GLMM_Input_5x.csv&quot;,header=TRUE)
head(datmeth)
#set these as factor variables 
datmeth$Species &lt;- as.factor(datmeth$Species)
datmeth$Tissue &lt;- as.factor(datmeth$Tissue)
datmeth$Sex &lt;- as.factor(datmeth$Sex)
datmeth$ID &lt;- as.factor(datmeth$ID)

##### MODEL #####
DMA_GLMM_pValues &lt;- NULL
DMA_GLMM_Estimates &lt;- NULL
DMA_GLMM_SEs &lt;- NULL
DMA_GLMM_RandomEffect_Var &lt;- NULL
DMA_GLMM_DispersionStat &lt;- NULL
DMA_GLMM_Singular &lt;- NULL

for (i in seq(1, nrow(datmeth), by = 6)) {
  tryCatch({
    cat('\n Running model for CpG site: ',((i-1)/6))
    # model each site
    CpGsite &lt;- datmeth[i:(i + 5), ]
    # run the model and get the contrasts between sex, stage, species
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Sex + Tissue + Species + (1|ID) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+09)))
    DMA_GLMM_Singularf &lt;- isSingular(glmm_CpG)
    sum_mod &lt;- summary(glmm_CpG)
    
    ## 1 random effects ( (1 | ID) )
    GLMM_RandomEffect_Var &lt;- as.data.frame(VarCorr(glmm_CpG))$sdcor
    
    # calculate dispersion statistic (following AF Zuur, JM Hilbe
    # &amp; EN Ieno. A beginner’s guide to GLM and GLMM with R - a
    # frequentist and Bayesian perspective for
    # ecologists(Highland Statistics Ltd., 2013).)
    E1 &lt;- residuals(glmm_CpG)
    # number of parameters: fixed effects + 1 random effect
    p1 &lt;- length(fixef(glmm_CpG)) + 1
    GLMM_DispersionStat &lt;- sum(E1^2)/(nrow(CpGsite) - p1)
    # format estimates to add estimates for each loop to
    # estimates from previous loops
    
    # TO GET THE COLUMN HEADERS WITH THE CONTRASTS, check the excel file. First I look at the glmm_CpG_contrast object, which lists the models in order of 1-8, for this comparison. From here, make the 28 pairwise comparison charts, and substitute the 0 and 1 with your variables
    GLMM_Estimates_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,1], Tissue1 = sum_mod$coefficients[3,1], Species1 = sum_mod$coefficients[4,1])
    GLMM_SEs_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,2], Tissue1 = sum_mod$coefficients[3,2], Species1 = sum_mod$coefficients[4,2])
    GLMM_pValues_f &lt;- data.frame(site = as.character(CpGsite[1,1]),Sex1 = sum_mod$coefficients[2,4], Tissue1 = sum_mod$coefficients[3,4], Species1 = sum_mod$coefficients[4,4])
    GLMM_RandomEffect_Var_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                      1]), ID = GLMM_RandomEffect_Var[1])
    GLMM_DispersionStat_f &lt;- data.frame(site = as.character(CpGsite[1,
                                                                    1]), DispStat = GLMM_DispersionStat)
    # add estimates for each loop to estimates from previous
    # loops
    DMA_GLMM_pValues &lt;- rbind(DMA_GLMM_pValues, GLMM_pValues_f)
    DMA_GLMM_Estimates &lt;- rbind(DMA_GLMM_Estimates, GLMM_Estimates_f)
    DMA_GLMM_SEs &lt;- rbind(DMA_GLMM_SEs, GLMM_SEs_f)
    DMA_GLMM_RandomEffect_Var &lt;- rbind(DMA_GLMM_RandomEffect_Var,GLMM_RandomEffect_Var_f)
    DMA_GLMM_DispersionStat &lt;- rbind(DMA_GLMM_DispersionStat,GLMM_DispersionStat_f)
    DMA_GLMM_Singular &lt;- rbind(DMA_GLMM_Singular,DMA_GLMM_Singularf)
    
    #Save errors to this output
  }, error=function(e){cat(unique(CpGsite[,1]), &quot;\n&quot;)
  }
  )
}

# 3. Save loop results
save(DMA_GLMM_pValues, DMA_GLMM_Estimates, DMA_GLMM_SEs, DMA_GLMM_RandomEffect_Var,
     DMA_GLMM_DispersionStat, DMA_GLMM_Singular, file = &quot;WGBS_DMA_CrowResults_5x.RData&quot;)

hist(DMA_GLMM_pValues$Species1)
table(DMA_GLMM_Singular)['FALSE']

#should be the samem otherwise we have models that didn't converge 
nrow(DMA_GLMM_pValues)
nrow(datmeth)/6 
</pre>
=== Volcanos ===

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(matrixStats)
library(LICORS)
library(viridis)
library(RColorBrewer)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/250BP/WGBS/dplyr&quot;)

load(&quot;WGBS_DMA_CrowResults_5x.RData&quot;)

#check out some of the data
head(DMA_GLMM_Estimates)
dim(DMA_GLMM_Estimates)
head(DMA_GLMM_pValues)
head(DMA_GLMM_SEs)


#let's check out the distributio of 5mC contrasts
multi.hist(DMA_GLMM_Estimates[,2:4],nrow=1,ncol=NULL,breaks=21)

#plot dispersion boxplot, we will exclude any sites outside the 99% interval
disp_limits &lt;- hdi(DMA_GLMM_DispersionStat$DispStat,credMass = 0.99)
disp_limits

#lower        upper 
#4.228215e-02 3.381379e+03 

jpeg(&quot;plots/WGBS_dispersion_plot.jpg&quot;,units=&quot;in&quot;,res=300, height=6, width=5)
theme_set(theme_classic(base_size = 16))
dplot &lt;- ggplot(DMA_GLMM_DispersionStat,aes(y=DispStat,x=0))+geom_violin()+theme_classic(base_size = 16)+
  geom_jitter(width=0.1)+
  geom_text(aes(y = (disp_limits[2]+0.05),x=0.2, label = &quot;Upper Limit&quot;))+
  geom_hline(yintercept = disp_limits[2],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  geom_text(aes(y = (disp_limits[1]+0.05),x=0.2, label = &quot;Lower Limit&quot;))+
  geom_hline(yintercept = disp_limits[1],linetype=&quot;dashed&quot;,col=&quot;red&quot;) +
  xlab(&quot;&quot;)+ylab(&quot;Dispersion Statistic&quot;)+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())
grid.arrange(dplot)
dev.off()

#subset bad sites
bad_sites &lt;- subset(DMA_GLMM_DispersionStat,DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2])
nrow(bad_sites)

# calculate 10% differences, now we care about direction so we re-do this, since before it was absolute value 
meth &lt;- read.csv(&quot;WGBS_FULL_5x.csv&quot;,header=TRUE)
head(meth)

names(DMA_GLMM_pValues) &lt;- c('site','pSex','pTissue','pSpecies')
names(DMA_GLMM_Estimates) &lt;- c('site','eSex','eTissue','eSpecies')
names(DMA_GLMM_SEs) &lt;- c('site','sSex','sTissue','sSpecies')
DMA_RF_S &lt;- cbind(DMA_GLMM_RandomEffect_Var,DMA_GLMM_Singular)
names(DMA_RF_S) &lt;- c('site','RandomEffect','IsSingular')
master_meth1 &lt;- merge(meth, DMA_GLMM_pValues, by='site')
master_meth2 &lt;- merge(master_meth1, DMA_GLMM_Estimates, by='site')
master_meth3 &lt;- merge(master_meth2, DMA_GLMM_SEs, by='site')
master_meth4 &lt;- merge(master_meth3, DMA_RF_S, by='site')
master_meth &lt;- merge(master_meth4, DMA_GLMM_DispersionStat, by='site')
head(master_meth)
nrow(master_meth)

#### Volcano with bonferonni
pthresh &lt;- (0.05/nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(pSex &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; pSpecies &gt; pthresh &amp; pTissue &gt; pthresh, &quot;SEX&quot;, 
                                                   ifelse(pSpecies &lt; pthresh &amp; abs(species_H.C) &gt; 0.05 &amp; pSex &gt; pthresh &amp; pTissue &gt; pthresh,&quot;SPECIES&quot;,
                                                          ifelse(pTissue &lt; pthresh &amp; abs(tissue_BL.M) &gt; 0.05 &amp; pSex &gt; pthresh &amp; pSpecies &gt; pthresh ,&quot;TISSUE&quot;,
                                                                 ifelse(pSex &lt; pthresh &amp; pSpecies &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp; pTissue &gt; pthresh ,&quot;SEX_SPECIES&quot;, 
                                                                        ifelse(pSex &lt; pthresh &amp; pTissue &lt; pthresh &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(tissue_BL.M) &gt; 0.05 &amp;  pSex &gt; pthresh ,&quot;SEX_TISSUE&quot;,
                                                                               ifelse(pSpecies &lt; pthresh &amp; pTissue &lt; pthresh &amp; abs(tissue_BL.M) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp;  pSex &gt; pthresh ,&quot;SPECIES_TISSUE&quot;,
                                                                                      ifelse(pSpecies &lt; pthresh &amp; pTissue &lt; pthresh &amp;  pSex &lt; pthresh &amp;
                                                                                               abs(tissue_BL.M) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp; abs(sex_M.F) &gt; 0.05,&quot;ALL&quot;,&quot;UNKNOWN&quot;))))))))


master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

### Or with FDR
pval &lt;- 0.05
master_meth$fSex &lt;- p.adjust(master_meth$pSex,method='BH',n=nrow(master_meth))
master_meth$fTissue &lt;- p.adjust(master_meth$pTissue,method='BH',n=nrow(master_meth))
master_meth$fSpecies &lt;- p.adjust(master_meth$pSpecies,method='BH',n=nrow(master_meth))
master_meth &lt;- master_meth %&gt;% mutate(OD = ifelse(DispStat &lt; disp_limits[1] | DispStat &gt; disp_limits[2], &quot;OVERDISPERSED&quot;,&quot;OKAY&quot;),
                                      SING = ifelse(IsSingular == FALSE, &quot;OKAY&quot;,&quot;SINGULAR&quot;),
                                      DMR = ifelse(fSex &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; fSpecies &gt; pval &amp; fTissue &gt; pval, &quot;SEX&quot;, 
                                                   ifelse(fSpecies &lt; pval &amp; abs(species_H.C) &gt; 0.05 &amp; fSex &gt; pval &amp; fTissue &gt; pval,&quot;SPECIES&quot;,
                                                          ifelse(fTissue &lt; pval &amp; abs(tissue_BL.M) &gt; 0.05 &amp; fSex &gt; pval &amp; fSpecies &gt; pval ,&quot;TISSUE&quot;,
                                                                 ifelse(fSex &lt; pval &amp; fSpecies &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp; fTissue &gt; pval ,&quot;SEX_SPECIES&quot;, 
                                                                        ifelse(fSex &lt; pval &amp; fTissue &lt; pval &amp; abs(sex_M.F) &gt; 0.05 &amp; abs(tissue_BL.M) &gt; 0.05 &amp;  fSex &gt; pval ,&quot;SEX_TISSUE&quot;,
                                                                               ifelse(fSpecies &lt; pval &amp; fTissue &lt; pval &amp; abs(tissue_BL.M) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp;  fSex &gt; pval ,&quot;SPECIES_TISSUE&quot;,
                                                                                      ifelse(fSpecies &lt; pval &amp; fTissue &lt; pval &amp;  fSex &lt; pval &amp;
                                                                                               abs(tissue_BL.M) &gt; 0.05 &amp; abs(species_H.C) &gt; 0.05 &amp; abs(sex_M.F) &gt; 0.05,&quot;ALL&quot;,&quot;UNKNOWN&quot;))))))))

master_meth %&gt;% dplyr::count(OD)
master_meth %&gt;% dplyr::count(SING)
master_meth &lt;- subset(master_meth, OD == 'OKAY')
master_meth %&gt;% dplyr::count(DMR)

#save for manhattan
write.csv(master_meth,file='WGBS_Manhattan_5x_bonferonni.csv')

#hunt for colors
#display.brewer.all(colorblindFriendly=TRUE) 
cols &lt;- brewer.pal(8,'Set2')
#cols &lt;- inferno(5)
shapes &lt;- c(15,16,17,18,16,16,1)

#plot sex
p1 &lt;- ggplot(master_meth, aes(x=sex_M.F,y=threshold(-log10(pSex),max=quantile(-log10(pSex),0.9999)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;TISSUE&quot;=cols[2],&quot;SEX_TISSUE&quot;=cols[6],&quot;SPECIES_TISSUE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Sex&quot;)+
  ylab('-log10(p)')
p1

#plot species
p2 &lt;- ggplot(master_meth, aes(x=species_H.C,y=threshold(-log10(pSpecies),max=quantile(-log10(pSpecies),0.9999)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;TISSUE&quot;=cols[2],&quot;SEX_TISSUE&quot;=cols[6],&quot;SPECIES_TISSUE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Species&quot;)+
  ylab('-log10(p)')
p2

#plot tissue
p3 &lt;- ggplot(master_meth, aes(x=tissue_BL.M,y=threshold(-log10(pTissue),max=quantile(-log10(pTissue),0.9999)))) +
  geom_point(aes(colour = DMR,pch= DMR),size=4,show.legend = FALSE) +
  scale_colour_manual(values = c(&quot;UNKNOWN&quot;= &quot;black&quot;,&quot;SEX&quot;=cols[5],&quot;SPECIES&quot;=cols[3],&quot;SEX_SPECIES&quot;=cols[4], &quot;TISSUE&quot;=cols[2],&quot;SEX_TISSUE&quot;=cols[6],&quot;SPECIES_TISSUE&quot;=cols[7],&quot;ALL&quot;=cols[8]))+  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  theme_classic(base_size = 16)+xlab(&quot;5mC % Difference&quot;)+
  scale_shape_manual(values=shapes)+
  geom_hline(yintercept=-log10(pthresh),col=&quot;maroon&quot;,lwd=1.5,lty='dashed')+
  geom_vline(xintercept=c(-0.05,0.05),lwd=1.5,col=&quot;black&quot;)+
  ggtitle(&quot;Tissue&quot;)+
  ylab('-log10(p)')
p3


#save it 
jpeg(&quot;plots/WGBS_DMA_Volcano_5x_bonferonni.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=12)
theme_set(theme_classic(base_size = 16))
grid.arrange(p1,p2,p3,nrow=1)
dev.off()

#save file
write.csv(master_meth,file='WGBS_DMA_DMRS_5x_bonferonni.csv',row.names=FALSE)</pre>
== Ultimate Overlap ==

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)
library(maditr)
library(viridis)

#import truth set DMRs
truth_dmr_CG &lt;- read.csv('CG_DMA_DMRs_5x_FDR.csv',header=TRUE)
head(truth_dmr_CG)

truth_dmr_WGBS &lt;- read.csv('WGBS_DMA_DMRs_5x_FDR.csv',header=TRUE)
head(truth_dmr_WGBS)

truth &lt;- merge(truth_dmr_WGBS,truth_dmr_CG,by='site',all=TRUE)

hz &lt;- read.csv('HZ_DMA_DMRs_5x_FDR.csv',header=TRUE)

dmr_min &lt;- merge(hz,truth,by='site')
dmr_min$DMR.x &lt;- str_replace_na(dmr_min$DMR.x, replacement = &quot;MISSING&quot;)
dmr_min$DMR.y &lt;- str_replace_na(dmr_min$DMR.y, replacement = &quot;MISSING&quot;)

### try full dataset overlap overlap 
dmr_min %&gt;% dplyr::count(DMR,DMR.x,DMR.y)
dmr_min &lt;- dmr_min %&gt;% mutate(Overlap = ifelse(DMR == &quot;SPECIES&quot; &amp; (DMR.x == &quot;MISSING&quot; | DMR.x == &quot;UNKNOWN&quot;) &amp;
                              (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SPECIES&quot; | DMR.y == &quot;SPECIES_STAGE&quot; | DMR.y == &quot;ALL&quot; ) , &quot;SPECIES&quot;,
                              ifelse(DMR == &quot;SPECIES&quot; &amp; (DMR.y == &quot;MISSING&quot; | DMR.y == &quot;UNKNOWN&quot;) &amp;
                                       (DMR.x == &quot;SEX_SPECIES&quot; | DMR.x == &quot;SPECIES&quot; | DMR.x == &quot;SPECIES_TISSUE&quot; | DMR.x == &quot;ALL&quot; ) , &quot;SPECIES&quot;,
                                     ifelse(DMR == &quot;UNKNOWN&quot; &amp; (DMR.y == &quot;MISSING&quot; | DMR.y == &quot;UNKNOWN&quot;) &amp;
                                              (DMR.x == &quot;SEX_SPECIES&quot; | DMR.x == &quot;SEX&quot; | DMR.x == &quot;ALL&quot; ) , &quot;SEX&quot;,
                                            ifelse(DMR == &quot;UNKNOWN&quot; &amp; (DMR.x == &quot;MISSING&quot; | DMR.x == &quot;UNKNOWN&quot;) &amp;
                                                     (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SEX&quot; | DMR.y == &quot;ALL&quot; ) , &quot;SEX&quot;,
                                               ifelse(DMR == &quot;UNKNOWN&quot; &amp; 
                                                        (DMR.y == &quot;SPECIES_STAGE&quot; | DMR.y == &quot;STAGE&quot;) &amp; 
                                                        (DMR.x == &quot;UNKNOWN&quot;) , &quot;STAGE&quot;,
                                                      ifelse(DMR == &quot;UNKNOWN&quot; &amp; 
                                                               (DMR.y == &quot;UNKNOWN&quot;) &amp; 
                                                               (DMR.x == &quot;TISSUE&quot; | DMR.x == &quot;SPECIES_TISSUE&quot;) , &quot;TISSUE&quot;,
                                                             ifelse(DMR == &quot;UNKNOWN&quot; &amp; 
                                                                      (DMR.y == &quot;UNKNOWN&quot;) &amp; 
                                                                      (DMR.x == &quot;UNKNOWN&quot;) , &quot;UNKNOWN&quot;,&quot;UNCLASSIFIED&quot;))))))))

dmr_min %&gt;% dplyr::count(Overlap)

dmr_min &lt;- dmr_min[!grepl('UNCLASSIFIED',dmr_min$Overlap),]
nrow(dmr_min)
dmr_min %&gt;% dplyr::count(Overlap)
#bootstraps
nboots &lt;- 100
HZ_species &lt;- NULL
HZ_sex &lt;- NULL
HZ_tissue &lt;- NULL
HZ_stage &lt;- NULL
HZ_other &lt;- NULL
HZ_pval &lt;- NULL
HZ_means &lt;- NULL
HZ_noint &lt;- NULL

counter = 0

for (j in seq(1, nboots)) {
  cat('\n Running iteration: ',counter,'\n')
  #obtain stratified sample
  counter=counter+1
  strat_sample &lt;- dmr_min %&gt;%
    group_by(Overlap) %&gt;%
    sample_n(size=4,replace=FALSE)
  
  #re-form model 
  datmeth &lt;- read.csv(&quot;HZ_GLMM_Input_5x.csv&quot;,header=TRUE)
  datmeth$site &lt;- datmeth$CGI
  head(datmeth)
  nrow(datmeth)/24
  
  parents &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up')
  hybrids &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up',negate=TRUE)
  hyb3 &lt;- sample(hybrids,3,replace=FALSE)
  full &lt;- c(parents,hyb3)
  
  #only keep windows identified
  mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                      .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(strat_sample$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))
  
  mod_input2 &lt;- mod_input1[grepl(paste0(full,collapse=&quot;$|^&quot;),mod_input1$ID),]
  #keep levels 
  hzmrg &lt;- strat_sample[grepl('^site|Overlap',names(strat_sample))]
  mod_input &lt;- merge(mod_input2,hzmrg)
  nrow(mod_input)/9
  datmeth &lt;- mod_input
  
  #set these as factor variables 
  datmeth$Classification &lt;- as.factor(datmeth$Classification)
  datmeth$Locality &lt;- as.factor(datmeth$Locality)
  datmeth$Year &lt;- as.factor(datmeth$Year)
  datmeth$ID &lt;- as.factor(datmeth$ID)
  
  #and scale the continuous variables
  datmeth &lt;- datmeth %&gt;% mutate_at(c('Hybrid_Index'), ~(scale(.) %&gt;% as.vector))
  
  plotDat &lt;- NULL 
  tryCatch({
    for (i in seq(1, nrow(datmeth), by = 9)) {
      
      CpGsite &lt;- datmeth[i:(i + 8), ]
      
      glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                          Classification + (1 | Year) ,data = CpGsite, family = &quot;binomial&quot;,
                        control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                               optCtrl = list(maxfun = 2e+08)))
      dats &lt;- emmip(glmm_CpG, ~ Classification , type = &quot;response&quot;, CIs = TRUE,plotit=FALSE) 
      site &lt;- CpGsite[1:3,1]
      level &lt;- CpGsite[1:3,11]
      group &lt;- dats[1]
      mean &lt;- dats[2]
      se &lt;- dats[3]
      loops &lt;- cbind(site,level,group,mean,se)
      plotDat &lt;- rbind(plotDat,loops)
      
    }
    
    plotDat
    plotDat_LongSE &lt;- dcast(plotDat, site ~ Classification, value.var = 'SE')
    plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Classification, value.var = 'yvar')
    names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
    plotDat_LongMEAN$ParentalMidPoint &lt;- ((plotDat_LongMEAN$Cornix + plotDat_LongMEAN$Corone)/2)
    plotDat_LongMEAN$HybDistance &lt;- (plotDat_LongMEAN$Hybrid - plotDat_LongMEAN$ParentalMidPoint)
    
    #add simple intermediacy factor 
    plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                            Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
    hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate','HybDistance')]
    for_tab &lt;- merge(hyb_level,plotDat,by='site')
    k_tab &lt;- unique(for_tab[,c('site','Intermediate','level','HybDistance')])
    
    #calculate distance between hybrids and the parental midpoint 
    hyb_means &lt;- as.data.frame(k_tab %&gt;% group_by(level) %&gt;% dplyr::summarize(Mean = mean(HybDistance)))
    hyb_means$ITERATION &lt;- counter
    
    #test significant differences in counts, if there are no intermediate events, this will add a column of zeroes
    con1 &lt;- table(k_tab$level,k_tab$Intermediate)
    con1
    
    tryCatch({
      res &lt;- fisher.test(con1)
      con2 &lt;- table(k_tab$level,k_tab$HybDistance)
      con2
      
      spec &lt;-  data.frame(ITERATION = counter, LEVEL = 'SPECIES',INTERMEDIATE = con1[2,1], MIXED = con1[2,2])
      stag &lt;-  data.frame(ITERATION = counter, LEVEL = 'STAGE',INTERMEDIATE = con1[3,1], MIXED = con1[3,2])
      tiss &lt;-  data.frame(ITERATION = counter, LEVEL = 'TISSUE',INTERMEDIATE = con1[4,1], MIXED = con1[4,2])
      sexx &lt;-  data.frame(ITERATION = counter, LEVEL = 'SEX',INTERMEDIATE = con1[1,1], MIXED = con1[1,2])
      other &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNKNOWN',INTERMEDIATE = con1[5,1], MIXED = con1[5,2])
      pvals &lt;-  data.frame(pvalue = res$p.value)
      
      
      #bind loops
      HZ_species &lt;- rbind(HZ_species, spec)
      HZ_stage &lt;- rbind(HZ_stage, stag)
      HZ_sex &lt;- rbind(HZ_sex, sexx)
      HZ_tissue &lt;- rbind(HZ_tissue, tiss)
      HZ_other &lt;- rbind(HZ_other, other)
      HZ_pval &lt;- rbind(HZ_pval,pvals)
      HZ_means &lt;- rbind(HZ_means,hyb_means)
      
    }, error=function(e){HZ_noint &lt;- rbind(HZ_noint,counter);cat(counter,&quot;BAD \n&quot;)})
    
  }, error=function(e){cat(counter,&quot;: FAILED \n&quot;)})
  
  
}

HZ_distance &lt;- HZ_means
HZ_distance$level &lt;- factor(HZ_distance$level, levels = c('UNKNOWN','SEX','STAGE','TISSUE', 'SPECIES'))
a &lt;- ggplot(HZ_distance,aes(x=level,fill=level, y=Mean))+
  geom_boxplot(show.legend=FALSE)+ylab('Distance to Parentals')+xlab('')+
  scale_fill_manual(values=viridis(6))+
  stat_boxplot(geom ='errorbar', width = 0.25) +
  geom_hline(yintercept=0,lty=2,lwd=1,col=&quot;black&quot;)+
  theme_classic()
#coord_cartesian(ylim=c(-1,1))
a


bootdat &lt;- rbind(HZ_species,HZ_stage,HZ_sex,HZ_other)
bootdat

meltboot &lt;- melt(bootdat,id.vars = c('LEVEL','ITERATION'))

meltboot$LEVEL &lt;- factor(meltboot$LEVEL, levels = c('UNKNOWN','SEX','STAGE', 'SPECIES'))
b &lt;- ggplot(meltboot,aes(x=LEVEL,fill=variable,y=value))+
  geom_boxplot()+ylab('Number of Replicates')+xlab('')+
  scale_fill_manual(values=c('purple','gray'))+
  theme_classic()
b

c &lt;- ggplot(HZ_pval, aes(x=pvalue))+
  geom_histogram(aes(y = ..density..),bins=5) +
  geom_density(alpha = 0.1, fill = &quot;turquoise&quot;)+
  ylab(&quot;Density&quot;)+xlab(&quot;p-Value&quot;)+
  theme_classic()
c

#save it 
jpeg(&quot;plots/FULL-BootstrapDistance.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(a,nrow=1)
dev.off()


#save it 
jpeg(&quot;plots/FULL-Bootstrap.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(b,nrow=1)
dev.off()

#save it 
jpeg(&quot;plots/FULL-Bootstrap_pvals.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=4)
theme_set(theme_classic(base_size = 16))
grid.arrange(c,nrow=1)
dev.off()</pre>
== Hybrid Intermediacy ==

<pre class="">library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(tidyr)
library(ggplot2)
library(psych)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(data.table)
library(stringr)
library(LICORS)
library(RColorBrewer)
library(viridis)

setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/HZ/dplyr/&quot;)

#save for manhattan
hz &lt;- read.csv('HZ_Manhattan.csv',header=TRUE)
metadat &lt;- read.table('metadata_hz.txt',header=TRUE)

hz_dmrs &lt;- hz[grepl('SPECIES',hz$DMR),]
hz_dats &lt;- hz_dmrs[grepl('^site$|^S_|^D_',names(hz_dmrs))]

hz.m1 = melt(hz_dats, id.vars = 'site',
             measure.vars = names(hz[grepl('^S_|^D_',names(hz_dmrs))]))

colnames(metadat)[colnames(metadat) == 'Library'] &lt;- 'variable'
hzp &lt;- merge(hz.m1,metadat)

hzp$Classification &lt;- as.factor(hzp$Classification)
ggplot(hzp,aes(x=Classification,y=value,fill=Classification))+
  geom_boxplot(varwidth=FALSE,alpha=0.75)+
  stat_boxplot(geom ='errorbar', width = 0.6) +
  theme_classic()+facet_grid(.~site)+
  scale_fill_manual(values=c('black','purple','grey60'))</pre>
== CG-HZ Overlap ==

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)
library(maditr)
library(viridis)

#import truth set DMRs
truth_dmr_CG &lt;- read.csv('CG_DMA_DMRs_5x_bonferonni.csv',header=TRUE)
head(truth_dmr_CG)

hz &lt;- read.csv('HZ_DMA_DMRs_5x_bonferonni.csv',header=TRUE)


hz_cg &lt;- merge(hz,truth_dmr_CG,by='site')

### try CG-HZ overlap 
hz_cg %&gt;% dplyr::count(DMR.x,DMR.y)
dmr_min &lt;- hz_cg
dmr_min &lt;- dmr_min %&gt;% mutate(Overlap = ifelse(DMR.x == &quot;SPECIES&quot; &amp; 
                                                 (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SPECIES&quot; | DMR.y == &quot;SPECIES_STAGE&quot; | DMR.y == &quot;ALL&quot;), &quot;SPECIES&quot;,
                                               ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                        (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SEX&quot; | DMR.y == &quot;ALL&quot; ) , &quot;SEX&quot;,
                                                      ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                               (DMR.y == &quot;SPECIES_STAGE&quot; | DMR.y == &quot;STAGE&quot;) , &quot;STAGE&quot;,
                                                             ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                                      (DMR.y == &quot;UNKNOWN&quot;) , &quot;UNKNOWN&quot;,&quot;UNCLASSIFIED&quot;)))))

dmr_min %&gt;% dplyr::count(Overlap)

#bootstraps
nboots &lt;- 100
HZ_species &lt;- NULL
HZ_sex &lt;- NULL
HZ_stage &lt;- NULL
HZ_unclassified &lt;- NULL
HZ_other &lt;- NULL
HZ_pval &lt;- NULL
HZ_means &lt;- NULL
HZ_noint &lt;- NULL

counter = 0

for (j in seq(1, nboots)) {
  cat('\n Running iteration: ',counter,'\n')
  #obtain stratified sample
  counter=counter+1
  strat_sample &lt;- dmr_min %&gt;%
    group_by(Overlap) %&gt;%
    sample_n(size=2,replace=FALSE)
  
  #re-form model 
  datmeth &lt;- read.csv(&quot;HZ_GLMM_Input_5x.csv&quot;,header=TRUE)
  datmeth$site &lt;- datmeth$CGI
  head(datmeth)
  nrow(datmeth)/24
  
  parents &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up')
  hybrids &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up',negate=TRUE)
  hyb3 &lt;- sample(hybrids,3,replace=FALSE)
  full &lt;- c(parents,hyb3)
  
  #only keep windows identified
  mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                      .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(strat_sample$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))
  
  mod_input2 &lt;- mod_input1[grepl(paste0(full,collapse=&quot;$|^&quot;),mod_input1$ID),]
  #keep levels 
  hzmrg &lt;- strat_sample[grepl('^site|Overlap',names(strat_sample))]
  mod_input &lt;- merge(mod_input2,hzmrg)
  nrow(mod_input)/9
  datmeth &lt;- mod_input
  
  #set these as factor variables 
  datmeth$Classification &lt;- as.factor(datmeth$Classification)
  datmeth$Locality &lt;- as.factor(datmeth$Locality)
  datmeth$Year &lt;- as.factor(datmeth$Year)
  datmeth$ID &lt;- as.factor(datmeth$ID)
  
  #and scale the continuous variables
  datmeth &lt;- datmeth %&gt;% mutate_at(c('Hybrid_Index'), ~(scale(.) %&gt;% as.vector))
  
  plotDat &lt;- NULL 
  tryCatch({
    for (i in seq(1, nrow(datmeth), by = 9)) {
    
    CpGsite &lt;- datmeth[i:(i + 8), ]
    
    glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                        Classification + (1 | Year) ,data = CpGsite, family = &quot;binomial&quot;,
                      control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                             optCtrl = list(maxfun = 2e+08)))
    dats &lt;- emmip(glmm_CpG, ~ Classification , type = &quot;response&quot;, CIs = TRUE,plotit=FALSE) 
    site &lt;- CpGsite[1:3,1]
    level &lt;- CpGsite[1:3,11]
    group &lt;- dats[1]
    mean &lt;- dats[2]
    se &lt;- dats[3]
    loops &lt;- cbind(site,level,group,mean,se)
    plotDat &lt;- rbind(plotDat,loops)
    
    }
    
  plotDat
  plotDat_LongSE &lt;- dcast(plotDat, site ~ Classification, value.var = 'SE')
  plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Classification, value.var = 'yvar')
  names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
  plotDat_LongMEAN$ParentalMidPoint &lt;- ((plotDat_LongMEAN$Cornix + plotDat_LongMEAN$Corone)/2)
  plotDat_LongMEAN$HybDistance &lt;- (plotDat_LongMEAN$Hybrid - plotDat_LongMEAN$ParentalMidPoint)
  
  #add simple intermediacy factor 
  plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                          Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
  hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate','HybDistance')]
  for_tab &lt;- merge(hyb_level,plotDat,by='site')
  k_tab &lt;- unique(for_tab[,c('site','Intermediate','level','HybDistance')])
  
  #calculate distance between hybrids and the parental midpoint 
  hyb_means &lt;- as.data.frame(k_tab %&gt;% group_by(level) %&gt;% dplyr::summarize(Mean = mean(HybDistance)))
  hyb_means$ITERATION &lt;- counter
  
  #test significant differences in counts, if there are no intermediate events, this will add a column of zeroes
  con1 &lt;- table(k_tab$level,k_tab$Intermediate)
  con1
  
  tryCatch({
    res &lt;- fisher.test(con1)
    con2 &lt;- table(k_tab$level,k_tab$HybDistance)
    con2
    
    spec &lt;-  data.frame(ITERATION = counter, LEVEL = 'SPECIES',INTERMEDIATE = con1[2,1], MIXED = con1[2,2])
    stag &lt;-  data.frame(ITERATION = counter, LEVEL = 'STAGE',INTERMEDIATE = con1[3,1], MIXED = con1[3,2])
    fals &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNCLASSIFIED',INTERMEDIATE = con1[4,1], MIXED = con1[4,2])
    sexx &lt;-  data.frame(ITERATION = counter, LEVEL = 'SEX',INTERMEDIATE = con1[1,1], MIXED = con1[1,2])
    other &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNKNOWN',INTERMEDIATE = con1[5,1], MIXED = con1[5,2])
    pvals &lt;-  data.frame(pvalue = res$p.value)
    
    
    #bind loops
    HZ_species &lt;- rbind(HZ_species, spec)
    HZ_stage &lt;- rbind(HZ_stage, stag)
    HZ_sex &lt;- rbind(HZ_sex, sexx)
    HZ_unclassified &lt;- rbind(HZ_unclassified, fals)
    HZ_other &lt;- rbind(HZ_other, other)
    HZ_pval &lt;- rbind(HZ_pval,pvals)
    HZ_means &lt;- rbind(HZ_means,hyb_means)
    
  }, error=function(e){HZ_noint &lt;- rbind(HZ_noint,counter);cat(counter,&quot;BAD \n&quot;)})
  
    }, error=function(e){cat(counter,&quot;: FAILED \n&quot;)})
  
  
}

HZ_distance &lt;- HZ_means
HZ_distance &lt;- HZ_distance[!grepl('UNCLASSIFIED',HZ_distance$level),]
HZ_distance$level &lt;- factor(HZ_distance$level, levels = c('UNKNOWN','SEX','STAGE', 'SPECIES'))
a &lt;- ggplot(HZ_distance,aes(x=level,fill=level, y=Mean))+
  geom_boxplot(show.legend=FALSE)+ylab('Distance to Parentals')+xlab('')+
  scale_fill_manual(values=viridis(6))+
  stat_boxplot(geom ='errorbar', width = 0.25) +
  geom_hline(yintercept=0,lty=2,lwd=1,col=&quot;black&quot;)+
  theme_classic()
#coord_cartesian(ylim=c(-1,1))
a


  bootdat &lt;- rbind(HZ_species,HZ_stage,HZ_sex,HZ_other)
bootdat

meltboot &lt;- melt(bootdat,id.vars = c('LEVEL','ITERATION'))

meltboot$LEVEL &lt;- factor(meltboot$LEVEL, levels = c('UNKNOWN','SEX','STAGE', 'SPECIES'))
b &lt;- ggplot(meltboot,aes(x=LEVEL,fill=variable,y=value))+
  geom_boxplot()+ylab('Number of Replicates')+xlab('')+
  scale_fill_manual(values=c('purple','gray'))+
  theme_classic()
b

c &lt;- ggplot(HZ_pval, aes(x=pvalue))+
  geom_histogram(aes(y = ..density..),bins=5) +
  geom_density(alpha = 0.1, fill = &quot;turquoise&quot;)+
  ylab(&quot;Density&quot;)+xlab(&quot;p-Value&quot;)+
  theme_classic()
c

#save it 
jpeg(&quot;plots/HZ-CG-BootstrapDistance.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(a,nrow=1)
dev.off()


#save it 
jpeg(&quot;plots/HZ-CG-Bootstrap.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(b,nrow=1)
dev.off()

#save it 
jpeg(&quot;plots/HZ-CG-Bootstrap_pvals.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=4)
theme_set(theme_classic(base_size = 16))
grid.arrange(c,nrow=1)
dev.off()</pre>
== WGBS-HZ Overlap ==

<pre class="">setwd(&quot;E:/Research/scratch/crow_hybrid_paper/CGI/all&quot;)

library(methylKit)
library(lme4)
library(Matrix)
library(emmeans)
library(multcomp)
library(matrixStats)
library(ggplot2)
library(gridExtra)
library(HDInterval)
library(dplyr)
library(stringr)
library(maditr)
library(viridis)

#import truth set DMRs
truth_dmr_WGBS &lt;- read.csv('WGBS_DMA_DMRs_5x_bonferonni.csv',header=TRUE)
head(truth_dmr_WGBS)

hz &lt;- read.csv('HZ_DMA_DMRs_5x_bonferonni.csv',header=TRUE)


hz_wgbs &lt;- merge(hz,truth_dmr_WGBS,by='site')

### try WGBS-HZ overlap 
dmr_min &lt;- hz_wgbs
hz_wgbs %&gt;% dplyr::count(DMR.x,DMR.y)
dmr_min &lt;- dmr_min %&gt;% mutate(Overlap = ifelse(DMR.x == &quot;SPECIES&quot; &amp; 
                                                 (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SPECIES&quot; | DMR.y == &quot;SPECIES_TISSUE&quot; | DMR.y == &quot;ALL&quot;), &quot;SPECIES&quot;,
                                               ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                        (DMR.y == &quot;SEX_SPECIES&quot; | DMR.y == &quot;SEX&quot; | DMR.y == &quot;ALL&quot; ) , &quot;SEX&quot;,
                                                      ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                               (DMR.y == &quot;SPECIES_TISSUE&quot; | DMR.y == &quot;TISSUE&quot;) , &quot;TISSUE&quot;,
                                                             ifelse(DMR.x == &quot;UNKNOWN&quot; &amp; 
                                                                      (DMR.y == &quot;UNKNOWN&quot;) , &quot;UNKNOWN&quot;,&quot;UNCLASSIFIED&quot;)))))

dmr_min %&gt;% dplyr::count(Overlap)

#bootstraps
nboots &lt;- 100
HZ_species &lt;- NULL
HZ_sex &lt;- NULL
HZ_tissue &lt;- NULL
HZ_unclassified &lt;- NULL
HZ_other &lt;- NULL
HZ_pval &lt;- NULL
HZ_means &lt;- NULL
HZ_noint &lt;- NULL

counter = 0

for (j in seq(1, nboots)) {
  cat('\n Running iteration: ',counter,'\n')
  #obtain stratified sample
  counter=counter+1
  strat_sample &lt;- dmr_min %&gt;%
    group_by(Overlap) %&gt;%
    sample_n(size=2,replace=FALSE)
  
  #re-form model 
  datmeth &lt;- read.csv(&quot;HZ_GLMM_Input_5x.csv&quot;,header=TRUE)
  datmeth$site &lt;- datmeth$CGI
  head(datmeth)
  nrow(datmeth)/24
  
  parents &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up')
  hybrids &lt;- str_subset(unique(datmeth$ID),'D_Ko|S_Up',negate=TRUE)
  hyb3 &lt;- sample(hybrids,3,replace=FALSE)
  full &lt;- c(parents,hyb3)
  
  #only keep windows identified
  mod_input1 &lt;- datmeth %&gt;% filter_at(.vars = vars(site),
                                      .vars_predicate = any_vars(str_detect(. , paste0(&quot;^(&quot;, paste(strat_sample$site, collapse = &quot;$|^&quot;), &quot;)&quot;))))
  
  mod_input2 &lt;- mod_input1[grepl(paste0(full,collapse=&quot;$|^&quot;),mod_input1$ID),]
  #keep levels 
  hzmrg &lt;- strat_sample[grepl('^site|Overlap',names(strat_sample))]
  mod_input &lt;- merge(mod_input2,hzmrg)
  nrow(mod_input)/9
  datmeth &lt;- mod_input
  
  #set these as factor variables 
  datmeth$Classification &lt;- as.factor(datmeth$Classification)
  datmeth$Locality &lt;- as.factor(datmeth$Locality)
  datmeth$Year &lt;- as.factor(datmeth$Year)
  datmeth$ID &lt;- as.factor(datmeth$ID)
  
  #and scale the continuous variables
  datmeth &lt;- datmeth %&gt;% mutate_at(c('Hybrid_Index'), ~(scale(.) %&gt;% as.vector))
  
  plotDat &lt;- NULL 
  tryCatch({
    for (i in seq(1, nrow(datmeth), by = 9)) {
      CpGsite &lt;- datmeth[i:(i + 8), ]
      
      glmm_CpG &lt;- glmer(cbind(MethCounts, UnMethCounts) ~
                          Classification + (1 | Year) ,data = CpGsite, family = &quot;binomial&quot;,
                        control = glmerControl(optimizer = &quot;bobyqa&quot;, boundary.tol = 0.01,
                                               optCtrl = list(maxfun = 2e+08)))
      dats &lt;- emmip(glmm_CpG, ~ Classification , type = &quot;response&quot;, CIs = TRUE,plotit=FALSE) 
      site &lt;- CpGsite[1:3,1]
      level &lt;- CpGsite[1:3,11]
      group &lt;- dats[1]
      mean &lt;- dats[2]
      se &lt;- dats[3]
      loops &lt;- cbind(site,level,group,mean,se)
      plotDat &lt;- rbind(plotDat,loops)
    }
  
  plotDat
  plotDat_LongSE &lt;- dcast(plotDat, site ~ Classification, value.var = 'SE')
  plotDat_LongMEAN &lt;- dcast(plotDat, site ~ Classification, value.var = 'yvar')
  names(plotDat_LongMEAN) &lt;- c('site','Corone','Hybrid','Cornix')
  plotDat_LongMEAN$ParentalMidPoint &lt;- ((plotDat_LongMEAN$Cornix + plotDat_LongMEAN$Corone)/2)
  plotDat_LongMEAN$HybDistance &lt;- (plotDat_LongMEAN$Hybrid - plotDat_LongMEAN$ParentalMidPoint)
  
  #add simple intermediacy factor 
  plotDat_LongMEAN &lt;- plotDat_LongMEAN %&gt;% mutate(Intermediate = ifelse(Hybrid &gt; Corone &amp; Hybrid &lt; Cornix | 
                                                                          Hybrid &lt; Corone &amp; Hybrid &gt; Cornix, &quot;INTERMEDIATE&quot;, &quot;OTHER&quot;))
  hyb_level &lt;- plotDat_LongMEAN[,c('site','Intermediate','HybDistance')]
  for_tab &lt;- merge(hyb_level,plotDat,by='site')
  k_tab &lt;- unique(for_tab[,c('site','Intermediate','level','HybDistance')])
  
  #calculate distance between hybrids and the parental midpoint 
  hyb_means &lt;- as.data.frame(k_tab %&gt;% group_by(level) %&gt;% dplyr::summarize(Mean = mean(HybDistance)))
  hyb_means$ITERATION &lt;- counter
  
  #test significant differences in counts, if there are no intermediate events, this will add a column of zeroes
  con1 &lt;- table(k_tab$level,k_tab$Intermediate)
  con1
  
  tryCatch({
    res &lt;- fisher.test(con1)
    con2 &lt;- table(k_tab$level,k_tab$HybDistance)
    con2
    
    spec &lt;-  data.frame(ITERATION = counter, LEVEL = 'SPECIES',INTERMEDIATE = con1[2,1], MIXED = con1[2,2])
    tiss &lt;-  data.frame(ITERATION = counter, LEVEL = 'TISSUE',INTERMEDIATE = con1[3,1], MIXED = con1[3,2])
    fals &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNCLASSIFIED',INTERMEDIATE = con1[4,1], MIXED = con1[4,2])
    sexx &lt;-  data.frame(ITERATION = counter, LEVEL = 'SEX',INTERMEDIATE = con1[1,1], MIXED = con1[1,2])
    other &lt;-  data.frame(ITERATION = counter, LEVEL = 'UNKNOWN',INTERMEDIATE = con1[5,1], MIXED = con1[5,2])
    pvals &lt;-  data.frame(pvalue = res$p.value)
    
    
    #bind loops
    HZ_species &lt;- rbind(HZ_species, spec)
    HZ_tissue &lt;- rbind(HZ_tissue, tiss)
    HZ_sex &lt;- rbind(HZ_sex, sexx)
    HZ_unclassified &lt;- rbind(HZ_unclassified, fals)
    HZ_other &lt;- rbind(HZ_other, other)
    HZ_pval &lt;- rbind(HZ_pval,pvals)
    HZ_means &lt;- rbind(HZ_means,hyb_means)
    
  }, error=function(e){HZ_noint &lt;- rbind(HZ_noint,counter);cat(counter,&quot;BAD \n&quot;)})
  
    }, error=function(e){cat(counter,&quot;: FAILED \n&quot;)})
  
  
}

HZ_distance &lt;- HZ_means
HZ_distance &lt;- HZ_distance[!grepl('UNCLASSIFIED',HZ_distance$level),]
HZ_distance$level &lt;- factor(HZ_distance$level, levels = c('UNKNOWN','SEX','TISSUE', 'SPECIES'))
a &lt;- ggplot(HZ_distance,aes(x=level,fill=level, y=Mean))+
  geom_boxplot(show.legend=FALSE)+ylab('Distance to Parentals')+xlab('')+
  scale_fill_manual(values=viridis(6))+
  stat_boxplot(geom ='errorbar', width = 0.25) +
  geom_hline(yintercept=0,lty=2,lwd=1,col=&quot;black&quot;)+
  theme_classic()
#coord_cartesian(ylim=c(-1,1))
a


bootdat &lt;- rbind(HZ_species,HZ_tissue,HZ_sex,HZ_other)
bootdat

meltboot &lt;- melt(bootdat,id.vars = c('LEVEL','ITERATION'))

meltboot$LEVEL &lt;- factor(meltboot$LEVEL, levels = c('UNKNOWN','SEX','TISSUE', 'SPECIES'))
b &lt;- ggplot(meltboot,aes(x=LEVEL,fill=variable,y=value))+
  geom_boxplot()+ylab('Number of Replicates')+xlab('')+
  scale_fill_manual(values=c('purple','gray'))+
  theme_classic()
b

c &lt;- ggplot(HZ_pval, aes(x=pvalue))+
  geom_histogram(aes(y = ..density..),bins=5) +
  geom_density(alpha = 0.1, fill = &quot;turquoise&quot;)+
  ylab(&quot;Density&quot;)+xlab(&quot;p-Value&quot;)+
  theme_classic()
c

#save it 
jpeg(&quot;plots/HZ-CG-BootstrapDistance.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(a,nrow=1)
dev.off()


#save it 
jpeg(&quot;plots/HZ-CG-Bootstrap.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=7)
theme_set(theme_classic(base_size = 16))
grid.arrange(b,nrow=1)
dev.off()

#save it 
jpeg(&quot;plots/HZ-CG-Bootstrap_pvals.jpg&quot;,units=&quot;in&quot;,res=300, height=5, width=4)
theme_set(theme_classic(base_size = 16))
grid.arrange(c,nrow=1)
dev.off()</pre>
= ~~ 2500BP ~~ =

<pre class="">for i in $(ls *.CpG_5mC.cov.gz | sed 's/\..*//g'); do 
zcat ${i}.CpG_5mC.cov.gz | bedtools intersect -a - -b ../2500BP.bed -wa -wb | awk '{OFS=&quot;\t&quot;}{print $1, $2, $3, $4, $5, $6, $7&quot;_&quot;$8&quot;_&quot;$9}' | gzip -c &gt; ${i}.2500BP.bed.gz
done</pre>
== CG 5x ==

<pre class=""></pre>
=== Volcanos ===

<pre class=""></pre>
== HZ 5x ==

<pre class=""></pre>
=== Volcanos ===

<pre class=""></pre>


== WGBS 5x ==

<pre class=""></pre>
=== Volcanos ===

<pre class=""></pre>
